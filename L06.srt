1
00:00:28,862 --> 00:00:29,362
All right.

2
00:00:29,362 --> 00:00:33,133
Today we're going to talk about linked
planar 3SAT.

3
00:00:33,199 --> 00:00:36,569
This is an extra strong version
of planar 3SAT

4
00:00:36,669 --> 00:00:39,572
compared to the version
we saw last lecture.

5
00:00:39,572 --> 00:00:44,110
It's relatively new -- it’s
by Pilz in 2018 --

6
00:00:44,177 --> 00:00:47,180
and it's motivated

7
00:00:47,180 --> 00:00:50,183
by proving Super Mario Brothers
is NP-hard.

8
00:00:50,383 --> 00:00:55,288
So let me first talk about a proof
that Super Mario Brothers is NP-hard.

9
00:00:55,288 --> 00:00:59,659
This started in 2012 and then I think
it was finally finished in 2014.

10
00:00:59,726 --> 00:01:04,497
So here you see some press we got: “Science
proves old video games were super hard.”

11
00:01:04,497 --> 00:01:11,504
This is justifying “Nintendo
hard” games by proving them NP-hard.

13
00:01:11,571 --> 00:01:12,305
Later in the class,

14
00:01:12,305 --> 00:01:15,308
we're going to actually prove
Super Mario Brothers is PSPACE-complete.

15
00:01:15,308 --> 00:01:19,145
But today, we're just thinking about
good old NP-hardness.

16
00:01:19,212 --> 00:01:25,151
This proof will apply to the original
Super Mario Brothers,

17
00:01:25,218 --> 00:01:28,921
Super Mario Brothers Lost Levels (which
is Super Mario Brothers 2 in Japan),

18
00:01:28,921 --> 00:01:32,292
Super Mario Brothers 3, and
Super Mario World.

19
00:01:32,358 --> 00:01:37,030
So the reduction is from 3SAT.

20
00:01:37,097 --> 00:01:40,500
This was done before we had
linked planar 3SAT and the point of

21
00:01:40,500 --> 00:01:42,702
linked planar 3SAT is to make this
proof easier.

22
00:01:42,702 --> 00:01:45,705
But first let me tell you the
regular proof.

23
00:01:45,905 --> 00:01:49,476
So of course, with 3SAT, we've got
some variables, we've got some clauses.

24
00:01:49,709 --> 00:01:53,880
And the idea is that
Mario is going to traverse this network

25
00:01:53,980 --> 00:01:58,218
connecting each variable to the clauses
that it appears in

26
00:01:58,284 --> 00:02:01,121
by traversing these tunnels.

27
00:02:01,121 --> 00:02:02,622
So we start up at the start.

28
00:02:02,622 --> 00:02:05,525
And then in the first variable gadget,
Mario is going to make a decision

29
00:02:05,525 --> 00:02:08,995
whether to set x to true or false,
let's say setting it to true.

30
00:02:09,095 --> 00:02:11,731
Then Mario's intended
path is to go and visit

31
00:02:11,731 --> 00:02:15,435
all the clauses that contain x
because they are now satisfied

32
00:02:15,435 --> 00:02:18,671
and it's going to do something
to unlock those clauses.

33
00:02:18,738 --> 00:02:20,874
Then it gets routed to the
next variable.

34
00:02:20,874 --> 00:02:25,245
If instead Mario had chosen not x,
it would have set all the clauses

35
00:02:25,245 --> 00:02:30,750
that have not x to be satisfied and
then go to the same variable choice.

36
00:02:30,850 --> 00:02:33,086
And then you make a choice for y.

37
00:02:33,086 --> 00:02:36,456
Say you choose not y.
Then you make a choice for z.

38
00:02:36,456 --> 00:02:39,359
Say you choose z as true.

39
00:02:39,359 --> 00:02:44,397
And then at the end, whether you choose z
or z-bar, they both route to this common

40
00:02:44,397 --> 00:02:49,369
path, which is to check all of the
clauses and you can get to the finish

41
00:02:49,469 --> 00:02:52,272
of the end of the level
if and only if

42
00:02:52,272 --> 00:02:56,009
each of these clauses has been satisfied
like it is in this example.

43
00:02:56,109 --> 00:02:57,310
So that's what we'd like to build.

44
00:02:57,310 --> 00:03:02,782
Now let me show you the gadgets that go
in these two boxes, variables and clauses.

45
00:03:02,882 --> 00:03:06,886
So this is the original version
that appeared in 2012.

46
00:03:06,953 --> 00:03:11,291
We have a variable where
we're using this idea of long falls.

47
00:03:11,324 --> 00:03:15,662
So if Mario falls really far,
he can't jump back up.

48
00:03:15,762 --> 00:03:17,497
This is actually not the interesting
long fall.

49
00:03:17,497 --> 00:03:20,266
The interesting one is falling left
or falling right here.

50
00:03:20,266 --> 00:03:23,269
If these are long enough,
then once Mario chooses the true

51
00:03:23,269 --> 00:03:26,739
path or the false path,
they can't undo that choice.

52
00:03:26,806 --> 00:03:29,742
I think this-- the purpose here is
there's actually two ways to get to

53
00:03:29,742 --> 00:03:33,112
this variable gadget, depending whether
the previous variable was true or false.

54
00:03:33,112 --> 00:03:38,184
So those are the two entrances,
and that's the variable, that works fine.

55
00:03:38,284 --> 00:03:40,119
Then there's this clause.

56
00:03:40,119 --> 00:03:43,723
The idea is that
these are the three places,

57
00:03:43,790 --> 00:03:46,326
the three literals of the clause.

58
00:03:46,326 --> 00:03:49,062
So those are connected to
some variable gadget up above.

59
00:03:49,062 --> 00:03:55,501
And if Mario can get here, hop on
the Koopa, send the shell running,

60
00:03:55,501 --> 00:04:00,440
it breaks these blocks, and goes out
the hole of this gadget or the next one.

61
00:04:00,506 --> 00:04:03,209
So if you can get to
any one of these turtles, you're happy.

62
00:04:03,209 --> 00:04:09,182
Because of this long fall, Mario can't,
like, come in here and go back up there.

63
00:04:09,282 --> 00:04:11,718
And if you force Mario to be big,

64
00:04:11,718 --> 00:04:14,420
he won't be able to get through here
and cheat.

65
00:04:14,420 --> 00:04:17,257
So the idea is you come here,
hit one of the turtles, and later

66
00:04:17,257 --> 00:04:23,000
you'll be able to go through this path
if and only if the clause is satisfied.

68
00:04:23,000 --> 00:04:25,431
Good? All right,

69
00:04:25,431 --> 00:04:29,435
except we forgot what Super
Mario Brothers 1 mechanics were,

70
00:04:29,435 --> 00:04:34,240
and in fact, for Super Mario Brothers 1
these blocks I think would shift,

71
00:04:34,240 --> 00:04:37,243
but they don't actually get broken
by turtle shells.

72
00:04:37,310 --> 00:04:39,846
That is Super Mario Brothers 3.

73
00:04:39,846 --> 00:04:42,382
Super Mario Brothers 3,
this gadget works.

74
00:04:42,382 --> 00:04:46,185
But in Super Mario Brothers 1,
 we need something else.

75
00:04:46,252 --> 00:04:49,489
The same idea works
with Super Mario World.

76
00:04:49,555 --> 00:04:51,858
A little different,

77
00:04:51,858 --> 00:04:55,662
but same setup up here.

78
00:04:55,728 --> 00:04:59,799
But here we have a question
block that-- and shells will

79
00:04:59,866 --> 00:05:01,801
enable the thing inside the question
block.

80
00:05:01,801 --> 00:05:05,838
And in particular, Super
Mario World has a POW block

81
00:05:05,838 --> 00:05:11,444
which will turn all these coins into
walls or bricks for 10 seconds

82
00:05:11,444 --> 00:05:14,747
or so and long enough for Mario
to make it through.

83
00:05:14,814 --> 00:05:19,352
If Mario can hit one of the shells
and set up the POW block for later,

84
00:05:19,352 --> 00:05:24,257
then Mario can come and get it
and run across and check the clause.

85
00:05:24,324 --> 00:05:25,958
Okay. What about Super Mario Brothers 1?

86
00:05:25,958 --> 00:05:29,829
For this we're going to use--
we're also going to use question blocks.

87
00:05:29,829 --> 00:05:34,600
But it's a little trickier because,

88
00:05:34,667 --> 00:05:36,436
yeah,

89
00:05:36,436 --> 00:05:38,738
we're not even going to use
turtle shells in this proof.

90
00:05:38,738 --> 00:05:42,241
We're just going to have a star available
in each of these question blocks.

91
00:05:42,241 --> 00:05:45,244
So if Mario can satisfy
one of the literals,

92
00:05:45,411 --> 00:05:48,414
there'll be a star bouncing around
back and forth here.

93
00:05:48,581 --> 00:05:52,452
Stars give Mario invincibility
so you can--

94
00:05:52,518 --> 00:05:55,521
Mario can later, when checking the
clause, get the star

95
00:05:55,555 --> 00:06:01,194
and survive this path of doom

96
00:06:01,294 --> 00:06:02,929
because they're invincible
for just long enough

97
00:06:02,929 --> 00:06:05,932
to get through this clause,
then check the next one, and so on.

98
00:06:06,032 --> 00:06:10,570
Okay, so this is the working version
that happened in 2014

99
00:06:10,636 --> 00:06:13,072
for Super Mario Brothers 1.

100
00:06:13,072 --> 00:06:14,841
So that's variables. Oh, right.

101
00:06:14,841 --> 00:06:18,611
There's a slight catch,
which is in real Super Mario Brothers

102
00:06:18,611 --> 00:06:21,814
you also have these fun glitches
like the ability to wall jump.

103
00:06:21,881 --> 00:06:24,517
I've actually done this in
Super Mario Brothers.

104
00:06:24,517 --> 00:06:28,221
It's not super hard
but definitely requires

105
00:06:28,221 --> 00:06:34,026
a bit of luck and/or
tool assisted speedruns.

106
00:06:34,026 --> 00:06:36,462
If you jump just at the right time
when you hit a wall,

107
00:06:36,462 --> 00:06:40,299
you can bounce off of it and that
prevents our long falls from working.

108
00:06:40,366 --> 00:06:44,504
But there's an easy fix, which is
for every long fall we add some ceiling.

109
00:06:44,570 --> 00:06:48,408
And it's not a-- if you jump up this
wall, you won't be able to get

110
00:06:48,474 --> 00:06:51,878
right in that center,
especially if you make this wider.

111
00:06:51,944 --> 00:06:53,881
But I think even with this width.

112
00:06:53,881 --> 00:06:55,281
There's more fun glitches,

113
00:06:55,281 --> 00:06:58,484
like the ability
to run through horizontal walls.

114
00:06:58,551 --> 00:07:00,620
This doesn't work vertically.

115
00:07:00,620 --> 00:07:03,823
But yeah, it's crazy
what you find you can do.

116
00:07:03,823 --> 00:07:06,692
I mean, there's very exhaustive--
in the speedrunning community,

117
00:07:06,692 --> 00:07:09,328
there's an exhaustive set of people
trying to find the best ways

118
00:07:09,328 --> 00:07:11,631
to run every level,
finding all these crazy glitches.

119
00:07:11,631 --> 00:07:13,633
These are very hard for humans to do.

120
00:07:13,633 --> 00:07:18,905
They require precise timing
of hitting the left and right button.

121
00:07:18,971 --> 00:07:23,075
But we can fix this too, by whenever we
have a wall that you could run through,

123
00:07:23,176 --> 00:07:27,580
you also put a bunch of enemies so you'll
take damage if you try to run through it.

124
00:07:27,580 --> 00:07:30,583
And if you have enough damage,
you will die.

125
00:07:30,817 --> 00:07:35,188
So these are working around the glitches
that we know in Super Mario Brothers.

126
00:07:35,254 --> 00:07:35,721
All right.

127
00:07:35,721 --> 00:07:38,858
So that's how we do a variable --
see it here --

128
00:07:38,858 --> 00:07:41,861
how we do a clause.

129
00:07:41,994 --> 00:07:45,398
So far, so good, except you see
lots of crossings in this diagram.

130
00:07:45,398 --> 00:07:46,966
We're not reducing from planar 3SAT

131
00:07:46,966 --> 00:07:50,536
because it won't help us --
I'll talk about that in a second --

132
00:07:50,603 --> 00:07:51,440
we're reducing from 3SAT.

133
00:07:51,506 --> 00:07:57,777
So these connections here between a
variable and a clause are actually doubled.

134
00:07:57,777 --> 00:07:59,679
It's more like the colored edges here.

135
00:07:59,679 --> 00:08:03,182
So you'll be coming through here
visiting this part of the clause,

136
00:08:03,182 --> 00:08:06,419
which is really going to be upside down
because all the literals are on

137
00:08:06,419 --> 00:08:10,723
the bottom of the figure and then
coming back on a separate path.

138
00:08:10,790 --> 00:08:16,095
So at each of these crossings
between the colored lines

139
00:08:16,162 --> 00:08:18,865
we need a crossover gadget.

140
00:08:18,865 --> 00:08:21,434
And I'm going to show you the
crossover gadget just to tell you why

141
00:08:21,434 --> 00:08:25,171
we want to get rid of them
because they're really annoying.

142
00:08:25,271 --> 00:08:26,772
But at each crossover

143
00:08:26,772 --> 00:08:28,908
we only need it to work
in a single direction.

144
00:08:28,908 --> 00:08:31,377
So blue is always going to go
in this direction,

145
00:08:31,377 --> 00:08:34,012
purple is always going to go
in this direction, for example.

146
00:08:34,012 --> 00:08:37,383
In this place, purple will always
go in this direction.

147
00:08:37,450 --> 00:08:39,552
So each path only needs to
work in one direction.

148
00:08:39,552 --> 00:08:41,754
We also know an ordering on the paths.

149
00:08:41,754 --> 00:08:44,557
We know that the blue path,
if it's used,

150
00:08:44,557 --> 00:08:48,194
will happen before the purple path
because we're choosing variables in order.

151
00:08:48,261 --> 00:08:51,998
For each of these colored intersections
we can figure out which is first.

152
00:08:52,198 --> 00:08:54,433
So that's going to be useful.

153
00:08:54,433 --> 00:08:57,703
Here is the original crossover
gadget from 2012.

154
00:08:57,770 --> 00:09:01,474
It has a couple of maybe bugs,

155
00:09:01,541 --> 00:09:03,910
but this gives you the high level idea.

156
00:09:03,910 --> 00:09:06,646
You can either go up through this gadget
if you're big Mario,

157
00:09:06,646 --> 00:09:08,514
you can break these blocks, get through,

158
00:09:08,514 --> 00:09:12,552
and maybe you can't get on this path.
Although I think maybe you can.

159
00:09:12,552 --> 00:09:16,556
In fact, if you duck and jump enough
times it might be possible.

160
00:09:16,656 --> 00:09:19,659
On the other hand,
if you come from the left,

161
00:09:19,659 --> 00:09:22,595
take damage from this goomba,
then you're small enough,

162
00:09:22,595 --> 00:09:26,665
you can get through here, get a
mushroom out of this question block,

163
00:09:26,665 --> 00:09:29,902
and then -- which is necessary,
you have to take it because otherwise

164
00:09:29,902 --> 00:09:33,239
you won't be able 
to get through here -- and leave.

166
00:09:33,239 --> 00:09:37,043
Here is the fixed version
that eventually appeared,

167
00:09:37,143 --> 00:09:40,479
where we've added some more wiggling
here for a couple of reasons.

168
00:09:40,479 --> 00:09:45,518
One is it's not possible
for big Mario to get through there.

169
00:09:45,585 --> 00:09:47,186
And the other is--

170
00:09:47,186 --> 00:09:51,924
We added a long fall just to make sure you
can't come backwards through this gadget.

171
00:09:52,024 --> 00:09:55,127
I think the other issue is that
depending on how you hit this question

172
00:09:55,127 --> 00:09:58,197
block, the mushroom may have gone left.

173
00:09:58,431 --> 00:10:01,934
And in this previous gadget,

174
00:10:02,001 --> 00:10:05,871
it may have fallen in here,
which would-- could do weird things.

175
00:10:05,938 --> 00:10:09,141
So this is the "cleaned up" version.

176
00:10:09,241 --> 00:10:10,276
It's still quite complicated.

177
00:10:10,276 --> 00:10:12,912
There is some leakage here,

178
00:10:12,912 --> 00:10:16,182
which is -- let's see --
if you go from horizontal to vertical,

179
00:10:16,248 --> 00:10:17,783
if both are traversed.

180
00:10:17,783 --> 00:10:20,987
So if you first come through here

181
00:10:21,053 --> 00:10:25,791
and later come this way,
you'll be able to go up.

182
00:10:25,858 --> 00:10:28,661
And that's the leakage
we maybe don't want.

183
00:10:28,661 --> 00:10:31,998
But you can avoid that
by just ordering these paths correctly.

184
00:10:31,998 --> 00:10:35,001
If you guarantee in the ordering
that you do the horizontal

185
00:10:35,001 --> 00:10:38,371
before you do the vertical,
then there won't be any leakage.

186
00:10:38,471 --> 00:10:42,842
Okay. So this was just to remind you
how painful crossover gadgets are.

188
00:10:43,075 --> 00:10:47,980
Lots of intimate constructions
here that we'd like to avoid.

189
00:10:48,047 --> 00:10:51,050
So can we do

190
00:10:51,183 --> 00:10:54,353
a stronger version of Planar 3SAT

191
00:10:54,453 --> 00:10:58,190
that doesn't need crossovers?

192
00:10:58,257 --> 00:11:04,330
All right. So now let's go back to last
lecture and remember what Planar 3SAT says.

194
00:11:04,397 --> 00:11:07,534
So this is Planar 3SAT theorem:

195
00:11:07,634 --> 00:11:12,405
3SAT remains NP-hard
when a particular graph is planar.

196
00:11:12,471 --> 00:11:17,075
The graph is-- consists of
two parts, let's say.

197
00:11:17,075 --> 00:11:20,012
There's a variable clause
bipartite graph.

198
00:11:20,012 --> 00:11:25,284
So this is all of the connections between
variables and the clauses they appear in.

199
00:11:25,284 --> 00:11:28,721
So that's basically this
part of the graph,

200
00:11:28,788 --> 00:11:32,591
below this line and above this line.

201
00:11:32,658 --> 00:11:34,427
And then that's the base version,

202
00:11:34,427 --> 00:11:37,463
that graph is planar.
But we got a somewhat stronger version,

203
00:11:37,463 --> 00:11:43,369
which is that that graph plus a cycle
through all the variables in some order

204
00:11:43,436 --> 00:11:47,740
that together that graph is planar.

205
00:11:47,807 --> 00:11:50,000
And there are some other
fun constraints we got.

206
00:11:50,000 --> 00:11:51,377
One of them,

207
00:11:51,377 --> 00:11:55,214
it can be phrased this way
that all of the pos-- so each edge

208
00:11:55,214 --> 00:11:59,552
in this bipartite
graph is either positive or negative,

209
00:11:59,552 --> 00:12:04,557
meaning the the variable appears
in its positive form or its negated form.

210
00:12:04,657 --> 00:12:08,627
And you can guarantee
that the positive edges are, say, interior

211
00:12:08,627 --> 00:12:14,900
to this variable cycle and the negative
edges are exterior to this variable cycle.

212
00:12:14,967 --> 00:12:16,669
And this is actually

213
00:12:16,669 --> 00:12:21,040
what we were calling planar monotone [rectilinear]
3SAT, where you have a horizontal line

214
00:12:21,040 --> 00:12:24,610
that represents the cycle
through all the variables

215
00:12:24,677 --> 00:12:28,447
and all the positive clauses appear
above all the negative clauses below.

216
00:12:28,447 --> 00:12:32,852
So in fact this constraint
in this formulation with this cycle

217
00:12:33,052 --> 00:12:37,456
implies that the clauses are monotone,
either all positive or negative,

218
00:12:37,456 --> 00:12:40,826
because every clause is either going to be
inside the cycle or outside the cycle.

219
00:12:40,826 --> 00:12:44,530
Here is a little picture.
Big cycle through all the variables

220
00:12:44,530 --> 00:12:48,167
which we are drawing with circles,
and then we have some clauses inside --

221
00:12:48,167 --> 00:12:50,703
those are going to be positive --
some clauses outside --

222
00:12:50,703 --> 00:12:54,707
those are going to be negative
because these edges are negative.

223
00:12:54,774 --> 00:12:59,411
Cool. So that was the good news.

225
00:12:59,478 --> 00:13:03,782
The annoying thing,
if you look at this construction, is--

226
00:13:03,849 --> 00:13:07,753
Okay, we have the bipartite graph
in the middle.

227
00:13:07,820 --> 00:13:11,423
We also want to have a path
through all the clauses

228
00:13:11,657 --> 00:13:14,493
because we need to be able
to traverse the clauses and check them all

229
00:13:14,493 --> 00:13:15,694
in some order.

230
00:13:15,694 --> 00:13:21,233
So that's good because we-- oh, sorry,
we have a cycle through all the variables.

231
00:13:21,333 --> 00:13:23,202
That's also useful

232
00:13:23,202 --> 00:13:26,138
because we need to come into the variable,
do some stuff

233
00:13:26,138 --> 00:13:28,841
and then go to the next variable
and go to the next variable.

234
00:13:28,841 --> 00:13:31,443
So we actually need a path
on the variables as well,

235
00:13:31,443 --> 00:13:34,013
but then we need a connection
from the last variable

236
00:13:34,013 --> 00:13:38,818
to the first clause, and we need a
path through all the clauses.

237
00:13:38,918 --> 00:13:41,654
And that seems

238
00:13:41,654 --> 00:13:46,559
problematic because last time
we also mentioned this positive result.

239
00:13:46,659 --> 00:13:49,328
I guess is good news or bad news
depending on what you're thinking about.

240
00:13:49,328 --> 00:13:52,364
It's bad news for hardness.
3SAT can be solved

241
00:13:52,364 --> 00:13:56,168
in polynomial time if,
almost the same setup,

242
00:13:56,168 --> 00:13:59,638
we have the bipartite graph, plus
we have a cycle through all the vertices,

243
00:13:59,872 --> 00:14:01,974
plus we have a path
through all the clauses.

244
00:14:01,974 --> 00:14:05,978
This is basically what we want
in the Mario Brothers hardness proof.

245
00:14:06,045 --> 00:14:08,380
This is easy,

246
00:14:08,380 --> 00:14:12,384
because your graph has to look like this.

247
00:14:12,384 --> 00:14:16,488
Once you have a cycle
through all the variables

248
00:14:16,555 --> 00:14:19,291
and a path through all the clauses,
that means all the clauses are on

249
00:14:19,291 --> 00:14:24,563
the same side of the cycle, either outside
or inside doesn't really matter.

250
00:14:24,763 --> 00:14:29,368
And that can be solved with dynamic
programing when they're all on the same side.

251
00:14:29,468 --> 00:14:32,404
We really need clauses on both sides.

252
00:14:32,404 --> 00:14:37,676
So how could we possibly fix this?
For the Mario proof,

253
00:14:37,776 --> 00:14:43,482
there's one little thing,
which is that we don't need a cycle here.

254
00:14:43,549 --> 00:14:49,221
We can have
just a path through all the variables.

256
00:14:49,321 --> 00:14:51,323
And so it might seem

257
00:14:51,323 --> 00:14:54,326
like a pretty minor difference,
it's one edge.

258
00:14:54,360 --> 00:14:55,227
Things are a little worse,

259
00:14:55,227 --> 00:14:58,998
we also need an edge from the last
variable to the first clause.

260
00:14:59,064 --> 00:15:02,067
So we're basically taking one edge
out of this and putting it somewhere else.

261
00:15:02,201 --> 00:15:05,204
But it turns out that problem is hard.

262
00:15:05,337 --> 00:15:09,508
So that is linked planar 3SAT.

264
00:15:09,508 --> 00:15:11,310
Let me

265
00:15:11,310 --> 00:15:14,042
define it for you.

266
00:16:17,109 --> 00:16:18,577
All right, so here's the base version.

268
00:16:18,577 --> 00:16:21,146
I'm going to define
a bunch of extended versions as well.

269
00:16:21,146 --> 00:16:24,950
Again, pretty similar setup, 3SAT
remains NP-hard when some graph is planar.

270
00:16:25,150 --> 00:16:29,321
That graph primarily consists
of variable clause bipartite graph, but

271
00:16:29,388 --> 00:16:31,657
we get a cycle

272
00:16:31,724 --> 00:16:33,659
and this one cycle visits all

273
00:16:33,659 --> 00:16:38,097
of the variables in some order
and then all of the clauses in some order.

274
00:16:38,197 --> 00:16:43,602
This is almost exactly, it's even a little
bit more than what we need for Mario.

275
00:16:43,669 --> 00:16:46,672
For Mario, we need to be
we need to pass through the variables,

276
00:16:46,739 --> 00:16:49,742
then an edge from the last variable
to the first clause,

277
00:16:49,842 --> 00:16:51,710
then a path through all the clauses.

278
00:16:51,710 --> 00:16:54,713
And then we don't need
a final closing edge.

279
00:16:54,913 --> 00:16:58,450
But what linked planar 3SAT says is
even with the final closing edge,

280
00:16:58,450 --> 00:17:02,588
so even if you have to finish the game
where you started,

281
00:17:02,654 --> 00:17:06,191
3SAT is hard when
that whole thing is planar.

282
00:17:06,258 --> 00:17:10,496
Which is super cool.

283
00:17:10,596 --> 00:17:12,898
Questions?

284
00:17:12,898 --> 00:17:14,967
All right.

285
00:17:14,967 --> 00:17:19,872
So this is what we really wanted
when we were writing this proof,

286
00:17:19,938 --> 00:17:21,306
almost.

287
00:17:21,306 --> 00:17:24,977
It turns out there a couple of catches in
applying this theorem to this proof,

288
00:17:25,044 --> 00:17:26,678
which I will get to.

289
00:17:26,678 --> 00:17:29,615
But first I'm going to prove this theorem
to you

290
00:17:29,615 --> 00:17:32,551
from reduction from planar 3SAT

291
00:17:32,551 --> 00:17:35,654
and also tell you some other versions

292
00:17:35,654 --> 00:17:37,000
that are hard.

293
00:17:44,000 --> 00:17:47,867
So one additional constraint you can make
is that the formula is monotone,

294
00:17:47,867 --> 00:17:52,638
so every clause is all positive or all
negative, and you can require that

295
00:17:52,638 --> 00:17:57,643
every variable appears
at most three times.

296
00:17:57,709 --> 00:18:00,546
A different constraint you can add

297
00:18:00,546 --> 00:18:03,816
is what I call sidedness.

298
00:18:03,882 --> 00:18:06,085
It's not defined in the paper.

299
00:18:06,085 --> 00:18:09,088
It's this constraint:

300
00:18:09,188 --> 00:18:13,292
Positive/negative edges are on opposite
sides of not the variable cycle,

301
00:18:13,292 --> 00:18:17,996
but of the cycle that visits
all the variables and all the clauses.

302
00:18:18,063 --> 00:18:23,936
So positive/negative edges

303
00:18:24,002 --> 00:18:31,777
are on opposite sides

304
00:18:31,844 --> 00:18:36,648
of the cycle.

305
00:18:36,748 --> 00:18:37,916
Crucially,

306
00:18:37,916 --> 00:18:42,688
this does not imply
monotone in this problem.

307
00:18:42,754 --> 00:18:45,958
I think maybe I have a figure for this.

308
00:18:46,058 --> 00:18:49,895
So we have--

309
00:18:49,962 --> 00:18:54,066
this is a nice--
some nicer examples of regular planar 3SAT

310
00:18:54,333 --> 00:18:58,437
with the variable cycle
and linked planar 3SAT

311
00:18:58,504 --> 00:19:02,941
with the variable and then clauses cycle
so that the dotted thing

312
00:19:02,941 --> 00:19:04,176
is the added cycle.

313
00:19:04,176 --> 00:19:07,179
The whole structure is planar.

314
00:19:07,212 --> 00:19:10,549
Some notation, which is
the legend up there:

315
00:19:10,649 --> 00:19:15,888
the filled circles are clauses,
the empty circles are variables,

316
00:19:15,988 --> 00:19:18,423
the blue arrows are the positive edges.

317
00:19:18,423 --> 00:19:22,361
And in some of the later figures there,
the colors are going to disappear,

318
00:19:22,361 --> 00:19:25,297
so I want to introduce
also this arrow notation.

319
00:19:25,297 --> 00:19:28,233
If the edge points to

320
00:19:28,233 --> 00:19:31,436
the variable, then it's positive.

321
00:19:31,503 --> 00:19:34,206
Sorry:
if it points to the clause, it's positive;

322
00:19:34,206 --> 00:19:37,209
if it points to the variable,
it's negative.

323
00:19:37,242 --> 00:19:40,612
Those are two ways to communicate
the parity on the edges,

324
00:19:40,712 --> 00:19:45,717
and here you see there's no particular
rhyme or reason to the coloring.

325
00:19:45,784 --> 00:19:46,752
But this is mainly to

326
00:19:46,752 --> 00:19:49,056
illustrate what a variable
cycle looks like

327
00:19:49,056 --> 00:19:52,558
versus what a variable-and-then-clauses
cycle looks like.

328
00:19:52,558 --> 00:19:54,993
You can see you can have edges inside,
you can have edges outside.

329
00:19:54,993 --> 00:19:57,996
That's what makes this problem not easy.

330
00:19:58,063 --> 00:20:01,133
You can have in the general form,
you can have positive and negative edges

331
00:20:01,133 --> 00:20:02,501
inside and outside.

332
00:20:02,501 --> 00:20:05,504
Now I'm going to

333
00:20:05,571 --> 00:20:08,240
change the coloring, change the instance

334
00:20:08,240 --> 00:20:11,443
and the clauses

335
00:20:11,510 --> 00:20:13,745
to one where

336
00:20:13,745 --> 00:20:17,916
all the edges-- Over here, all the edges
inside are going to be negative,

337
00:20:17,916 --> 00:20:20,052
all the edges outside are positive.

338
00:20:20,052 --> 00:20:23,055
And then if you look
at the corresponding clauses,

339
00:20:23,188 --> 00:20:25,691
because the inner clauses here
have to be all negative,

340
00:20:25,691 --> 00:20:27,859
and the outer clauses
have to be all positive,

341
00:20:27,859 --> 00:20:32,130
and so you get monotone 3SAT
just from that sidedness constraint.

342
00:20:32,197 --> 00:20:35,534
Whereas over here

343
00:20:35,601 --> 00:20:36,602
it's a little different

344
00:20:36,602 --> 00:20:41,773
because while we have positive edges
inside, negative edges outside,

345
00:20:41,840 --> 00:20:44,577
clauses span both inside and outside.

346
00:20:44,577 --> 00:20:47,145
Am I pointing at the right thing?
Yes, this is the clause.

347
00:20:47,145 --> 00:20:51,783
Here is a positive edge on the inside and
an incident negative edge on the outside.

348
00:20:51,850 --> 00:20:56,388
So this is sided, but it's not monotone.

349
00:20:56,488 --> 00:20:59,391
And with planar 3SAT--
with linked planar 3SAT,

350
00:20:59,391 --> 00:21:02,327
you can either assume monotone

351
00:21:02,327 --> 00:21:07,232
or you can assume sided, but not both.

352
00:21:07,299 --> 00:21:10,969
I wanted to mention one other fun fact
while we're on this topic,

353
00:21:11,069 --> 00:21:15,073
which is

354
00:21:15,173 --> 00:21:16,808
you can assume

355
00:21:16,808 --> 00:21:20,779
each clause

356
00:21:20,879 --> 00:21:24,583
has at most two

357
00:21:24,650 --> 00:21:27,653
incident edges

358
00:21:27,686 --> 00:21:35,627
on each side of the cycle.

359
00:21:35,727 --> 00:21:39,064
We can't assume that they're
all on one side or all on the other.

360
00:21:39,097 --> 00:21:41,433
But in fact,
we can assume that's never the case.

361
00:21:41,433 --> 00:21:51,043
Every clause has,
at least-- at most two edges on each side.

362
00:21:51,143 --> 00:21:52,244
Can't guarantee it has at least

363
00:21:52,244 --> 00:21:55,247
one on each side,
because there are some 2SAT clauses.

364
00:21:55,414 --> 00:21:57,983
But that's what we have.

365
00:21:57,983 --> 00:22:03,455
Some other versions.

366
00:22:03,522 --> 00:22:04,956
E3SAT.

367
00:22:04,956 --> 00:22:08,160
E3SAT is where every

368
00:22:08,226 --> 00:22:12,197
every clause has exactly three literals.

369
00:22:12,297 --> 00:22:14,800
That's

370
00:22:14,800 --> 00:22:17,602
not super useful for video game proofs,

371
00:22:17,602 --> 00:22:27,379
but it's nice to know.

372
00:22:27,479 --> 00:22:30,215
We can also do 1-in-3SAT,
and for 1-in-3SAT

373
00:22:30,215 --> 00:22:35,087
we don't need negations,
just like in the planar case.

374
00:22:35,187 --> 00:22:36,888
And I have here a note

375
00:22:36,888 --> 00:22:41,193
which is, for linked

376
00:22:41,193 --> 00:22:46,832
planar 3SAT, E4SAT,

377
00:22:46,898 --> 00:22:54,539
monotone E3SAT,

378
00:22:54,606 --> 00:23:07,786
and the big one is sided
monotone 3SAT, are all in P.

379
00:23:07,886 --> 00:23:09,554
So these are three different problems.

380
00:23:09,554 --> 00:23:12,557
Each of them can be solved in polynomial
time.

381
00:23:12,557 --> 00:23:15,694
These two, I think because your formula's
basically always satisfiable

382
00:23:15,927 --> 00:23:18,163
and this one because

383
00:23:18,263 --> 00:23:21,266
dynamic programing, I believe.

384
00:23:21,500 --> 00:23:23,001
So these are things we need to avoid.

385
00:23:23,001 --> 00:23:26,004
We really can't assume in particular sided
plus monotone.

386
00:23:26,004 --> 00:23:28,173
I'm stressing this
because we'd really like it for the

387
00:23:28,173 --> 00:23:30,242
Mario proof, but
problem's not hard without it

388
00:23:30,242 --> 00:23:33,512
so-- problem's not hard with
those constraints.

389
00:23:33,578 --> 00:23:39,151
So we're going to throw away
monotonicity and keep sidedness.

390
00:23:39,217 --> 00:23:41,486
But before I go back to Mario,

391
00:23:41,486 --> 00:23:45,357
I want to prove
or show you the proofs of this

392
00:23:45,357 --> 00:23:48,727
main claim and a bunch of these

393
00:23:48,794 --> 00:23:51,463
in varying amounts of detail.

394
00:23:51,463 --> 00:23:55,233
So let's start with the big idea.

395
00:23:55,300 --> 00:24:00,672
This is Pilz's cool idea that we

396
00:24:00,739 --> 00:24:02,574
we're going to take our cycle

397
00:24:02,574 --> 00:24:04,209
and we, you know, normally
we think of a cycle

398
00:24:04,209 --> 00:24:06,845
as like a horizontal line or something
that's really hard to work with.

399
00:24:06,845 --> 00:24:08,213
It's hard to connect everything.

400
00:24:08,213 --> 00:24:09,614
Instead, we're going to take our cycle

401
00:24:09,614 --> 00:24:15,520
and wrap it around itself
like a jelly donut or a spiral

402
00:24:15,587 --> 00:24:16,455
so that we get

403
00:24:16,455 --> 00:24:19,458
lots of stuff next to each other.

404
00:24:19,658 --> 00:24:23,228
And we're going to break the cycle here
conceptually between

405
00:24:23,295 --> 00:24:25,864
where the clauses are
and where the variables are.

406
00:24:25,864 --> 00:24:27,999
I think here and here.

407
00:24:27,999 --> 00:24:31,636
And you can look, like, let's follow
the dashed lines of the variables.

408
00:24:31,636 --> 00:24:36,274
They go around and around
and around and around and they end here.

409
00:24:36,508 --> 00:24:39,945
Then we switch to clauses and we visit
all the clauses in order in the opposite,

410
00:24:39,945 --> 00:24:42,881
like counterclockwise. One was
clockwise, the other was counterclockwise.

411
00:24:42,881 --> 00:24:43,949
And then we come back around.

412
00:24:43,949 --> 00:24:46,885
But still a planar cycle, right?

413
00:24:46,885 --> 00:24:49,888
And this is cool
because it puts variables and clauses

414
00:24:50,021 --> 00:24:53,024
next to each other in like a grid.

415
00:24:53,124 --> 00:24:54,759
So we're going to work with this
shaded grid,

416
00:24:54,759 --> 00:24:56,127
we're going to ignore all the other stuff.

417
00:24:56,127 --> 00:24:57,829
These are just going to
be wraparound edges.

418
00:24:57,829 --> 00:25:01,366
All the action, all the other edges
are going to be in this shaded area.

419
00:25:01,366 --> 00:25:04,302
So we can just think of there
being vertical lines

420
00:25:04,302 --> 00:25:06,872
that alternate
between variables and clauses.

421
00:25:06,872 --> 00:25:10,475
So this is our scaffold. Now

422
00:25:10,542 --> 00:25:13,645
we're going to reduce from planar
monotone [rectilinear] 3SAT.

423
00:25:13,745 --> 00:25:17,949
Probably overkill, but it gives some
of the more general results.

424
00:25:18,016 --> 00:25:22,521
And in that planar setup
you're going to have some edge

425
00:25:22,521 --> 00:25:26,024
which doesn't cross other edges
from the instance,

426
00:25:26,091 --> 00:25:30,061
the SAT instance, but it is going to cross
some of these vertical lines.

427
00:25:30,128 --> 00:25:33,765
And so we're going to make that planar
by subdividing

428
00:25:33,765 --> 00:25:38,136
this edge into some pattern
like this in a very simple way.

429
00:25:38,136 --> 00:25:41,940
So we wanted this variable x
to communicate with this clause c.

430
00:25:42,007 --> 00:25:44,910
And what we're going to do
is copy x to here,

431
00:25:44,910 --> 00:25:48,847
and copy x to here,
and now they're adjacent and we're happy.

432
00:25:48,914 --> 00:25:51,917
So if we're in the end goal,
this is a copy of x

433
00:25:52,050 --> 00:25:56,121
and then if you wanted that arrow
towards the vertex,

434
00:25:56,121 --> 00:26:02,761
which means towards the variable,
which means negative, I guess,

435
00:26:02,827 --> 00:26:04,529
then you put it here,

436
00:26:04,529 --> 00:26:07,999
and that will simulate
putting it to the actual x.

437
00:26:08,099 --> 00:26:09,467
So how does this duplicator work?

438
00:26:09,467 --> 00:26:13,939
We're going to see a couple of them,
but this is a simple implication chain.

439
00:26:14,039 --> 00:26:18,710
So if you say, okay, what is--
Let's just expand out, what is c_x?

440
00:26:18,810 --> 00:26:23,982
It has x in its positive form
and x' in its negative form.

441
00:26:23,982 --> 00:26:27,552
So it's 2SAT clause,
it's x or not x',

442
00:26:27,652 --> 00:26:31,423
which we can rewrite as x' implies x.

443
00:26:31,489 --> 00:26:36,094
And c'_x here is the opposite,

444
00:26:36,161 --> 00:26:40,432
so it's x' in its positive form
and x in its negative form,

445
00:26:40,532 --> 00:26:42,867
which you can rewrite
as x implies x'.

446
00:26:42,867 --> 00:26:45,236
So x implies x', x' implies x.

447
00:26:45,236 --> 00:26:46,100
This is the same--

448
00:26:46,100 --> 00:26:50,508
together this is saying x if and
only if x', or they're equal.

449
00:26:50,609 --> 00:26:52,110
So we've successfully copied to here.

450
00:26:52,110 --> 00:26:54,879
We just apply that same gadget here,
and great!

451
00:26:54,879 --> 00:26:58,516
And notice we're just putting clauses on
clause lines, variables on variable lines.

452
00:26:58,617 --> 00:27:03,288
And this whole gadget basically lives
in a thickened version of this edge.

453
00:27:03,521 --> 00:27:05,857
And so if the original structure is
planar,

454
00:27:05,857 --> 00:27:07,492
we're not going to add any crossings here,

455
00:27:07,492 --> 00:27:10,762
we're just resolving crossings
with the vertical lines,

456
00:27:10,862 --> 00:27:14,065
assuming the original drawing
has no vertical lines and stuff like that.

457
00:27:14,132 --> 00:27:16,935
All right. So that's the main gadget.

458
00:27:16,935 --> 00:27:19,938
Now let's put that together
in an actual example.

459
00:27:19,938 --> 00:27:21,539
So here we have planar monotone 3SAT.

460
00:27:21,539 --> 00:27:24,175
We have all the variables
on a horizontal line.

461
00:27:24,175 --> 00:27:25,978
We have some--

462
00:27:25,978 --> 00:27:30,782
Oh, I guess we're not assuming
monotone here, but we could have.

463
00:27:30,849 --> 00:27:34,986
We have some clauses above,
some clauses below,

464
00:27:35,053 --> 00:27:38,923
and then we just plug
that gadget in a whole bunch.

465
00:27:38,990 --> 00:27:42,761
So the main thing that's happening is,
because a variable was occupying

466
00:27:42,761 --> 00:27:47,565
an interval of the x axis here, we're just
making-- let's say this is the variable,

467
00:27:47,565 --> 00:27:51,736
we're making many copies of it
through that horizontal bar,

468
00:27:51,836 --> 00:27:55,173
and then we're also copying it
to where it's needed in a clause.

469
00:27:55,173 --> 00:28:00,845
So here, for example, is the top clause,
which is the OR of this variable,

470
00:28:00,912 --> 00:28:02,847
this variable, and this variable.

471
00:28:02,847 --> 00:28:06,518
And if you say look at v_1,
it's kind of stretched here

472
00:28:06,518 --> 00:28:10,088
but this thing here
is exactly the copy gadget.

473
00:28:10,088 --> 00:28:14,125
So this gets copied
here, gets copied here, to here, to here,

474
00:28:14,192 --> 00:28:15,927
up to here.

475
00:28:15,927 --> 00:28:22,033
And then this is the actual clause that
brings together three variables in whatever

476
00:28:22,133 --> 00:28:24,502
signs you were supposed to have

477
00:28:24,502 --> 00:28:28,173
according to the input instance.

478
00:28:28,239 --> 00:28:32,010
So it's an ugly drawing, but it's planar.

479
00:28:32,077 --> 00:28:36,748
It resolved all the crossings
with the vertical lines. All's good.

480
00:28:36,815 --> 00:28:39,084
Okay, so that's linked planar 3SAT.

481
00:28:39,084 --> 00:28:42,020
It's hard.

482
00:28:42,020 --> 00:28:45,824
I think there are
some variables that are getting

483
00:28:45,824 --> 00:28:49,494
used four times here,
so we don't have 3SAT-3 yet.

484
00:28:49,594 --> 00:28:52,897
It's not sided, it's not monotone, but

485
00:28:52,964 --> 00:28:56,835
it's a good start.

486
00:28:56,935 --> 00:29:00,371
So let me show you
some of the other versions.

487
00:29:00,438 --> 00:29:04,876
Here is the version where every clause
is monotone, all positive or all negative.

488
00:29:04,876 --> 00:29:06,811
This is-- In this notation

489
00:29:06,811 --> 00:29:09,314
that means that for every clause,
all the edges are incoming or

490
00:29:09,314 --> 00:29:10,782
all the edges are outgoing.

491
00:29:10,782 --> 00:29:14,185
This previous gadget here
did not satisfy that.

492
00:29:14,185 --> 00:29:18,056
With the added clauses
we had one incoming and one outgoing.

493
00:29:18,156 --> 00:29:20,725
So we're going to

494
00:29:20,825 --> 00:29:25,029
change the copy gadget into
a different one that also works.

496
00:29:25,096 --> 00:29:26,498
So I guess we're illustrating it here.

497
00:29:26,498 --> 00:29:29,334
So here's x, we're not going to make a
copy, that's tricky.

498
00:29:29,334 --> 00:29:31,369
We're going to negate the variable.

499
00:29:31,369 --> 00:29:36,508
So x-bar will be the negation of x.

500
00:29:36,608 --> 00:29:38,209
So x-bar is just a label,

501
00:29:38,209 --> 00:29:42,147
whereas this symbol (¬) means
boolean negation.

502
00:29:42,247 --> 00:29:44,349
So we have two clauses here,

503
00:29:44,349 --> 00:29:47,252
one is all positive, one is all negative.

504
00:29:47,252 --> 00:29:49,788
So this one is all positive.

505
00:29:49,788 --> 00:29:51,689
It's hard to get the parity right here.

506
00:29:51,689 --> 00:29:55,059
So it says x or x-bar,
which we can rewrite as say

507
00:29:55,059 --> 00:29:59,197
not x implies x-bar. And the other one
is the same, but with negation,

508
00:29:59,197 --> 00:30:01,566
so we have not x or not x-bar.

509
00:30:01,566 --> 00:30:05,003
This is, we can rewrite as
x implies not x-bar.

510
00:30:05,003 --> 00:30:08,106
So on the other hand,
if x is true, x-bar must be false,

511
00:30:08,306 --> 00:30:10,575
if x is false, x-bar must be true.

512
00:30:10,575 --> 00:30:14,679
So this guarantees that x and x-bar
are not equal.

513
00:30:14,746 --> 00:30:18,716
And so we do exactly the same proof,
but scaled up

514
00:30:18,716 --> 00:30:22,086
by a factor of two horizontally,
because now we're going to alternate,

515
00:30:22,120 --> 00:30:24,923
you see, there's two different types
of vertical dashed lines:

516
00:30:24,923 --> 00:30:27,392
there's the positive ones
and the negative ones.

517
00:30:27,392 --> 00:30:29,127
We want to make sure we never want

518
00:30:29,127 --> 00:30:32,831
to use these negated variables
because we didn't need them.

519
00:30:32,897 --> 00:30:36,534
But if we do it twice,
this is an actual copy of x.

520
00:30:36,634 --> 00:30:41,239
And so as long as we only use
the variables from the thick dashed lines,

521
00:30:41,339 --> 00:30:44,976
we have essentially
the same old proof as before.

522
00:30:45,043 --> 00:30:48,513
But now these added clauses are monotone,

523
00:30:48,546 --> 00:30:50,315
they're all in or all out.

524
00:30:50,315 --> 00:30:54,551
And as long as we're reducing now
from monotone planar 3SAT,

525
00:30:54,651 --> 00:30:58,455
then these clauses will also be monotone

526
00:30:58,522 --> 00:30:59,657
and so whole thing is monotone.

527
00:30:59,657 --> 00:31:01,226
Great.

528
00:31:01,226 --> 00:31:03,094
Okay.

529
00:31:03,094 --> 00:31:06,231
This, this gad-- clause--

530
00:31:06,397 --> 00:31:09,901
Sorry. This picture here uses a variable
four times.

531
00:31:09,968 --> 00:31:13,905
If you mess around with this gadget
some more, split it up into more pieces,

532
00:31:13,905 --> 00:31:16,608
make these two 4-cycles bigger,

533
00:31:16,608 --> 00:31:19,177
you can get it down
to at most three occurrences.

534
00:31:19,177 --> 00:31:24,148
But I don't think it's super exciting,
so I won't talk about it here

535
00:31:24,249 --> 00:31:25,583
anymore.

536
00:31:25,583 --> 00:31:28,586
All right, let's do sided.

537
00:31:28,786 --> 00:31:33,758
This is going to use-- this is maybe
at a high level, but it's a similar idea.

538
00:31:33,758 --> 00:31:36,895
So we have our

539
00:31:36,895 --> 00:31:39,997
clauses here, which--

540
00:31:40,364 --> 00:31:42,901
So we have our c_x and c_x' from before.

541
00:31:42,901 --> 00:31:46,871
This one is all positive
and this one is all negative.

542
00:31:46,971 --> 00:31:49,941
But instead of them being attached
to the same two variables,

543
00:31:49,941 --> 00:31:52,176
we're stretching them out
with an implication chain.

544
00:31:52,176 --> 00:31:56,180
So this, this clause
just says this variable implies this one,

545
00:31:56,247 --> 00:32:01,019
this one says this one implies that one,
and that turns out to do the same thing.

546
00:32:01,019 --> 00:32:04,155
So all these top variables
will be positive copies

547
00:32:04,155 --> 00:32:07,392
of x and the bottom variables--
They'll be equal to each other,

548
00:32:07,492 --> 00:32:10,762
and all the ones down here
will be negated versions of that.

549
00:32:10,828 --> 00:32:12,997
So using the same

550
00:32:12,997 --> 00:32:15,600
4-cycle as before,
but stretching it out more,

551
00:32:15,600 --> 00:32:18,970
we get a bunch of positive copies

552
00:32:18,970 --> 00:32:22,173
on the top and then you just connect them.

553
00:32:22,240 --> 00:32:25,677
You use that duplicator
to connect things to a clause.

554
00:32:25,677 --> 00:32:29,280
Here's an actual clause
that has some stuff incoming and outgoing.

555
00:32:29,347 --> 00:32:32,784
If this was a monotone
3SAT instance initially,

556
00:32:32,850 --> 00:32:36,387
then these arrows will be incoming on
on the left side

557
00:32:36,387 --> 00:32:38,222
and outgoing on the right side

558
00:32:38,222 --> 00:32:40,625
because all the positive edges
are on one side and negative edges

559
00:32:40,625 --> 00:32:41,559
on the other side.

560
00:32:41,559 --> 00:32:46,230
And this splitter has the property
that all the edges go to the right.

561
00:32:46,297 --> 00:32:49,767
And so it also has the feature
that it alternates

562
00:32:49,767 --> 00:32:54,138
between, uh, positive and negative edges,
because if you go

563
00:32:54,138 --> 00:32:56,074
to a white circle, that's negative;

564
00:32:56,074 --> 00:32:58,309
if you go to a black circle,
that's positive.

565
00:32:58,309 --> 00:33:00,445
And so they alternate.

566
00:33:00,511 --> 00:33:01,512
Maybe

567
00:33:01,512 --> 00:33:04,148
you have to remember from the spiral,
this is inside-- 

568
00:33:04,148 --> 00:33:06,117
this is inside the cycle, outside, inside,

569
00:33:06,117 --> 00:33:07,485
outside, inside, outside.

570
00:33:07,485 --> 00:33:09,620
The columns alternate.

571
00:33:09,620 --> 00:33:13,725
So that gives you sidedness.

572
00:33:13,791 --> 00:33:15,860
Messy diagrams.

573
00:33:15,860 --> 00:33:20,431
Even messier is if you want exactly
three variables per clause.

574
00:33:20,498 --> 00:33:23,368
I don't claim to have
fully grokked this one.

575
00:33:23,368 --> 00:33:28,072
But with some complicated gadget,
you can make it work.

576
00:33:28,172 --> 00:33:32,075
So that is why linked planar 3SAT is hard,

577
00:33:32,175 --> 00:33:35,013
and why most of these variants are hard.

578
00:33:35,113 --> 00:33:39,117
Now we're going to go back to Mario
and try to apply--

579
00:33:39,183 --> 00:33:41,300
try to come up with a reduction from

580
00:33:41,300 --> 00:33:47,725
sided planar-- linked planar 3SAT
to Super Mario Brothers.

581
00:33:47,825 --> 00:33:53,965
So we have two parts:
variable gadgets and clause gadgets.

582
00:33:54,232 --> 00:33:57,635
Hopefully we don't have any
crossover gadgets anymore.

583
00:33:57,702 --> 00:34:01,973
So the variable gadgets turn out to be
easy using our existing gadgets.

585
00:34:01,973 --> 00:34:03,975
So let's focus in on a variable.

586
00:34:03,975 --> 00:34:09,814
So we're reducing from this sided
linked planar 3SAT.

587
00:34:09,881 --> 00:34:12,717
We're zooming in on a variable.
We can implement a variable,

588
00:34:12,717 --> 00:34:14,285
it just needs to choose--

589
00:34:14,285 --> 00:34:15,987
So there's this path

590
00:34:15,987 --> 00:34:18,790
that Mario is going to follow,
visiting the variables in order,

591
00:34:18,790 --> 00:34:21,793
and so it comes in from the
previous variable on the path,

592
00:34:21,859 --> 00:34:24,328
and then Mario is going to do
a similar long fall thing,

593
00:34:24,328 --> 00:34:30,735
it can-- he can choose false or true, then
visit all the corresponding clauses,

595
00:34:30,835 --> 00:34:35,807
and then recombine
and go to the next variable.

596
00:34:35,873 --> 00:34:37,608
So this is also

597
00:34:37,608 --> 00:34:41,179
we use long falls to make this happen,

598
00:34:41,245 --> 00:34:42,800
like in the original variable gadget,

599
00:34:42,800 --> 00:34:46,350
it's just sort of a little shifted
from how we drew it before.

600
00:34:46,417 --> 00:34:48,453
We do want to make sure
that Mario can't come in here

601
00:34:48,453 --> 00:34:50,955
and then go and visit
the true side as well,

602
00:34:50,955 --> 00:34:54,125
but that's easy to do with long falls.

603
00:34:54,192 --> 00:34:55,426
This is good.

604
00:34:55,426 --> 00:35:00,731
But here I want to point out
we're using sidedness because

605
00:35:00,832 --> 00:35:02,767
we want all the connections--

606
00:35:02,767 --> 00:35:04,335
So there's the path here,

607
00:35:04,335 --> 00:35:06,404
we want all the false connections
to be on one side

608
00:35:06,404 --> 00:35:08,339
and all the true connections
to be on the other side.

609
00:35:08,339 --> 00:35:11,342
It's not enough to just be planar.
If there were false--

610
00:35:11,576 --> 00:35:13,878
if there was a false connection here
and then a true connection,

611
00:35:13,878 --> 00:35:16,747
and then a false connection
all on the same side,

612
00:35:16,747 --> 00:35:20,551
that would be super bad for planarity
because you have to go from here...

613
00:35:20,551 --> 00:35:22,687
If you chose false,
you have to go to the false connection,

614
00:35:22,687 --> 00:35:24,155
come back, somehow avoid

615
00:35:24,155 --> 00:35:27,158
crossing the true connection,
and then go to the next false connection.

616
00:35:27,225 --> 00:35:30,795
So-- But if we're sided, we know
they're all on one side or the other,

617
00:35:30,962 --> 00:35:34,332
and so we can wire this thing up in this
nice planar way.

618
00:35:34,432 --> 00:35:38,069
Okay, so we really need sidedness
for variables to work.

619
00:35:38,136 --> 00:35:41,539
Unfortunately,
clauses want some other property, so--

620
00:35:41,606 --> 00:35:43,841
Well, it's not so bad.

621
00:35:43,841 --> 00:35:48,980
So for each clause up here,
what we want is when we're visiting

622
00:35:48,980 --> 00:35:53,584
the clause path, the solid lines,
we're checking all the clauses.

623
00:35:53,684 --> 00:35:56,521
So there's one check line
through the middle of the gadget here

624
00:35:56,521 --> 00:35:57,955
that's going to be traversable

625
00:35:57,955 --> 00:36:01,726
if there's a star for Mario
to get through the fire bars.

626
00:36:01,792 --> 00:36:03,728
And we need three

627
00:36:03,728 --> 00:36:07,265
different ways to unlock this gadget.

628
00:36:07,365 --> 00:36:08,799
And as I said before,

629
00:36:08,799 --> 00:36:12,603
we can't assume that all three of these
are on one side of the red line,

630
00:36:12,703 --> 00:36:14,405
there's going to have to be
some on each side.

631
00:36:14,405 --> 00:36:20,144
We can assume that there's
at most two connections on each side.

632
00:36:20,244 --> 00:36:26,017
So that's where I'm going to use this
maybe, it's a little nicer.

634
00:36:26,117 --> 00:36:29,420
But there's here, for example,
two on the left, one on the right,

635
00:36:29,487 --> 00:36:31,556
we can't avoid that.

636
00:36:31,556 --> 00:36:35,159
This is annoying because
if you look at our Mario proof,

637
00:36:35,226 --> 00:36:39,463
it kind of needed-- really wanted Mario
to be all on one side of the line.

638
00:36:39,664 --> 00:36:42,433
The check line is basically this
horizontal line here

639
00:36:42,433 --> 00:36:47,705
that's really coming from here
and going through all this stuff.

640
00:36:47,772 --> 00:36:49,874
That's the check line
through the middle of the gadget.

641
00:36:49,874 --> 00:36:54,679
And here we have Mario coming
and initiating stars from one side.

642
00:36:54,745 --> 00:36:59,550
So we can't do this with the construction
we have so far.

643
00:36:59,617 --> 00:37:01,385
One way to make this work

644
00:37:01,385 --> 00:37:03,120
is to just build a

645
00:37:03,120 --> 00:37:05,456
slightly more complicated gadget
where you also have

646
00:37:05,456 --> 00:37:07,291
some stars that launch from the top.

647
00:37:07,291 --> 00:37:09,360
And if you arrange this geometry right,

648
00:37:09,360 --> 00:37:13,030
these stars will hop down into this
nice area.

649
00:37:13,130 --> 00:37:14,899
This is probably not--

650
00:37:14,899 --> 00:37:18,236
it's not too bad to make this work,
but it's kind of annoying and tedious.

651
00:37:18,236 --> 00:37:23,040
So I'd like to avoid making the Mario
clause gadget any more complicated.

652
00:37:23,274 --> 00:37:26,544
This would work,
but it turns out there's an easier way,

653
00:37:26,611 --> 00:37:32,650
just using linked planar 3SAT
and this gadget,

654
00:37:32,750 --> 00:37:34,218
which is--

655
00:37:34,218 --> 00:37:37,221
We're going to take this idea
from the variable gadget --

656
00:37:37,221 --> 00:37:41,425
which is to split Mario into two halves
according to a binary choice,

657
00:37:41,492 --> 00:37:46,564
and merge those paths back together
-- also in the clause.

658
00:37:46,631 --> 00:37:49,166
I'm going to take this
clause and modify it.

659
00:37:49,166 --> 00:37:50,534
Boom.

660
00:37:50,534 --> 00:37:52,270
So we're going to split it.

661
00:37:52,270 --> 00:37:53,604
We're going to have a choice at the top,

662
00:37:53,604 --> 00:37:56,607
Mario can choose to go left or right
when verifying this clause.

663
00:37:56,641 --> 00:37:59,610
The idea is this clause
is true-- is satisfied

664
00:37:59,610 --> 00:38:03,948
if either the left side satisfies it
or the right side satisfies it.

665
00:38:04,015 --> 00:38:08,819
So we just need one
out of the three variables to satisfy it.

666
00:38:08,886 --> 00:38:11,889
So let's just do this choice,

667
00:38:11,922 --> 00:38:16,127
merge back together at the end, and Mario
will be able to get from here to here

668
00:38:16,127 --> 00:38:18,329
if and only if either the left side
or the right side is satisfied.

669
00:38:18,329 --> 00:38:22,099
The left side satisfied if this or this

670
00:38:22,166 --> 00:38:25,136
star gets onto this gadget.

671
00:38:25,136 --> 00:38:28,039
So the idea is this gadget here

672
00:38:28,039 --> 00:38:31,442
is the regular Mario clause gadget.

673
00:38:31,642 --> 00:38:35,012
All of the enablers are from one side.

674
00:38:35,079 --> 00:38:36,914
So all of the question
blocks would be here,

675
00:38:36,914 --> 00:38:38,783
so you tilt your head this way,

676
00:38:38,783 --> 00:38:40,284
so this way is up.

677
00:38:40,284 --> 00:38:43,621
And this gadget, you tilt your head
so this way is up,

678
00:38:43,688 --> 00:38:49,493
and all of the question blocks
that make stars come from one side.

680
00:38:49,493 --> 00:38:51,495
So a very simple little fix.

681
00:38:51,495 --> 00:38:54,899
We already needed these choice
and merge gadgets for the variable,

682
00:38:54,965 --> 00:38:57,902
we can re-use them for the clause.

683
00:38:57,902 --> 00:39:02,707
And now sidedness is enough to give us
what we want.

684
00:39:02,807 --> 00:39:04,975
Sidedness plus monotonicity
also would have been enough,

685
00:39:04,975 --> 00:39:08,612
but that's not hard,
so we can't do that.

687
00:39:08,612 --> 00:39:09,146
Cool.

688
00:39:09,146 --> 00:39:17,121
I think now I want to show you a different
way to think about the same thing.

689
00:39:17,221 --> 00:39:20,091
Let's check, yeah.

690
00:39:20,091 --> 00:39:25,730
Which is a slightly stronger
form of linked planar 3SAT.

692
00:39:25,830 --> 00:39:28,500
That's a little-- It's
going to use the same--

693
00:39:28,500 --> 00:39:32,937
It's going to build this same idea,
but do it in a completely 3SAT context

694
00:39:32,937 --> 00:39:36,273
instead of talking about
choices and merges,

695
00:39:36,273 --> 00:39:39,610
that's a little bit Mario specific
(or platform game specific),

696
00:39:39,677 --> 00:39:42,680
and it's just going to say
something about formulas.

697
00:39:42,913 --> 00:39:48,252
So this is a new result,

698
00:39:48,319 --> 00:39:49,653
and a new name,

699
00:39:49,653 --> 00:39:51,000
which I made up.

700
00:40:17,681 --> 00:40:19,150
So I've said n times

701
00:40:19,150 --> 00:40:23,621
that sided linked
monotone 3SAT is not hard.

702
00:40:23,721 --> 00:40:28,292
But if you add “inter” to this thing

703
00:40:28,292 --> 00:40:31,862
-- interlinked planar
monotone 3SAT, sided, is hard.

704
00:40:31,929 --> 00:40:35,699
So I just need to define what that is.

705
00:40:35,766 --> 00:40:38,469
So we're going to take monotone

706
00:40:38,469 --> 00:40:45,643
3SAT -- also works with 3SAT-3 --

707
00:40:45,743 --> 00:40:48,500
and it's going to be NP-hard

708
00:40:59,800 --> 00:41:03,761
Seems like I'm repeating a lot,
and I am, but the

709
00:41:03,828 --> 00:41:05,663
cycle
is going to be a little bit different.

710
00:41:05,663 --> 00:41:09,867
(And it would help
if I put the words in the right order.)

711
00:41:09,934 --> 00:41:26,484
Variable-clause bipartite graph, as usual.

714
00:41:26,550 --> 00:41:29,759
And now we're going to add a cycle

715
00:41:35,826 --> 00:41:44,802
that visits all variables and clauses.

717
00:41:44,869 --> 00:41:45,302
Okay.

718
00:41:45,302 --> 00:41:47,071
But before we said

719
00:41:47,071 --> 00:41:50,574
there was a cycle, that visits all
variables and _then_ visits all clauses.

720
00:41:50,641 --> 00:41:53,911
Now I'm just going to say there's a cycle
that visits all the variables

721
00:41:53,911 --> 00:41:57,715
and clauses, but intermixed,

722
00:41:57,781 --> 00:41:58,849
but not in any order,

723
00:41:58,849 --> 00:42:00,000
in a nice order.

724
00:42:04,188 --> 00:42:11,262
Each clause is after

726
00:42:11,362 --> 00:42:13,000
it's three variables.

727
00:42:18,769 --> 00:42:22,039
So this is what we want for Mario, right?

728
00:42:22,139 --> 00:42:25,042
We don't actually care
that all the variables are set before

729
00:42:25,042 --> 00:42:26,610
all the clauses are checked.

730
00:42:26,610 --> 00:42:30,648
We just need that whenever we're checking
a clause, we should be able to check it,

731
00:42:30,648 --> 00:42:33,150
meaning all the variables--
all its variables

732
00:42:33,150 --> 00:42:35,686
better have been assigned already.

733
00:42:35,786 --> 00:42:40,991
So in this proof we'd be totally fine with

735
00:42:41,058 --> 00:42:43,928
mixing the dashed
and the solid lines a little bit,

736
00:42:43,928 --> 00:42:47,064
as long as whatever we're verifying here,
these variables

737
00:42:47,064 --> 00:42:50,434
have already been set,
so we will be able to pass through

738
00:42:50,434 --> 00:42:52,136
if at least one of them has been set, then

739
00:42:52,136 --> 00:42:56,407
one of the literals has been set to true.

740
00:42:56,473 --> 00:42:59,176
I should say, finish my sentence.

741
00:42:59,176 --> 00:43:04,515
The bipartite graph
plus the cycle is planar.

742
00:43:04,615 --> 00:43:06,951
Okay.

743
00:43:06,951 --> 00:43:10,287
Even sided.

744
00:43:10,354 --> 00:43:15,025
So this problem remains hard even with
the sided constraint, which is this one.

745
00:43:15,192 --> 00:43:20,731
The positive and negative edges
are on opposite sides of now this cycle.

746
00:43:20,798 --> 00:43:23,100
Okay, so this is the best of both worlds,

747
00:43:23,100 --> 00:43:27,571
where we have monotonicity,
we have sidedness,

748
00:43:27,738 --> 00:43:30,741
just our cycle got a little weaker,

749
00:43:30,841 --> 00:43:36,146
but at least for this application
it's strong enough.

750
00:43:36,213 --> 00:43:39,717
And I have a picture of how to prove it.

751
00:43:39,717 --> 00:43:44,288
It's actually really the same proof that
we just saw, but done in a formula context.

752
00:43:44,355 --> 00:43:49,093
So this is a slightly bigger picture
just to show how it will work in general.

753
00:43:49,193 --> 00:43:50,427
This is a 4SAT clause.

754
00:43:50,427 --> 00:43:58,469
It has two positive versions above, two
negative versions below, let's say.

756
00:43:58,469 --> 00:44:00,337
And because this is--

757
00:44:00,337 --> 00:44:05,909
we're reducing from sided
linked planar 3SAT, not monotone.

758
00:44:05,909 --> 00:44:09,480
So this clause is not monotone,
but it is sided:

759
00:44:09,480 --> 00:44:13,183
all the positive edges are on one side,
all the negative edges are on the other.

760
00:44:13,283 --> 00:44:15,686
And what we're going to do
is add a new variable here

761
00:44:15,686 --> 00:44:20,290
that's going to represent is this clause
satisfied from above or below?

762
00:44:20,357 --> 00:44:21,992
Could be satisfied by both,

763
00:44:21,992 --> 00:44:24,662
then this variable
will have multiple choices.

764
00:44:24,662 --> 00:44:27,264
But when it's... let's see...

765
00:44:27,264 --> 00:44:30,567
So the-- it's, I think, easier
to think-- look in the clauses here.

766
00:44:30,634 --> 00:44:35,172
But the first thing is to observe
in this picture that now--

767
00:44:35,272 --> 00:44:37,474
It's still sided:
all the positive edges are above this

768
00:44:37,474 --> 00:44:40,344
horizontal line,
all the negative are below.

769
00:44:40,411 --> 00:44:43,414
But in addition,

770
00:44:43,580 --> 00:44:48,652
this clause, all the arrows are out,
this clause, all the arrows are in,

772
00:44:48,652 --> 00:44:51,655
because we split this guy
into two clauses.

773
00:44:51,655 --> 00:44:54,458
And now if we look at the formula view,
I think it's a little easier.

774
00:44:54,458 --> 00:45:00,764
We have a or b or x on the top and we have

775
00:45:00,864 --> 00:45:04,802
not x or not c or not d on the bottom.

776
00:45:04,935 --> 00:45:08,872
So the idea is if x is true,
this get satisfied for free,

777
00:45:08,972 --> 00:45:10,674
but this doesn't get any benefit,

778
00:45:10,674 --> 00:45:15,446
and so one of these two better be true,
which would have satisfied this clause.

779
00:45:15,512 --> 00:45:18,515
If x is false,
this get satisfied for free,

780
00:45:18,515 --> 00:45:21,500
but this gets eliminated,
and so we get a or b.

781
00:45:21,500 --> 00:45:27,600
So either a or b or not c or not d
must be set true for this to be true,

00:45:27,600 --> 00:45:29,259
just like over here.

782
00:45:29,359 --> 00:45:34,698
Okay, so we've got a reduction from sided
linked to sided interlinked monotone.

783
00:45:34,798 --> 00:45:36,066
Really using the same idea,

784
00:45:36,066 --> 00:45:40,170
but instead of doing the choice
and merge at the--

785
00:45:40,237 --> 00:45:44,108
in the Mario context,
we're doing it at the formula level.

786
00:45:44,174 --> 00:45:47,945
But the other thing to notice is,
so all these variables

787
00:45:47,945 --> 00:45:51,181
will be set early
bef-- from-- In this reduction,

788
00:45:51,181 --> 00:45:54,184
all of these will get visited
before all the clauses.

789
00:45:54,218 --> 00:45:55,953
We're adding this variable,

790
00:45:55,953 --> 00:45:59,423
but assuming this arrow goes to the right,
this variable gets set

791
00:45:59,423 --> 00:46:02,793
before the clauses that need it check it.

792
00:46:02,860 --> 00:46:07,798
If the arrow went to the left,
you reflect this diagram.

793
00:46:07,865 --> 00:46:10,634
Cool.

794
00:46:10,634 --> 00:46:12,669
So that's two ways

795
00:46:12,669 --> 00:46:20,377
to use sided linked planar
3SAT in a nice way,

797
00:46:20,444 --> 00:46:26,316
and I want to give you a third way
to look at this proof,

798
00:46:26,383 --> 00:46:29,153
which is going to try to abstract--

799
00:46:29,153 --> 00:46:31,900
So for this construction to work,

801
00:46:31,900 --> 00:46:35,692
we needed three different gadgets.

802
00:46:35,759 --> 00:46:38,762
We needed a choice for Mario,
we needed a merge for Mario,

803
00:46:38,929 --> 00:46:43,233
and we needed this unlock structure

804
00:46:43,333 --> 00:46:47,271
where there are two different ways
to unlock the same path.

805
00:46:47,337 --> 00:46:50,207
I'd like to formalize that and simplify it

806
00:46:50,207 --> 00:46:53,210
a little bit into something called

807
00:46:53,410 --> 00:46:55,500
the Opening Doors Framework.

808
00:47:10,127 --> 00:47:12,095
So let me write a theorem first,

809
00:47:12,095 --> 00:47:16,300
then we'll see it applied to

810
00:47:16,366 --> 00:47:18,000
the Mario setup.

811
00:47:32,883 --> 00:47:34,484
So I'm going to use this term

812
00:47:34,484 --> 00:47:39,656
and not define it precisely.

813
00:47:39,756 --> 00:47:42,759
It will be defined
precisely in a few weeks

814
00:47:42,893 --> 00:47:45,896
when we talk about a general gadget
framework, but I'm going to

815
00:47:46,063 --> 00:47:49,066
just refer to it informally
as planar motion planning.

816
00:47:49,333 --> 00:47:52,035
This is going to be a problem
where I have a bunch of gadgets

817
00:47:52,035 --> 00:47:55,372
and I have a player,
an agent that is running around

818
00:47:55,372 --> 00:48:00,143
a network of those gadgets,
and that network is a planar graph,

819
00:48:00,210 --> 00:48:03,447
just like essentially
these kinds of drawings,

820
00:48:03,547 --> 00:48:06,550
and each of these dots
is going to be a little gadget.

821
00:48:06,650 --> 00:48:10,220
And now I'm going to tell you
what those gadgets can do.

822
00:48:10,287 --> 00:48:14,925
So one thing you're allowed to do

823
00:48:14,992 --> 00:48:18,862
is build branching hallways.

824
00:48:18,929 --> 00:48:19,897
These we can think of

825
00:48:19,897 --> 00:48:23,834
as just a vertex,
where Mario can go one of three ways.

826
00:48:23,867 --> 00:48:26,870
It can come in one edge,
leave on any of these edges.

827
00:48:26,870 --> 00:48:27,738
This is sort of something

828
00:48:27,738 --> 00:48:31,575
we always take for granted,
and I'll kind of omit this in the future,

829
00:48:31,642 --> 00:48:35,178
but it is something we need

830
00:48:35,245 --> 00:48:37,714
the ability for Mario to do.

831
00:48:37,714 --> 00:48:40,017
The interesting part, this is the--

834
00:48:41,000 --> 00:48:47,724
Okay, another thing we need
is called a one-way mechanism.

836
00:48:47,724 --> 00:48:49,693
There are few different choices

837
00:48:49,693 --> 00:48:52,262
what this could be.

838
00:48:52,362 --> 00:48:57,601
Simplest one is a diode, which

839
00:48:57,601 --> 00:49:01,305
I'm going to-- Probably I'll actually draw
all of these as a box with an arrow on it.

840
00:49:01,371 --> 00:49:04,875
So the idea is you can come in
from the left and leave on the right,

841
00:49:04,942 --> 00:49:06,700
but you can't go
from the right to the left.

842
00:49:06,700 --> 00:49:12,015
In a diode, you could go many times
left to right, never right to left.

843
00:49:12,082 --> 00:49:15,052
This is long falls.

844
00:49:15,052 --> 00:49:17,854
Long falls in many video games,

845
00:49:17,854 --> 00:49:21,325
platform games with gravity
give you a diode.

846
00:49:21,325 --> 00:49:22,192
You can fall one way,

847
00:49:22,192 --> 00:49:26,730
you can't fall up.

848
00:49:26,830 --> 00:49:28,799
There are many other versions
that suffice.

849
00:49:28,799 --> 00:49:33,070
I'm going to mention two of them.

851
00:49:33,070 --> 00:49:36,740
One is a directed crumbler.

852
00:49:36,807 --> 00:49:41,144
Maybe I'll draw that as a dotted line
or dashed line,

853
00:49:41,144 --> 00:49:42,279
I don't know.

854
00:49:42,279 --> 00:49:45,315
This is an edge that you can use
only one time left to right.

855
00:49:45,315 --> 00:49:46,416
You walk left to right,

856
00:49:46,416 --> 00:49:49,419
and then it crumbles away,
and you can't use it in any direction.

857
00:49:49,453 --> 00:49:50,654
You can never go right to left,

858
00:49:50,654 --> 00:49:52,456
you can go left to right once.

859
00:49:52,456 --> 00:49:57,494
That also works fine for this proof.
Slightly more generally,

860
00:49:57,561 --> 00:50:00,030
you can use what we'll call
a no-return gadget.

861
00:50:00,030 --> 00:50:02,799
This is actually a family of gadgets
that includes these too.

862
00:50:02,799 --> 00:50:05,602
But the key idea is

863
00:50:05,602 --> 00:50:10,674
we can allow

864
00:50:10,774 --> 00:50:13,043
right to left traversal

865
00:50:13,043 --> 00:50:20,617
before we do a left to right traversal.

866
00:50:20,684 --> 00:50:22,185
The point of no-return

867
00:50:22,185 --> 00:50:25,589
is that once you go through left to right,
you can't return right to left.

868
00:50:25,689 --> 00:50:28,692
But before you go left to right,
maybe you could go right to left.

869
00:50:28,725 --> 00:50:30,193
So sometimes this is easier,

870
00:50:30,193 --> 00:50:32,696
you can't avoid this.

871
00:50:32,696 --> 00:50:34,898
I'm not going to justify the
no-return here.

872
00:50:34,898 --> 00:50:38,635
Mostly we're just going to be thinking
about diodes and directed crumblers.

873
00:50:38,735 --> 00:50:44,741
But the theorem I'm about to say
is also true in this setting.

874
00:50:44,808 --> 00:50:47,210
And then finally,

875
00:50:47,210 --> 00:50:48,700
we get to opening doors.

876
00:50:50,247 --> 00:50:54,017
[STUDENT] Is it important that
the crumbler is directed?

877
00:50:54,084 --> 00:50:58,155
Is important that the crumbler
is directed...

879
00:50:58,221 --> 00:50:58,855
I don't know.

880
00:50:58,855 --> 00:51:01,024
You tell me.

881
00:51:01,024 --> 00:51:04,027
I thought it was.

882
00:51:04,261 --> 00:51:06,00
[STUDENT] If you go through it,
you can't go the other way,

883
00:51:06,400 --> 00:51:08,331
[STUDENT]
so it satisfies no-return property.

884
00:51:08,331 --> 00:51:09,866
Oh, I see.

885
00:51:09,866 --> 00:51:12,869
Good.

886
00:51:12,936 --> 00:51:15,939
That's true.

887
00:51:16,173 --> 00:51:16,807
Okay.

888
00:51:16,807 --> 00:51:24,881
Directed crumbler is right,
but also undirected crumbler is right.

890
00:51:24,948 --> 00:51:27,484
So what's an undirected crumbler?

891
00:51:27,484 --> 00:51:29,319
It's just a dash line with no arrow.

892
00:51:29,319 --> 00:51:31,488
So this one, you can go left to right
and it disappears,

893
00:51:31,488 --> 00:51:33,657
or you can go right to left
and it disappears.

894
00:51:33,657 --> 00:51:36,793
But in particular, if you first go left
to right, you can't go back right to left,

895
00:51:36,893 --> 00:51:40,000
so that's also a no-return gadget,
so also good.

896
00:51:40,000 --> 00:51:42,065
So any of those things.

897
00:51:42,065 --> 00:51:45,435
No-return is really the family
that includes

898
00:51:45,502 --> 00:51:48,338
all those great one-way mechanisms.

899
00:51:48,338 --> 00:51:50,707
We need this for

900
00:51:50,774 --> 00:51:52,000
choices and merges

901
00:51:52,000 --> 00:51:54,500
wherever we were using long falls before.

902
00:51:55,000 --> 00:51:58,815
Now, what about the gadget
that does this unlock mechanism?

903
00:51:58,882 --> 00:52:03,000
This I'm going to call an
Opening Door with Two Buttons,

905
00:52:13,463 --> 00:52:19,603
which I will draw like this.

907
00:52:19,603 --> 00:52:22,405
Let's draw this as a dotted line

908
00:52:22,405 --> 00:52:24,975
to the right

909
00:52:24,975 --> 00:52:29,279
and maybe a wiggly line here.

910
00:52:29,379 --> 00:52:31,815
So there are two

911
00:52:31,815 --> 00:52:33,483
open ports,

912
00:52:33,483 --> 00:52:36,887
open buttons on the bottom of this gadget,

913
00:52:36,953 --> 00:52:39,600
and there's this dotted line,
which is not possible to traverse.

914
00:52:39,600 --> 00:52:43,360
If agent comes in here,
you're not able to get here

915
00:52:43,426 --> 00:52:48,999
unless this path has been opened
by one of these two buttons.

916
00:52:49,065 --> 00:52:50,500
This is like in Mario,

917
00:52:50,500 --> 00:52:53,170
there's two question blocks here.

918
00:52:53,170 --> 00:52:55,172
If you hit them,
you put a star on this path

919
00:52:55,172 --> 00:52:59,743
and then you're able to traverse the
fire bars, but not otherwise.

920
00:52:59,809 --> 00:53:01,144
Okay.

921
00:53:01,144 --> 00:53:03,280
There's two versions of this gadget.

922
00:53:03,280 --> 00:53:05,949
It could be directed

923
00:53:05,949 --> 00:53:07,651
to put an arrow here

924
00:53:07,651 --> 00:53:15,592
or it could be undirected,

925
00:53:15,659 --> 00:53:19,396
which is traversing left or right
is the same as traversing right to left,

926
00:53:19,529 --> 00:53:24,668
only possible if you open the door.

927
00:53:24,734 --> 00:53:25,702
Cool.

928
00:53:25,702 --> 00:53:27,837
So that's the end of the theorem
statement.

929
00:53:27,837 --> 00:53:32,042
Planar motion planning is NP-hard if you
have three gadgets: branching hallways,

930
00:53:32,142 --> 00:53:35,044
one of these one-way mechanisms
(aka no-return gadget),

931
00:53:35,044 --> 00:53:37,781
and an opening door with two buttons.

932
00:53:37,847 --> 00:53:41,851
It may seem like this is not simpler,
but this is a way to encapsulate

933
00:53:41,952 --> 00:53:46,300
what's going on in that proof over there,
without building explicit choice and merge.

934
00:53:46,300 --> 00:53:50,927
It turns out you can build
choice and merge using these gadgets.

935
00:53:50,994 --> 00:53:55,198
So this is the
sense in which it's simpler.

936
00:53:55,298 --> 00:53:55,799
If you want to

937
00:53:55,799 --> 00:53:58,802
build a choice that's like a branching
hallway

938
00:53:58,935 --> 00:54:03,773
combined with a couple of long falls
or one way mechanisms.

939
00:54:03,873 --> 00:54:07,744
So if we assume
we're only coming from here

940
00:54:07,844 --> 00:54:11,815
and once we traverse

941
00:54:11,815 --> 00:54:16,253
one of these choices, we can't immediately
go back by the no-return property.

942
00:54:16,353 --> 00:54:20,991
And so we've chosen, say, true or false

943
00:54:21,057 --> 00:54:24,527
using-- we've built it
using branching hallways here

944
00:54:24,594 --> 00:54:34,638
and one way mechanisms.
Similarly merge is

945
00:54:34,704 --> 00:54:37,007
this picture.

946
00:54:37,007 --> 00:54:38,675
And here I'm assuming

947
00:54:38,675 --> 00:54:42,445
I have a diode or a directed crumbler.

948
00:54:42,512 --> 00:54:44,047
I'm not going to handle the other cases,

949
00:54:44,047 --> 00:54:46,783
but it's possible
with a bunch of case analysis.

950
00:54:46,783 --> 00:54:50,353
So if we assume these only work
in one direction top down,

951
00:54:50,420 --> 00:54:54,224
if I come through here,
I won't be able to go up the other path,

952
00:54:54,391 --> 00:54:57,227
all I can do is come out this way.

953
00:54:57,294 --> 00:54:58,995
So that's how--

954
00:54:58,995 --> 00:55:04,234
You plug these two gadgets
into what was going on here,

955
00:55:04,334 --> 00:55:07,070
and we've reduced the number of gadgets
by one.

956
00:55:07,070 --> 00:55:11,241
I added branching hallways, but
we were using branching hallways already.

957
00:55:11,308 --> 00:55:14,010
And instead of having a separate choice
and merge gadget,

958
00:55:14,010 --> 00:55:17,500
we now just have the one-way mechanism

959
00:55:17,500 --> 00:55:19,716
that was enough to build choice and merge.

960
00:55:19,783 --> 00:55:23,953
We still need this red thing
and I'm going to redraw this picture.

961
00:55:23,953 --> 00:55:29,526
So stare at the picture for a second
and we transition to--

962
00:55:29,592 --> 00:55:32,262
This is our new kind of reduction

963
00:55:32,262 --> 00:55:35,398
from sided linked planar 3SAT.

964
00:55:35,498 --> 00:55:39,736
But now using these one-way mechanisms,

965
00:55:39,803 --> 00:55:40,770
branching hallways, [and opening doors].

966
00:55:40,770 --> 00:55:45,408
So this was this the choice and merge,
I've just inlined here,

967
00:55:45,475 --> 00:55:49,379
and in this case we need a choice
we don't actually need a merge

968
00:55:49,479 --> 00:55:52,082
because we just need this to satisfy
one way or the other.

969
00:55:52,082 --> 00:55:54,517
Not a big deal.

970
00:55:54,584 --> 00:55:55,352
Then we just have

971
00:55:55,352 --> 00:55:59,055
a branching hallway
to go to the next clause.

972
00:55:59,155 --> 00:56:02,492
And so all we need
are these little green boxes.

973
00:56:02,492 --> 00:56:04,894
There's two of them.
Well, there's also this purple dot.

974
00:56:04,894 --> 00:56:07,564
But other than branching hallways,
we have the one way mechanism,

975
00:56:07,564 --> 00:56:09,466
we have the opening door with two buttons.

976
00:56:09,466 --> 00:56:13,500
As long as you can build those two
two, this NP-hardness framework

977
00:56:13,500 --> 00:56:18,007
tells you your problem is NP-hard.

978
00:56:18,074 --> 00:56:21,511
So let's apply it to some things.

979
00:56:21,611 --> 00:56:26,483
Oh, I have one last thing to mention,

980
00:56:26,583 --> 00:56:31,488
which is opening door
two buttons is pretty good.

981
00:56:31,554 --> 00:56:33,590
What about one button?

982
00:56:33,590 --> 00:56:36,059
That sadly is an open problem,

983
00:56:36,059 --> 00:56:40,764
but if you have crossovers, opening doors
with one button is hard.

984
00:56:40,830 --> 00:56:43,800
And the open problem
is in this planar setting

985
00:56:43,800 --> 00:56:47,570
(we have no crossings among how
these gadgets are connected)

986
00:56:47,637 --> 00:56:49,172
opening doors with one button.

987
00:56:49,172 --> 00:56:50,000
Maybe it isn't hard.

988
00:56:50,000 --> 00:56:54,544
So the-- We need--
We seem to need two buttons so far.

989
00:56:54,544 --> 00:56:55,979
Okay, so let's look at some proofs.

990
00:56:55,979 --> 00:56:59,500
This is the Mario proof,
or the gadgets in the Mario proof.

991
00:56:59,500 --> 00:57:01,684
We had variable, clause, and crossover.

992
00:57:01,684 --> 00:57:05,088
We can now simplify by saying, okay,
we don't need crossover,

993
00:57:05,088 --> 00:57:09,459
because linked planar 3SAT
gives it to us provided we have a one-way,

994
00:57:09,459 --> 00:57:12,829
which is a long fall,
and we have a two button opening door.

995
00:57:12,829 --> 00:57:17,133
So I get to remove one of these
question blocks, get it slightly smaller.

996
00:57:17,233 --> 00:57:20,103
Two question blocks is enough

997
00:57:20,103 --> 00:57:23,406
for, you know, one side of this reduction.

998
00:57:23,606 --> 00:57:29,145
So now two slightly smaller diagrams
instead of three, especially avoiding

999
00:57:29,145 --> 00:57:33,316
this really complicated diagram,
we get that Mario is NP-hard.

1000
00:57:33,383 --> 00:57:37,400
In fact, in some sense, you can get away
with one gadget because this

1001
00:57:37,400 --> 00:57:42,392
two button opening door contains
inside it a directed crumbler.

1002
00:57:42,492 --> 00:57:46,696
If I just erase the left part
here and erase this wall,

1003
00:57:46,763 --> 00:57:50,233
then Mario coming over here
can gain a star

1004
00:57:50,300 --> 00:57:54,200
and go through this edge once,
and never again.

1005
00:57:54,200 --> 00:57:57,273
You never go right to left,
and there's only one star here,

1006
00:57:57,273 --> 00:58:00,900
so once you get the star, you can go left
to right, and you get a directed crumbler.

1007
00:58:00,900 --> 00:58:04,481
So this gadget alone,
if you just sort of wire

1008
00:58:04,481 --> 00:58:07,884
these together, gives us

1009
00:58:07,984 --> 00:58:10,587
the directed crumbler
because this is a directed opening door.

1010
00:58:10,587 --> 00:58:12,255
So that's kind of nice.

1011
00:58:12,255 --> 00:58:17,293
So almost one figure
is enough to prove Mario is hard.

1012
00:58:17,360 --> 00:58:21,998
There-- In our original paper
that did the Mario proof, we also analyzed

1013
00:58:21,998 --> 00:58:25,768
a bunch of other games like

1014
00:58:25,869 --> 00:58:27,871
Legend of Zelda: Link to the Past.

1015
00:58:27,871 --> 00:58:30,940
So this in particular with this hookshot
mechanism that you just saw

1016
00:58:30,974 --> 00:58:35,478
illustrated here where you can hook
to a close enough object,

1017
00:58:35,545 --> 00:58:39,349
and some of the objects are movable,
you can push them around.

1018
00:58:39,415 --> 00:58:42,919
So we had a proof, they had a variable,
a clause and a crossover.

1019
00:58:42,986 --> 00:58:46,289
These weren't particularly difficult,
but I'd like to simplify this proof.

1020
00:58:46,289 --> 00:58:50,293
The main one is the clause where you can--
if you come and satisfy this clause,

1021
00:58:50,293 --> 00:58:51,961
you can push this block down one

1022
00:58:51,961 --> 00:58:54,500
and then you'll be able to hookshot
from the left to the right, say,

1023
00:58:54,500 --> 00:58:58,067
if any of these are pushed down.
So now we can simplify this proof.

1024
00:58:58,067 --> 00:59:00,203
We only need two out of three
of these blocks.

1025
00:59:00,203 --> 00:59:01,638
We don't need the crossover.

1026
00:59:01,638 --> 00:59:03,439
And we really just need a
one-way out of here,

1027
00:59:03,439 --> 00:59:07,000
not this whole variable
construction. So proof gets simpler.

1028
00:59:08,144 --> 00:59:10,747
Another Nintendo
video game we analyzed is Metroid.

1029
00:59:10,747 --> 00:59:12,782
Ooh, get some music too.

1030
00:59:12,782 --> 00:59:17,954
And this proof had a really complicated
crossover using some fancy

1031
00:59:17,954 --> 00:59:21,357
timing with these little monsters
that climb around,

1032
00:59:21,457 --> 00:59:24,827
and then a pretty simple clause,
which is if Metroid--

1033
00:59:25,061 --> 00:59:27,664
if Samus can get to one of these

1034
00:59:27,664 --> 00:59:30,733
three places, then you can shoot
all of the enemies so that later

1035
00:59:30,733 --> 00:59:34,270
when you're coming here, rolling around
(and you don't have bombs in this level,

1036
00:59:34,270 --> 00:59:38,441
so you can't destroy the enemies in any
other way), you have to roll through

1037
00:59:38,608 --> 00:59:43,346
over here, only possible
if you destroyed the all the enemies.

1038
00:59:43,446 --> 00:59:45,715
So now we can thankfully throw away

1039
00:59:45,715 --> 00:59:50,153
that crossover and slightly reduce
from three buttons to two buttons.

1040
00:59:50,253 --> 00:59:56,292
Next one is Donkey Kong Country.

1041
00:59:56,392 --> 01:00:01,030
Here is a hardness proof where

1042
01:00:01,097 --> 01:00:04,400
Donkey Kong can come through here

1043
01:00:04,467 --> 01:00:07,937
and grab a barrel and throw this barrel,

1044
01:00:08,004 --> 01:00:11,040
it will roll and kill this bee.

1045
01:00:11,140 --> 01:00:12,175
And as long as you can get

1046
01:00:12,175 --> 01:00:16,245
to one of these three spots,
you can throw the barrel and kill the bee.

1047
01:00:16,312 --> 01:00:20,083
And later to check this clause, Donkey
Kong comes in here

1048
01:00:20,283 --> 01:00:24,420
and gets fired through the bee
with no control.

1049
01:00:24,520 --> 01:00:30,059
And so you'll-- and will end up
way over here at the next clause.

1050
01:00:30,159 --> 01:00:32,862
And that'll be possible
only if you satisfied the clause.

1051
01:00:32,862 --> 01:00:34,364
The reason I'm saying all that is

1052
01:00:34,364 --> 01:00:37,967
we don't want Donkey Kong to be able
to just come down here and satisfy

1053
01:00:37,967 --> 01:00:42,872
the clause or, you know, continue
the checking path of all the clauses.

1054
01:00:42,872 --> 01:00:46,843
It's really important, if Donkey comes
down here, can't do anything.

1055
01:00:46,909 --> 01:00:47,510
And as long as you

1056
01:00:47,510 --> 01:00:51,280
put the next clause
far enough away to the right, that's true.

1057
01:00:51,347 --> 01:00:53,049
Okay. There's also a crossover.

1058
01:00:53,049 --> 01:00:55,385
We don't need that anymore.

1059
01:00:55,385 --> 01:00:56,219
All right.

1060
01:00:56,219 --> 01:01:00,156
Last Nintendo proof
I'm going to talk about is Pokémon.

1061
01:01:00,223 --> 01:01:05,094
This is the core construction
for the people who know Pokémon very well.

1062
01:01:05,094 --> 01:01:07,864
We're going to build
two kinds of trainers.

1063
01:01:07,864 --> 01:01:12,001
Trainers are people
you battle Pokémon with, in the game.

1064
01:01:12,101 --> 01:01:15,371
We're going to have weak trainers
where the player always wins

1065
01:01:15,438 --> 01:01:18,241
and strong trainers
where the player always loses

1066
01:01:18,241 --> 01:01:19,909
for this reduction.

1067
01:01:19,909 --> 01:01:22,645
This details
how you do that in the various

1068
01:01:22,645 --> 01:01:26,115
generations of Pokémon.

1069
01:01:26,182 --> 01:01:30,119
And so the red characters
here are the weak trainers,

1070
01:01:30,119 --> 01:01:33,322
the blue ones are the strong trainers.
And the way trainers work--

1071
01:01:33,322 --> 01:01:35,925
Let's look at the variable gadget.

1072
01:01:35,925 --> 01:01:38,594
Simple example. So this is a trainer.

1073
01:01:38,594 --> 01:01:42,331
Trainers have a field of vision
in front of them.

1074
01:01:42,432 --> 01:01:44,400
It's like a column or a row.

1075
01:01:44,400 --> 01:01:48,204
And if you walk-- if the
player walks here,

1076
01:01:48,304 --> 01:01:52,008
the trainer-- into this field of vision,
they're sort of detected

1077
01:01:52,241 --> 01:01:55,511
and the trainer will walk towards you
until they're one space away from you

1078
01:01:55,511 --> 01:01:58,114
and then fight you.
And in the red case, you'll win,

1079
01:01:58,114 --> 01:02:01,884
and then the trainer
is permanently in that position

1080
01:02:01,984 --> 01:02:04,987
and never fights again.

1081
01:02:05,088 --> 01:02:08,324
And-- Or if you decide

1082
01:02:08,324 --> 01:02:12,128
to talk to the trainer from the side,
then you'll fight them immediately.

1083
01:02:12,128 --> 01:02:13,796
In this case, you win,

1084
01:02:13,796 --> 01:02:16,799
and then the trainer will be permanently
in its original position.

1085
01:02:16,866 --> 01:02:17,567
So you get to choose

1086
01:02:17,567 --> 01:02:21,370
whether they move to you
or if you can talk to them from the side.

1087
01:02:21,437 --> 01:02:23,172
So this gives you a variable,

1088
01:02:23,172 --> 01:02:26,342
because if I come here
and the trainer moves down one square,

1089
01:02:26,442 --> 01:02:28,177
then I'll never be able to get to the true
path,

1090
01:02:28,177 --> 01:02:30,146
I'll only be able to get to the false
path.

1091
01:02:30,146 --> 01:02:32,648
And conversely,
if I come and talk to the trainer

1092
01:02:32,648 --> 01:02:35,651
and fix them in their location,
then I come here,

1093
01:02:35,685 --> 01:02:36,586
I'll be able to get to true,

1094
01:02:36,586 --> 01:02:38,921
but I'll never be able to get to false.

1095
01:02:38,921 --> 01:02:41,591
So this is not a one-way,

1096
01:02:41,657 --> 01:02:44,427
but it's
a variable, which is what we need.

1097
01:02:44,427 --> 01:02:47,497
There's a very complicated crossover
and then there's a clause

1098
01:02:47,497 --> 01:02:50,967
which is pretty simple.

1099
01:02:51,067 --> 01:02:53,169
The idea is
if you haven't satisfied the clause

1100
01:02:53,169 --> 01:02:57,406
and you walk across here, these trainers
will each move down one square,

1101
01:02:57,473 --> 01:03:00,343
and then if you go up here,
this trainer will come

1102
01:03:00,343 --> 01:03:03,346
and attack you and you lose.

1103
01:03:03,579 --> 01:03:07,517
But if at least one of the literals
is satisfied, you can freeze one of these

1104
01:03:07,517 --> 01:03:11,020
red guys in place and then this guy
won't be able to see you.

1105
01:03:11,087 --> 01:03:12,321
That's part of the rules I didn't mention.

1106
01:03:12,321 --> 01:03:14,924
But then you'll be able to get through.

1107
01:03:14,924 --> 01:03:18,661
Okay, so we can throw away this crossover

1108
01:03:18,761 --> 01:03:21,164
and reduce the opening door
to two buttons.

1109
01:03:21,164 --> 01:03:24,167
We don't have a one way mechanism here,
but we have a variable

1110
01:03:24,400 --> 01:03:27,737
and that turns out to work
basically just as well,

1111
01:03:27,804 --> 01:03:32,308
where instead of--
We used to have that if you did x,

1112
01:03:32,308 --> 01:03:37,480
you visit all the clauses that include x
and then you route to the next variable.

1113
01:03:37,547 --> 01:03:39,148
That that doesn't work

1114
01:03:39,148 --> 01:03:43,653
because we don't have a way to do this
merging without leakage.

1115
01:03:43,753 --> 01:03:46,756
And so instead what we do is just link
all the variables directly together,

1116
01:03:46,756 --> 01:03:52,695
which is exactly what we get out of
linked 3SAT and each one has a choice

1117
01:03:52,695 --> 01:03:55,731
and then is connected
to the set of clauses

1118
01:03:55,898 --> 01:03:58,901
for the true or for the false.

1119
01:03:59,135 --> 01:04:03,039
So basically the the variables
are connected to each other over here

1120
01:04:03,105 --> 01:04:06,108
instead of being connected
to each other after the choice,

1121
01:04:06,309 --> 01:04:09,178
which is not what
you want to do with long falls,

1122
01:04:09,178 --> 01:04:12,648
but it's what you want to do
with this kind of

1123
01:04:12,715 --> 01:04:13,983
variable gadget.

1124
01:04:13,983 --> 01:04:16,000
Okay, cool.

1125
01:04:21,524 --> 01:04:28,000
One more topic
-- unless there are questions --

1126
01:04:28,000 --> 01:04:30,800
which is closing doors.

1127
01:04:30,867 --> 01:04:33,402
So we have this nice opening door
framework.

1128
01:04:33,402 --> 01:04:36,706
You might naturally ask,
what about closing door framework?

1129
01:04:36,772 --> 01:04:40,000
And there is such a thing,
and it also

1130
01:04:40,000 --> 01:04:44,00
really likes to use linked planar 3SAT.

1132
01:05:15,411 --> 01:05:18,681
So this theorem has a similar structure
to the opening doors framework.

1133
01:05:18,748 --> 01:05:21,751
Planar motion planning,
this is problem of given

1134
01:05:21,751 --> 01:05:25,021
a planar network of gadgets
that I'm about to specify,

1135
01:05:25,087 --> 01:05:26,956
a planar graph of them,

1136
01:05:26,956 --> 01:05:29,058
and you have some start location,
some end location,

1137
01:05:29,058 --> 01:05:34,997
can I get from A to B, that's going to be
NP-hard provided we have two gadgets.

1138
01:05:35,197 --> 01:05:38,000
One is branching hallway,
just like before.

1139
01:05:42,138 --> 01:05:43,572
In this theorem

1140
01:05:43,572 --> 01:05:45,775
we don't even need a one-way mechanism.

1141
01:05:45,775 --> 01:05:50,000
We just need what I'm going to call
a Distant Closing.

1143
01:05:57,753 --> 01:05:58,654
This is a gadget

1144
01:05:58,654 --> 01:06:02,224
that has two paths,
two ways to traverse it,

1145
01:06:02,291 --> 01:06:06,629
and at least one

1146
01:06:06,696 --> 01:06:12,000
fully closes the other.

1147
01:06:21,911 --> 01:06:23,479
And it could also close itself,

1148
01:06:23,479 --> 01:06:25,000
we don't care.

1149
01:06:28,317 --> 01:06:29,518
Okay.

1150
01:06:29,518 --> 01:06:35,825
I'm going to give you two examples
of this gadget,

1151
01:06:35,891 --> 01:06:38,294
just to give some intuition.

1152
01:06:38,294 --> 01:06:41,030
And these are
the ones that tend to come up the most.

1153
01:06:41,030 --> 01:06:43,566
One is a NAND.

1154
01:06:43,566 --> 01:06:47,236
So this is-- I have

1155
01:06:47,336 --> 01:06:52,908
two paths and
one of them closes the other.

1156
01:06:53,009 --> 01:06:58,414
Sorry, each of them closes the other.

1158
01:06:58,414 --> 01:07:01,717
So if I traverse this path,

1159
01:07:01,784 --> 01:07:04,720
this top edge,
then the other one closes,

1160
01:07:04,720 --> 01:07:07,023
and if I traverse the bottom edge,
the other one closes.

1161
01:07:07,023 --> 01:07:10,326
So you can't use both of them.
So it's NAND.

1162
01:07:10,393 --> 01:07:13,129
Another one is

1163
01:07:13,129 --> 01:07:17,800
called matched crumbles.

1164
01:07:17,900 --> 01:07:22,171
This is the return of the crumbler,
but in a fancier version.

1165
01:07:22,238 --> 01:07:24,974
So here I have again two paths,

1166
01:07:24,974 --> 01:07:29,612
but they're dashed paths

1167
01:07:29,678 --> 01:07:33,916
and they also close each other.

1168
01:07:34,016 --> 01:07:38,421
So just like the original crumbler
which had one one edge that disappears.

1169
01:07:38,487 --> 01:07:41,457
Now if I traverse this one,
they both disappear,

1170
01:07:41,457 --> 01:07:44,760
so they're matched to be
in the same [state].

1172
01:07:47,997 --> 01:07:50,933
So if I traverse the top one,
they both crumble.

1173
01:07:50,933 --> 01:07:53,502
If I traverse the bottom one,
they both crumble.

1175
01:07:53,702 --> 01:07:56,405
These are two examples of distant closing.

1176
01:07:56,405 --> 01:08:00,876
There are others, but these turn out
to be sort of the core ones.

1177
01:08:00,976 --> 01:08:05,047
And there is another constraint,

1178
01:08:05,147 --> 01:08:09,685
which is

1179
01:08:09,752 --> 01:08:15,491
this gadget needs to be

1180
01:08:15,591 --> 01:08:19,000
in one of the following geometries.

1182
01:09:02,271 --> 01:09:11,947
So there are bunch of cases.

1183
01:09:12,014 --> 01:09:23,459
This is what we call antiparallel.

1184
01:09:23,526 --> 01:09:28,764
This is what we call crossing.

1185
01:09:28,831 --> 01:09:32,735
And the other one
you might imagine is parallel.

1186
01:09:32,801 --> 01:09:39,975
This one, we forbid,

1187
01:09:40,075 --> 01:09:40,776
it's an open problem

1188
01:09:40,776 --> 01:09:44,313
whether this works,
but let's say it doesn't work.

1189
01:09:44,380 --> 01:09:47,917
Where we know it works
is if we have directed edges

1190
01:09:47,983 --> 01:09:49,952
(so if each of the paths is directed)

1191
01:09:49,952 --> 01:09:53,322
and they're in opposite directions
when you draw them in the plane,

1192
01:09:53,422 --> 01:09:57,626
or if they cross each other,
those are both good.

1193
01:09:57,693 --> 01:10:00,029
We don't know how to handle
when both the edges

1194
01:10:00,029 --> 01:10:02,000
are parallel to each other.

1195
01:10:02,000 --> 01:10:06,669
Or if the edges are undirected,

1196
01:10:06,669 --> 01:10:08,800
there's only two cases:
they could either be

1197
01:10:08,800 --> 01:10:13,108
non-crossing or crossing those both work.

1198
01:10:13,175 --> 01:10:14,577
Or they could be mixed,

1199
01:10:14,577 --> 01:10:17,880
maybe one edge is directed
and the other one is undirected,

1200
01:10:17,947 --> 01:10:20,816
that's also okay,

1201
01:10:20,883 --> 01:10:26,522
you can have it like this,
you can have it like this.

1203
01:10:26,522 --> 01:10:28,857
There's no distinction between parallel
and antiparallel

1204
01:10:28,857 --> 01:10:31,560
when there's only one directed edge.
So these are all good.

1205
01:10:31,560 --> 01:10:36,031
We really just need to forbid
this one case.

1206
01:10:36,098 --> 01:10:38,367
And what I'm going to show you is a proof

1207
01:10:38,367 --> 01:10:42,638
that closing doors is hard
via reduction from

1208
01:10:42,738 --> 01:10:48,000
linked-- sided linked planar 3SAT,
our good friend.

1209
01:10:48,000 --> 01:10:50,679
And I hand-drew this
but I think it's

1210
01:10:50,679 --> 01:10:54,183
a little tedious to draw on the board
so I'm just going to show my hand-drawing.

1211
01:10:54,250 --> 01:10:58,621
So here is the setup.

1212
01:10:58,721 --> 01:11:03,959
I need to write an assumption for this
to make sense.

1213
01:11:04,026 --> 01:11:05,500
So proof.

1214
01:11:22,778 --> 01:11:25,781
So there are many possible
distant closing gadgets.

1215
01:11:25,948 --> 01:11:28,684
I'm going to assume
that I have some of them, and then later,

1216
01:11:28,684 --> 01:11:33,000
we'll see how to convert other
gadgets into these ones.

1217
01:11:56,879 --> 01:11:57,646
Okay, so I'm

1218
01:11:57,646 --> 01:12:01,350
going to assume that I have a parallel

1219
01:12:01,417 --> 01:12:05,287
(or a non-crossing [if undirected/mixed])

1220
01:12:05,387 --> 01:12:09,258
and a crossing set-up.

1221
01:12:09,325 --> 01:12:13,362
So that was, say,

1222
01:12:13,429 --> 01:12:16,699
this one which we don't actually--
isn't enough for hardness.

1223
01:12:16,699 --> 01:12:21,103
But I assume I have this one
and this one or these two or these two.

1224
01:12:21,170 --> 01:12:23,872
And it can be

1225
01:12:23,872 --> 01:12:27,843
a NAND or it can be matched crumblers.

1226
01:12:28,043 --> 01:12:29,778
I don't want to think
about the other cases right now.

1227
01:12:29,778 --> 01:12:30,713
Just these two.

1228
01:12:30,713 --> 01:12:32,848
Then we'll handle the other cases.

1229
01:12:32,848 --> 01:12:36,352
So when I draw one of these boxes

1230
01:12:36,418 --> 01:12:38,687
is either a NAND or a matched crumblers.

1231
01:12:38,687 --> 01:12:41,657
So whenever I traverse one of these edges,
the other one falls.

1232
01:12:41,724 --> 01:12:44,960
Maybe the one I just traversed
also closes behind itself,

1233
01:12:44,960 --> 01:12:46,662
I don't care.

1234
01:12:46,729 --> 01:12:47,763
So here is how

1235
01:12:47,763 --> 01:12:50,766
we build sided linked planar 3SAT.

1236
01:12:50,766 --> 01:12:53,102
For a variable,

1237
01:12:53,102 --> 01:12:55,738
we come in, we want to do a choice.

1238
01:12:55,738 --> 01:12:57,639
So we're just going to have
a branching hallway,

1239
01:12:57,639 --> 01:13:00,042
and then we're going
to have one of these gadgets.

1240
01:13:00,042 --> 01:13:04,079
And if I take the top path, I prevent
myself from later taking the bottom path.

1241
01:13:04,146 --> 01:13:07,416
So great. Then I visit all the clauses
with the appropriate assignment

1243
01:13:07,416 --> 01:13:11,587
of literal,
either the negation or as true form.

1244
01:13:11,687 --> 01:13:14,857
And then to do the merge,
I do the same thing.

1245
01:13:14,857 --> 01:13:16,592
I'm going to have one of these gadgets.

1246
01:13:16,592 --> 01:13:20,429
So if I traverse here,
I won't be able to go backwards and visit

1247
01:13:20,529 --> 01:13:22,531
the clauses with the other assignment.

1248
01:13:22,531 --> 01:13:30,472
So great. I built a variable
using this choice/merge idea.

1250
01:13:30,539 --> 01:13:32,040
Then I'm going to build a clause.

1251
01:13:32,040 --> 01:13:35,377
This is where it gets interesting,
and this is where we're going to use

1252
01:13:35,477 --> 01:13:39,314
just one crossing gadget.

1253
01:13:39,381 --> 01:13:39,982
But we need it.

1254
01:13:39,982 --> 01:13:43,719
We're going to use it essentially
as a crossover here in a limited form.

1255
01:13:43,819 --> 01:13:46,488
The point is
we never need to use both of these paths.

1256
01:13:46,488 --> 01:13:50,159
What are these paths where we want to do
a branching hallway here and either--

1257
01:13:50,259 --> 01:13:55,497
This clause is satisfied by
x_1 or x_2 or not x_3.

1258
01:13:55,564 --> 01:13:58,901
If this is sided,
the negative versions will be on one side,

1259
01:13:58,967 --> 01:14:00,469
positive versions
will be on the other side.

1260
01:14:00,469 --> 01:14:01,203
Again, we're using

1261
01:14:01,203 --> 01:14:06,074
that there's only two connections above
and at most two connections below.

1262
01:14:06,141 --> 01:14:07,643
There's only at most
three connections total.

1263
01:14:07,643 --> 01:14:11,280
So let's say there's two on top,
one on the bottom at most.

1264
01:14:11,346 --> 01:14:13,515
And so either--

1265
01:14:13,515 --> 01:14:15,751
So there's a bit of a catch here.

1266
01:14:15,751 --> 01:14:18,754
Notice
here I wrote when the variable is true,

1267
01:14:18,821 --> 01:14:21,590
I go and visit all the clauses with not x.

1268
01:14:21,590 --> 01:14:23,058
This is the opposite of what we had

1269
01:14:23,058 --> 01:14:25,127
with opening doors,
because here we're closing doors.

1270
01:14:25,127 --> 01:14:31,300
So if I visited a clause with--

1271
01:14:31,400 --> 01:14:36,700
Say, I set x_1 to false here,

1272
01:14:36,700 --> 01:14:39,508
which would not satisfy this clause,

1273
01:14:39,608 --> 01:14:41,777
then I would go and visit this clause,

1274
01:14:41,777 --> 01:14:45,948
and when I visit it,
I walk this path which closes this one,

1275
01:14:45,948 --> 01:14:49,651
which means I can't satisfy the clause
by following this route.

1276
01:14:49,751 --> 01:14:53,522
So I need to be able to satisfy
this clause with one of these three boxes.

1277
01:14:53,522 --> 01:14:55,624
If they're all closed, I'm screwed.

1278
01:14:55,624 --> 01:14:56,959
If at least one of them is open,

1279
01:14:56,959 --> 01:15:00,462
let's say this one is open,
then I can find a path

1280
01:15:00,462 --> 01:15:04,032
that goes there and get to the check out,

1281
01:15:04,099 --> 01:15:07,169
and then go to the next
clause and check that one.

1282
01:15:07,269 --> 01:15:09,338
And so here we're really just
using this as a way

1283
01:15:09,338 --> 01:15:14,309
to get from here to here or from here
over to here without any leakage.

1284
01:15:14,409 --> 01:15:17,079
And it's actually the parallel ones
that are doing

1285
01:15:17,079 --> 01:15:20,849
most of the work of like making sure

1286
01:15:20,949 --> 01:15:23,519
the choices are a satisfying assignment.

1287
01:15:23,519 --> 01:15:26,522
And we're using this as a crossover
to make it planar.

1288
01:15:26,522 --> 01:15:27,890
Okay, so that works great,

1289
01:15:27,890 --> 01:15:31,093
if we have a NAND
or we have matched dicrumblers,

1290
01:15:31,159 --> 01:15:35,130
and if we have both the parallel version
and the crossing version.

1291
01:15:35,230 --> 01:15:39,067
But luckily we can reduce to those cases

1292
01:15:39,167 --> 01:15:41,000
all the time.

1293
01:15:46,308 --> 01:15:49,177
It's just a little bit of case

1294
01:15:49,177 --> 01:15:51,000
analysis and reductions.

1295
01:16:12,800 --> 01:16:17,005
So the first reduction I want to do
is if I have a distant closing gadget,

1296
01:16:17,072 --> 01:16:24,479
any of them, I can make a NAND
or a matched crumblers.

1297
01:16:24,546 --> 01:16:27,883
It's funny pluralism there.

1299
01:16:27,883 --> 01:16:33,422
This is a gadget called "matched crumblers"
because there's two crumblers in the gadget.

1300
01:16:33,522 --> 01:16:35,958
So this is a generic thing
we're going to do.

1301
01:16:35,958 --> 01:16:37,826
Suppose we have some gadget.

1302
01:16:37,826 --> 01:16:42,130
I'm going to draw it as antiparallel
and then something happens here.

1303
01:16:42,130 --> 01:16:44,132
Let's say,

1304
01:16:44,132 --> 01:16:48,770
for example, if I traverse the top edge,
it closes the bottom edge.

1305
01:16:48,837 --> 01:16:50,639
But traversing the bottom edge does
nothing.

1306
01:16:50,639 --> 01:16:56,445
Just as an example.
I'm going to take that gadget,

1307
01:16:56,511 --> 01:16:59,815
rotate it 180 degrees for this diagram.

1308
01:16:59,881 --> 01:17:03,719
So the arrows actually look the same.

1309
01:17:03,819 --> 01:17:05,821
But now-- like the big solid arrows.

1310
01:17:05,821 --> 01:17:10,258
But now traversing this bottom
edge closes the top edge.

1311
01:17:10,325 --> 01:17:17,032
And then I'm
just going to wire these together.

1312
01:17:17,099 --> 01:17:19,968
And then this is

1313
01:17:19,968 --> 01:17:24,640
my big gadget.

1314
01:17:24,740 --> 01:17:27,676
It again has two different ways
to traverse it.

1315
01:17:27,676 --> 01:17:30,345
If you traverse the top one, what happens?

1316
01:17:30,345 --> 01:17:33,882
This one gets closed
and here nothing happens.

1317
01:17:33,949 --> 01:17:36,251
But then if I tried to come and
traverse it the other way,

1318
01:17:36,251 --> 01:17:39,688
I won't be able to because I'll
get stuck here because this was closed.

1319
01:17:39,755 --> 01:17:42,658
Similarly, if I traverse the bottom edge,

1320
01:17:42,658 --> 01:17:46,228
this one closes
and then nothing happens here.

1321
01:17:46,294 --> 01:17:50,232
But if I try to then traverse it
the other way, I get stuck.

1322
01:17:50,298 --> 01:17:53,101
So what I got was, before

1323
01:17:53,101 --> 01:17:57,239
this original gadget
I was given only closed from one side,

1324
01:17:57,439 --> 01:18:00,175
only one of the traversals closed
the other one.

1325
01:18:00,175 --> 01:18:05,113
But when I take two of them, then either
traversal closes both.

1326
01:18:05,180 --> 01:18:06,615
And now there are a few cases here.

1327
01:18:06,615 --> 01:18:10,018
Maybe also when you traverse this edge
it closed itself,

1328
01:18:10,085 --> 01:18:13,088
in that case we get matched crumblers,

1329
01:18:13,155 --> 01:18:17,492
because this one will have closed itself
and this one will have closed itself.

1330
01:18:17,592 --> 01:18:21,396
Or if it doesn't close itself,
we would have gotten a NAND. 

1331
01:18:21,496 --> 01:18:24,700
So with one picture,

1332
01:18:24,800 --> 01:18:27,569
if I-- in the antiparallel case,
I convert any distant

1333
01:18:27,569 --> 01:18:31,973
closing
gadget to a NAND or a matched crumblers.

1334
01:18:32,040 --> 01:18:34,309
If I have--

1335
01:18:34,309 --> 01:18:38,880
This also works in the undirected case
if there are no arrows here.

1336
01:18:38,980 --> 01:18:40,549
But if I have crossing

1337
01:18:40,549 --> 01:18:44,319
(with or without directions)

1338
01:18:44,419 --> 01:18:45,554
this is slightly more annoying.

1339
01:18:45,554 --> 01:18:48,457
If I wire it in the same way

1340
01:18:48,457 --> 01:18:52,194
I convert a crossing gadget
into a parallel gadget which I don't like.

1341
01:18:52,260 --> 01:18:54,062
So there are multiple ways to do this,

1342
01:18:54,062 --> 01:18:57,833
but I think the simplest one to me
is to just put a third one.

1343
01:18:57,899 --> 01:19:00,302
Now it's crossing again.

1344
01:19:00,302 --> 01:19:03,805
And one of these is rotated 180--
[incorrect]

1345
01:19:03,872 --> 01:19:06,875
or maybe you don't even-- Yeah, probably
one of these should be rotated 180,

1346
01:19:07,075 --> 01:19:10,479
so that if, say,
this one is controlling that,

1347
01:19:10,579 --> 01:19:13,014
this one will control that.

1348
01:19:13,014 --> 01:19:14,583
And so I got confused here.

1349
01:19:14,583 --> 01:19:18,120
So if I follow this path and, say,

1350
01:19:18,220 --> 01:19:21,022
say, following this path closes this one,

1351
01:19:21,022 --> 01:19:23,458
I want following this path

1352
01:19:23,458 --> 01:19:26,461
to also close this one,

1353
01:19:26,461 --> 01:19:29,297
which actually is--
maybe you don't even flip,

1354
01:19:29,297 --> 01:19:32,067
I think.

1355
01:19:32,134 --> 01:19:35,469
Right. I'll call this path 1, path 2.

1356
01:19:35,469 --> 01:19:37,339
This is path 1.

1357
01:19:37,339 --> 01:19:39,274
This is path 2.

1358
01:19:39,274 --> 01:19:42,711
And they alternate.

1359
01:19:42,778 --> 01:19:47,115
And so if I already have, let's say,
this dotted arrow is going up.

1360
01:19:47,115 --> 01:19:50,352
So if I follow path 1, I close path 2,

1361
01:19:50,418 --> 01:19:52,320
and I want also that

1362
01:19:52,320 --> 01:19:55,690
if I follow path 2,
I close path 1 and that works

1363
01:19:55,690 --> 01:20:00,061
if these gadgets are actually
the same gadget with no rotation.

1364
01:20:00,162 --> 01:20:03,098
Cool.

1365
01:20:03,098 --> 01:20:04,533
Okay, so this is great.

1366
01:20:04,533 --> 01:20:07,002
I've reduced to

1367
01:20:07,002 --> 01:20:11,940
this part, NAND or matched crumblers.

1368
01:20:12,040 --> 01:20:15,177
And this is no constraint,
directed or undirected or mixed,

1369
01:20:15,210 --> 01:20:17,345
that's all the things.

1370
01:20:17,345 --> 01:20:19,548
The remaining part is this.

1371
01:20:19,548 --> 01:20:22,517
I would like to have
parallel and crossing,

1372
01:20:22,517 --> 01:20:27,222
but maybe-- and I know I'm not allowed
to have started with parallel.

1373
01:20:27,289 --> 01:20:30,792
But I could have
started with antiparallel,

1374
01:20:30,859 --> 01:20:33,028
that's neither of these things.

1375
01:20:33,028 --> 01:20:36,031
Or I could have started with undirected
non -rossing,

1376
01:20:36,231 --> 01:20:39,901
also neither of these things. Or even
I could have started with crossing.

1377
01:20:40,001 --> 01:20:42,938
That doesn't give me parallel,

1378
01:20:42,938 --> 01:20:45,707
I wanted both. Luckily,

1379
01:20:45,707 --> 01:20:49,878
none of these are very hard
[to prove NP-hard].

1380
01:20:49,945 --> 01:20:53,949
Let's see, the simplest one is

1381
01:20:54,015 --> 01:21:06,127
crossing to parallel.

1382
01:21:06,228 --> 01:21:09,998
This is the same construction again.

1383
01:21:10,098 --> 01:21:13,199
We just saw how to do that,
if I only use two copies.

1384
01:21:13,199 --> 01:21:16,171
Now, I'm assuming these are
NANDs or matched crumblers.

1385
01:21:16,271 --> 01:21:19,808
So if I traverse this one, it crumbles

1386
01:21:19,908 --> 01:21:23,578
or it destroys the other and vice versa.

1387
01:21:23,678 --> 01:21:25,013
So, you know, great.

1388
01:21:25,013 --> 01:21:26,815
I turned to crossing into parallel.

1389
01:21:26,815 --> 01:21:28,650
That's not very hard.

1390
01:21:28,650 --> 01:21:36,725
More interesting is
antiparallel to crossing.

1392
01:21:36,725 --> 01:21:40,000
And this will give you a feel
for why antiparallel is so cool.

1394
01:21:47,000 --> 01:21:59,214
I think this is where I use a reflection.

1395
01:21:59,281 --> 01:21:59,748
Okay.

1396
01:21:59,748 --> 01:22:01,516
So these are both antiparallel gadgets.

1397
01:22:01,516 --> 01:22:04,819
This one is a reflection of that one.

1398
01:22:04,886 --> 01:22:06,354
So we're assuming
if you can build a gadget,

1399
01:22:06,354 --> 01:22:08,023
you can also build its reflection.

1400
01:22:08,023 --> 01:22:12,761
So if I come in here and traverse
this edge, I destroy the other one

1401
01:22:12,827 --> 01:22:17,232
and now I can't go this way because of
the arrow's in the wrong direction,

1402
01:22:17,299 --> 01:22:19,734
and I can't go this way
because I destroyed that edge,

1403
01:22:19,734 --> 01:22:22,904
so the only place I can go is out here,

1404
01:22:23,004 --> 01:22:25,573
and then I also destroy this edge.

1405
01:22:25,573 --> 01:22:26,474
And it's symmetric.

1406
01:22:26,474 --> 01:22:30,445
So you get a crossing
and it-- if you do

1407
01:22:30,445 --> 01:22:35,717
one of those traversals,
it destroys the other. Cool.

1408
01:22:35,784 --> 01:22:39,621
Side note: you can also go

1409
01:22:39,688 --> 01:22:43,425
from crossing to antiparallel.

1410
01:22:43,491 --> 01:22:45,961
But that's not something we need for this

1411
01:22:45,961 --> 01:22:48,797
because we just wanted
parallel and crossing.

1412
01:22:48,797 --> 01:22:52,968
So either we start with crossing
then we can convert it to parallel,

1413
01:22:53,034 --> 01:22:55,870
or we start with antiparallel,
then we convert it to crossing

1414
01:22:55,870 --> 01:22:58,873
and we convert that to parallel
and we get all the gadgets we want.

1415
01:22:59,007 --> 01:23:21,930
There is one case left which is
undirected non-crossing to crossing.

1418
01:23:22,030 --> 01:23:25,033
So for this construction to work
I really needed this arrow.

1419
01:23:25,233 --> 01:23:28,203
If I don't have arrows in my gadget,
everything is undirected.

1420
01:23:28,203 --> 01:23:29,037
I claim undirected

1421
01:23:29,037 --> 01:23:32,907
non-crossing is still good, but
I definitely can't use this construction.

1422
01:23:33,008 --> 01:23:41,816
So we are going to use

1423
01:23:41,883 --> 01:23:43,500
a different construction.

1424
01:23:44,853 --> 01:23:50,500
Try drawing this another way.

1426
01:24:00,301 --> 01:24:04,139
And symmetrify...

1428
01:24:11,012 --> 01:24:17,085
Okay, so these are gadgets,
these big boxes.

1430
01:24:17,152 --> 01:24:20,121
If I traverse this edge,
it destroys the other one and vice versa

1431
01:24:20,121 --> 01:24:21,089
and maybe itself.

1432
01:24:21,089 --> 01:24:24,659
That's the NAND or the matched crumblers.

1433
01:24:24,759 --> 01:24:27,762
So if I come in here,

1434
01:24:27,929 --> 01:24:31,166
then I destroy this path,

1435
01:24:31,232 --> 01:24:33,001
then I have to go here,

1436
01:24:33,001 --> 01:24:35,136
I follow this edge,
I destroy this path.

1437
01:24:35,136 --> 01:24:37,739
Now I have this branching hallway.

1438
01:24:37,739 --> 01:24:41,109
I can't go this way, cause
that's destroyed.

1439
01:24:41,176 --> 01:24:45,447
I could try to go this way,
but I get stuck, cause this is destroyed.

1440
01:24:45,547 --> 01:24:49,517
So in fact, I have to go this way

1441
01:24:49,584 --> 01:24:53,488
and destroy this edge, and then come
over here, destroy that edge.

1442
01:24:53,555 --> 01:24:57,425
I've completely obliterated
the other traversal path,

1443
01:24:57,525 --> 01:25:01,729
but I made it across
starting from an undirected

1444
01:25:01,796 --> 01:25:06,534
non-crossing thing.
And I get an undirected crossing.

1445
01:25:06,601 --> 01:25:10,605
Oh, I forgot to mention this proof
if I drew lots of arrows, but it works--

1446
01:25:10,672 --> 01:25:12,307
I wasn't assuming any of the arrows.

1447
01:25:12,307 --> 01:25:13,374
I kept arguing,

1448
01:25:13,374 --> 01:25:16,377
even if I come here,
I won't be able to go back this way.

1449
01:25:16,511 --> 01:25:20,148
I wasn't trying to respect the arrows,
so this proof works for the directed case

1450
01:25:20,148 --> 01:25:21,049
or the undirected case [or mixed],

1451
01:25:21,049 --> 01:25:25,487
as long as you have parallel
and crossing versions of your gadget.

1452
01:25:25,553 --> 01:25:27,188
Great.

1453
01:25:27,188 --> 01:25:30,158
So that is the

1454
01:25:30,158 --> 01:25:31,626
closing doors framework.

1455
01:25:31,626 --> 01:25:34,562
Let's just see how it works
in a few examples.

1456
01:25:34,562 --> 01:25:37,565
So one of them is a proof that we saw

1457
01:25:37,732 --> 01:25:40,435
a couple lectures ago in the SAT lecture.

1458
01:25:40,435 --> 01:25:43,938
This-- I'm just-- I'm not going to remind you
how this proof works, I'm just going to say

1459
01:25:43,938 --> 01:25:48,076
we proved Push-1 and PushPush-1
was NP-hard with a whole bunch of gadgets.

1460
01:25:48,076 --> 01:25:50,211
This isn't-- this is only
like half of them.

1461
01:25:50,211 --> 01:25:52,347
I am not even showing the crossover.

1462
01:25:52,347 --> 01:25:54,916
But I want to show
that one of the gadgets here

1463
01:25:54,916 --> 01:25:58,920
that we were using just as like
a little piece in this construction

1464
01:25:59,020 --> 01:26:01,623
is this gadget.
I called it "block other" in the lecture.

1465
01:26:01,623 --> 01:26:04,893
Now, I would call it a parallel NAND,

1466
01:26:04,993 --> 01:26:09,097
because if you go from northeast,
it blocks the other one.

1467
01:26:09,197 --> 01:26:10,498
You can't do that traversal.

1468
01:26:10,498 --> 01:26:12,900
So this is a directed parallel NAND.

1469
01:26:12,900 --> 01:26:17,872
Sadly, we don't know hardness
for that case.

1470
01:26:17,939 --> 01:26:21,142
But luckily there's a whole bunch
of Push hardness proofs.

1471
01:26:21,142 --> 01:26:22,277
And so I'm just going to show you

1472
01:26:22,277 --> 01:26:26,147
another one which used to be covered
in this class, called Push-1X,

1473
01:26:26,214 --> 01:26:27,649
so reduction from 3-coloring.

1474
01:26:27,649 --> 01:26:30,785
Push-1X is where

1475
01:26:30,785 --> 01:26:35,256
after you traverse a square, it crumbles,
you can't traverse that square again.

1476
01:26:35,356 --> 01:26:36,257
It's interesting because it's

1477
01:26:36,257 --> 01:26:39,694
in NP, It turns out it's still NP-hard
-- big, complicated proof,

1478
01:26:39,694 --> 01:26:41,162
this is less than half of it.

1479
01:26:41,162 --> 01:26:44,799
But one of those gadgets
here is a NAND gadget

1480
01:26:45,033 --> 01:26:47,835
and lo and behold, it's
almost the same as the previous one.

1481
01:26:47,835 --> 01:26:49,737
This one is antiparallel.

1482
01:26:49,737 --> 01:26:54,175
I'm going to zoom into that
and show you how it works.

1483
01:26:54,242 --> 01:26:57,879
So this is the gadget and I'm showing the
two possible traversals on the right.

1484
01:26:57,946 --> 01:27:02,217
And you can see that
they are antiparallel to each other.

1485
01:27:02,317 --> 01:27:05,753
But it's the same idea if I come and push
one of the blocks, then I'm unable

1486
01:27:05,753 --> 01:27:09,624
to push the other one from either side
because I only have strength 1.

1487
01:27:09,691 --> 01:27:10,425
So great.

1488
01:27:10,425 --> 01:27:14,128
This one gadget, plus branching
hallways, proves

1489
01:27:14,195 --> 01:27:17,165
that Push-1 is NP-hard,
Push-1X is NP-hard,

1490
01:27:17,165 --> 01:27:20,468
PushPush-1 is NP-hard
and PushPush-1X is NP-hard,

1491
01:27:20,568 --> 01:27:23,538
because PushPush will behave exactly
the same here.

1492
01:27:23,671 --> 01:27:26,441
Very simple proof, very cool

1493
01:27:26,441 --> 01:27:29,711
application of ultimately sided
linked planar 3SAT.

1494
01:27:29,711 --> 01:27:34,048
Zelda also has blocks
that you can push once.

1495
01:27:34,048 --> 01:27:36,584
Here's a little piece of the level.

1496
01:27:36,584 --> 01:27:39,420
A lot of Zelda games have this
where you can push blocks only once.

1497
01:27:39,420 --> 01:27:41,522
Same proof works
because it only involves pushing blocks

1498
01:27:41,522 --> 01:27:45,260
once, whereas the previous proofs
involved pushing multiple times.

1499
01:27:45,326 --> 01:27:46,394
Here's another pushing blocks

1500
01:27:46,394 --> 01:27:49,397
game called Push-1G,
where the blocks experience gravity,

1501
01:27:49,397 --> 01:27:51,599
but you don't, the player doesn't.

1502
01:27:51,599 --> 01:27:54,969
So there are bunch of gadgets here,
but in particular here

1503
01:27:54,969 --> 01:28:01,175
there's this thing called a NAND crossover
that is a crossing NAND by another name.

1504
01:28:01,175 --> 01:28:02,844
So here if you push this block,

1505
01:28:02,844 --> 01:28:06,581
it falls down to here,
and then you're not able to get there,

1506
01:28:06,648 --> 01:28:09,150
and so you have to go this way.

1507
01:28:09,150 --> 01:28:11,152
And similarly, if you push this one out,

1508
01:28:11,152 --> 01:28:14,822
it falls here, and you
have to go to there.

1509
01:28:14,922 --> 01:28:17,191
So great, we've got a crossing
NAND, it's NP-hard.

1510
01:28:17,191 --> 01:28:19,560
You don't need the other gadgets.

1511
01:28:19,560 --> 01:28:21,896
And finally
-- those are all simplifying proofs --

1512
01:28:21,896 --> 01:28:23,665
yhis is actually a new proof.

1513
01:28:23,665 --> 01:28:28,636
It was developed the last time we taught
this class in the problem sessions.

1514
01:28:28,703 --> 01:28:31,906
So this is a pulling blocks game
called "Pull?"

1515
01:28:31,973 --> 01:28:35,243
Here you have a choice when you approach
a block, whether you pull it--

1516
01:28:35,343 --> 01:28:39,714
If you walk away from the block,
you can pull it with you or you can not.

1517
01:28:39,814 --> 01:28:43,400
In this particular navigation,
I'm always pulling when I can.

1518
01:28:43,400 --> 01:28:44,886
Here, let's start from the beginning.

1519
01:28:44,886 --> 01:28:46,788
So I have to go this way.

1520
01:28:46,788 --> 01:28:50,024
I can try to get to
the bottom left, it's not possible.

1521
01:28:50,124 --> 01:28:51,292
So I have to go to the bottom right.

1522
01:28:51,292 --> 01:28:52,293
I can't get up there.

1523
01:28:52,293 --> 01:28:55,363
If later I try to traverse this way,

1524
01:28:55,430 --> 01:28:57,598
I can get started,

1525
01:28:57,598 --> 01:29:00,401
I won't be able to get over to the right
there,

1526
01:29:00,401 --> 01:29:02,103
I get stuck.

1527
01:29:02,103 --> 01:29:02,603
So cool.

1528
01:29:02,603 --> 01:29:06,107
This is a crossing NAND,
and it tells us this

1529
01:29:06,107 --> 01:29:09,977
pulling blocks game is NP-hard too.

1530
01:29:10,078 --> 01:29:12,647
Ooh, so we saw a lot of cool things.

1531
01:29:12,647 --> 01:29:14,615
In particular

1532
01:29:14,615 --> 01:29:19,354
I think the most--
we saw a very strong form of planar 3SAT

1533
01:29:19,354 --> 01:29:23,558
which is linked planar 3SAT and various
many strengthenings of it

1534
01:29:23,624 --> 01:29:25,493
that are very powerful
for proving hardness.

1535
01:29:25,493 --> 01:29:28,863
And then we kind of abstracted them
into two

1536
01:29:28,930 --> 01:29:32,300
more specific
but even easier to apply frameworks.

1537
01:29:32,400 --> 01:29:35,403
One is the opening doors
and the other is closing doors.

1538
01:29:35,436 --> 01:29:38,973
And the idea is
you just build a couple of gadgets

1539
01:29:38,973 --> 01:29:43,211
to do some very basic properties
and you just get NP-hardness for free.

1540
01:29:43,277 --> 01:29:46,800
You don't even have to mention planar
linked sided linked planar 3SAT

1541
01:29:46,800 --> 01:29:49,283
because we've abstracted it for you.

1542
01:29:49,384 --> 01:29:52,687
So you get to choose your adventure
of where--

1543
01:29:52,754 --> 01:29:54,922
what gadgets you build for
which kind of proof.

1544
01:29:54,922 --> 01:29:59,193
But this is the beginning
of a general theory of motion

1545
01:29:59,193 --> 01:30:02,330
planning gadgets,
which we will get to in a later lecture.

1546
01:30:02,330 --> 01:30:07,101
This is just a taste of all the gadgets
that are enough to prove

1547
01:30:07,101 --> 01:30:09,270
that your problem is hard. And that's it!

1
00:00:02,202 --> 00:00:03,136
PROFESSOR: All right.

2
00:00:03,136 --> 00:00:04,404
Welcome back.

3
00:00:04,404 --> 00:00:07,173
Today is probably our
last lecture about 3SAT,

4
00:00:07,173 --> 00:00:11,177
but this time it's about
planar 3SAT, which we've

5
00:00:11,177 --> 00:00:14,814
sort of alluded to in the past.

6
00:00:20,720 --> 00:00:25,892
But planar 3SAT is a very
useful special case of 3SAT.

7
00:00:25,892 --> 00:00:31,331
It is just like
3SAT, but you also

8
00:00:31,331 --> 00:00:46,112
are told that the bipartite
graph, let's say of variables

9
00:00:46,112 --> 00:00:50,817
versus clauses is
a planar graph.

10
00:00:50,817 --> 00:00:54,854



11
00:00:54,854 --> 00:01:03,897
So the idea is you have
some vertices representing

12
00:01:03,897 --> 00:01:04,764
variables.

13
00:01:04,764 --> 00:01:06,833
v for variable here.

14
00:01:06,833 --> 00:01:09,102
And then you separately
have some clauses.

15
00:01:09,102 --> 00:01:13,339



16
00:01:13,339 --> 00:01:18,645
I guess I should really
have more variables.

17
00:01:18,645 --> 00:01:25,985
You have an edge between a
variable and a clause whenever

18
00:01:25,985 --> 00:01:27,620
that clause includes
that variable,

19
00:01:27,620 --> 00:01:29,889
either in positive
or negative form.

20
00:01:29,889 --> 00:01:31,391
So maybe some of
these edges, I'll

21
00:01:31,391 --> 00:01:33,093
draw a red to
indicate, actually,

22
00:01:33,093 --> 00:01:38,131
that's v-bar that is
included in this clause.

23
00:01:38,131 --> 00:01:46,606
So this clause is
v_i or v_j-bar or v_k.

24
00:01:46,606 --> 00:01:47,107
And so on.

25
00:01:47,107 --> 00:01:49,943
And this graph should be planar,
shouldn't have any crossings.

26
00:01:49,943 --> 00:01:54,481



27
00:01:54,481 --> 00:02:00,086
Something like that would be
a valid input to planar 3SAT.

28
00:02:00,086 --> 00:02:00,587
Question.

29
00:02:00,587 --> 00:02:04,591
AUDIENCE: So if
you're given the fact

30
00:02:04,591 --> 00:02:10,296
that a particular
bipartite graph is planar,

31
00:02:10,296 --> 00:02:14,934
is there a polynomial operation
to find a planar arrangement?

32
00:02:14,934 --> 00:02:15,568
PROFESSOR: Yes.

33
00:02:15,568 --> 00:02:17,303
Deciding whether
a graph is planar

34
00:02:17,303 --> 00:02:20,440
and finding a planar embedding
when it is is linear time.

35
00:02:20,440 --> 00:02:23,176
So here I'm just saying it's
given as a planar graph,

36
00:02:23,176 --> 00:02:24,277
but not with an embedding.

37
00:02:24,277 --> 00:02:26,146
So we're going to use the
embeddings in our reduction.

38
00:02:26,146 --> 00:02:26,880
Yeah, good point.

39
00:02:26,880 --> 00:02:28,515
So we do actually
need the ability

40
00:02:28,515 --> 00:02:31,050
to draw these things
without crossings.

41
00:02:31,050 --> 00:02:32,719
Good.

42
00:02:32,719 --> 00:02:35,889
So first thing I'm going to
do is prove that this is hard.

43
00:02:35,889 --> 00:02:38,158
And usually I don't prove
base problems are hard,

44
00:02:38,158 --> 00:02:42,095
but this is a sufficiently
sophisticated base problem.

45
00:02:42,095 --> 00:02:45,098
I mean, we do lots of
reductions from planar 3SAT.

46
00:02:45,098 --> 00:02:46,833
But the proof is
actually from 3SAT,

47
00:02:46,833 --> 00:02:48,835
and I think it's a
representative example of how

48
00:02:48,835 --> 00:02:51,471
to build a crossover in
this kind of setting,

49
00:02:51,471 --> 00:02:53,306
and what kind of
extra properties

50
00:02:53,306 --> 00:02:54,908
you can get out of it.

51
00:02:54,908 --> 00:02:57,410
So here it is.

52
00:02:57,410 --> 00:03:01,681
This is the proof
in a single diagram.

53
00:03:01,681 --> 00:03:04,317
So the notation here is that
the little green circles

54
00:03:04,317 --> 00:03:05,451
are clauses.

55
00:03:05,451 --> 00:03:08,555
And the bigger circles
are the variables.

56
00:03:08,555 --> 00:03:10,323
Purple circles are variables.

57
00:03:10,323 --> 00:03:13,426
So the idea is it in
your initial instance--

58
00:03:13,426 --> 00:03:14,928
so we're going to
reduce from 3SAT.

59
00:03:14,928 --> 00:03:17,830
We're given an
arbitrary 3SAT instance.

60
00:03:17,830 --> 00:03:20,833
So that has a corresponding
bipartite graph.

61
00:03:20,833 --> 00:03:21,901
Variables versus clauses.

62
00:03:21,901 --> 00:03:23,102
Just not planar.

63
00:03:23,102 --> 00:03:24,437
So consider any drawing.

64
00:03:24,437 --> 00:03:26,806
Actually, we'll look at a
specific drawing in a moment.

65
00:03:26,806 --> 00:03:28,808
But it's going to have
some crossings like this.

66
00:03:28,808 --> 00:03:30,877
This is a clause-variable
connection, another one.

67
00:03:30,877 --> 00:03:31,644
They cross here.

68
00:03:31,644 --> 00:03:35,081
We're going to replace that
with this picture, which

69
00:03:35,081 --> 00:03:39,185
is technically not 3SAT, because
there's a four-variable clause

70
00:03:39,185 --> 00:03:39,786
in the center.

71
00:03:39,786 --> 00:03:40,887
But we can fix that.

72
00:03:40,887 --> 00:03:42,355
That's not too hard.

73
00:03:42,355 --> 00:03:44,791
Let me first convince
you -- and this'll

74
00:03:44,791 --> 00:03:48,428
take a little while -- that
this is equivalent to this.

75
00:03:48,428 --> 00:03:50,630
So the ultimate
claim-- so there's

76
00:03:50,630 --> 00:03:54,133
four Greek letters in the
center as extra variables.

77
00:03:54,133 --> 00:03:58,671
The main claim is that
a_1 equals a_2 equals a.

78
00:03:58,671 --> 00:04:01,474
And b_1 equals b_2 equals b.

79
00:04:01,474 --> 00:04:04,310
If that's true, then, of
course, this connection

80
00:04:04,310 --> 00:04:06,512
simulates that connection.

81
00:04:06,512 --> 00:04:09,449
And that connection
simulates this connection.

82
00:04:09,449 --> 00:04:11,251
And the claim is as
long as you satisfy

83
00:04:11,251 --> 00:04:13,253
that, you can always set
the stuff in the middle

84
00:04:13,253 --> 00:04:14,387
to be happy.

85
00:04:14,387 --> 00:04:17,423
So those are the only
constraints, basically.

86
00:04:17,423 --> 00:04:23,563
So let's start with
over here and down here.

87
00:04:23,563 --> 00:04:28,635
These little sort of length two
paths-- sorry, so the coloring

88
00:04:28,635 --> 00:04:30,503
is similar to what
I did on the board.

89
00:04:30,503 --> 00:04:32,171
The red are negative
connections,

90
00:04:32,171 --> 00:04:35,575
meaning that clause has not
a and this clause has not a_2.

91
00:04:35,575 --> 00:04:38,478
And the blue connections
are positive connections.

92
00:04:38,478 --> 00:04:42,915
So when you have this sort of
alternating four-cycle here,

93
00:04:42,915 --> 00:04:45,852
you can read that
as not a or a_2,

94
00:04:45,852 --> 00:04:48,521
which is the same as
saying a implies a_2.

95
00:04:48,521 --> 00:04:50,023
And also, a_2 implies a.

96
00:04:50,023 --> 00:04:52,191
That means they
have the same value.

97
00:04:52,191 --> 00:04:53,526
a if and only if a_2.

98
00:04:53,526 --> 00:04:56,462
Or I'll just write equality
of their truth values.

99
00:04:56,462 --> 00:04:57,163
Same thing here.

100
00:04:57,163 --> 00:05:02,869
So that part is just
to get warmed up.

101
00:05:02,869 --> 00:05:05,605
Now the fun part
is on the inside.

102
00:05:05,605 --> 00:05:08,441
And I think the next
step is to think

103
00:05:08,441 --> 00:05:13,012
about these sort of
triangles in the corner.

104
00:05:13,012 --> 00:05:15,581
If you stare at them
for a little while,

105
00:05:15,581 --> 00:05:17,183
you get these kinds
of constraints.

106
00:05:17,183 --> 00:05:18,985
So let's work through this one.

107
00:05:18,985 --> 00:05:22,755
You'll see there's a certain
symmetry among what the alpha,

108
00:05:22,755 --> 00:05:24,824
beta, gamma, deltas are.

109
00:05:24,824 --> 00:05:29,696
They're going to be all
sort of all patterns of a_2

110
00:05:29,696 --> 00:05:34,534
possibly complemented, anded
with b_2 possibly complemented.

111
00:05:34,534 --> 00:05:37,403
So these are supposed to be
the four cases of a versus b.

112
00:05:37,403 --> 00:05:40,139
The trick is that some of them
are 2s and some of them are

113
00:05:40,139 --> 00:05:41,040
1s.

114
00:05:41,040 --> 00:05:43,643
So that's what makes it
a little bit annoying.

115
00:05:43,643 --> 00:05:45,745
It would be nice to make
it perfectly symmetric,

116
00:05:45,745 --> 00:05:49,916
but that would, in terms
of these labels-- but that

117
00:05:49,916 --> 00:05:51,417
would destroy planarity.

118
00:05:51,417 --> 00:05:54,420
So this is the planar version.

119
00:05:54,420 --> 00:05:56,789
So let's look at this.

120
00:05:56,789 --> 00:06:02,895
We have, for example,
not alpha or b_2.

121
00:06:02,895 --> 00:06:04,997
So alpha implies b_2.

122
00:06:04,997 --> 00:06:07,233
Also, alpha implies a_2.

123
00:06:07,233 --> 00:06:11,204
So if alpha is true, then
they must both be true.

124
00:06:11,204 --> 00:06:15,541
And conversely, I want
a_2 and b_2 to imply alpha.

125
00:06:15,541 --> 00:06:16,042
Right.

126
00:06:16,042 --> 00:06:18,211
So if these are both
true, then this guy's

127
00:06:18,211 --> 00:06:20,012
unsatisfied from
those two red clauses.

128
00:06:20,012 --> 00:06:20,947
So alpha must be true.

129
00:06:20,947 --> 00:06:21,447
Good.

130
00:06:21,447 --> 00:06:22,782
So it works in both directions.

131
00:06:22,782 --> 00:06:23,716
You get equality.

132
00:06:23,716 --> 00:06:25,885
It's exactly the same in
each of these four corners,

133
00:06:25,885 --> 00:06:28,721
just the coloring is different.

134
00:06:28,721 --> 00:06:30,323
And you're connected
to a different b.

135
00:06:30,323 --> 00:06:33,459
So here if you reflect, you're
connected to b_1 instead of b_2.

136
00:06:33,459 --> 00:06:35,461
And there's a complement
here basically

137
00:06:35,461 --> 00:06:40,400
because these two colors
switched from here.

138
00:06:40,400 --> 00:06:41,801
So it's exactly
the same argument,

139
00:06:41,801 --> 00:06:44,537
but you just imagine
flipping the value of b_1.

140
00:06:44,537 --> 00:06:46,606
And then reflect over here.

141
00:06:46,606 --> 00:06:48,541
Switch the value of the a's.

142
00:06:48,541 --> 00:06:51,511
Reflect over here, switch
the coloring of the b's.

143
00:06:51,511 --> 00:06:55,047
So that's what's
happening in the corners.

144
00:06:55,047 --> 00:06:59,419
And at this point, I had to
draw a table of all the cases.

145
00:06:59,419 --> 00:07:00,319
Oh, sorry.

146
00:07:00,319 --> 00:07:03,089
This is a little bit about
what happens in the center.

147
00:07:03,089 --> 00:07:05,691
So of course, the center clause
says that at least one of these

148
00:07:05,691 --> 00:07:06,192
is true.

149
00:07:06,192 --> 00:07:09,162
We want exactly one to be
true, because exactly one

150
00:07:09,162 --> 00:07:10,763
of these cases should happen.

151
00:07:10,763 --> 00:07:12,832
But that's a weak constraint.

152
00:07:12,832 --> 00:07:15,268
And then we also
have some constraints

153
00:07:15,268 --> 00:07:23,509
like if alpha is true, then this
is not satisfied from alpha.

154
00:07:23,509 --> 00:07:24,477
And similarly, this.

155
00:07:24,477 --> 00:07:27,079
And therefore,
beta must be false.

156
00:07:27,079 --> 00:07:29,916
So if alpha is true, then
beta and delta are false.

157
00:07:29,916 --> 00:07:31,551
I think that's
actually all you need.

158
00:07:31,551 --> 00:07:33,219
I think these might
not be necessary.

159
00:07:33,219 --> 00:07:35,988
But they make for a
nice symmetric diagram.

160
00:07:35,988 --> 00:07:37,790
And they don't hurt.

161
00:07:37,790 --> 00:07:42,829
So now I drew a table-- there
may be a more direct argument--

162
00:07:42,829 --> 00:07:46,199
of all the possible
settings a_2 and b_2,

163
00:07:46,199 --> 00:07:48,601
and what you can
derive from that.

164
00:07:48,601 --> 00:07:52,371
And everything except this
part is really easy to derive,

165
00:07:52,371 --> 00:07:55,408
assuming I can remember
what I did last night.

166
00:07:55,408 --> 00:07:58,911
So let's say a_2
and b_2 are false.

167
00:07:58,911 --> 00:08:02,482
I claim alpha is false,
because we have this equation.

168
00:08:02,482 --> 00:08:03,349
That's easy.

169
00:08:03,349 --> 00:08:05,585
And in general, you can
compute alpha directly,

170
00:08:05,585 --> 00:08:07,453
because it's just a
function of a_2 and b_2.

171
00:08:07,453 --> 00:08:08,821
It's the end function.

172
00:08:08,821 --> 00:08:10,156
So that's good.

173
00:08:10,156 --> 00:08:10,890
What about beta?

174
00:08:10,890 --> 00:08:18,931
I claim if alpha is false here,
then in this particular case--

175
00:08:18,931 --> 00:08:19,532
well, OK.

176
00:08:19,532 --> 00:08:20,900
Here's one thing we wrote.

177
00:08:20,900 --> 00:08:23,069
Alpha implies not
beta and not gamma.

178
00:08:23,069 --> 00:08:25,872
So in this last row,
if alpha is true,

179
00:08:25,872 --> 00:08:29,008
we know that beta
and gamma are false.

180
00:08:29,008 --> 00:08:29,609
That's good.

181
00:08:29,609 --> 00:08:33,479
We hope also that-- sorry
beta and delta are false.

182
00:08:33,479 --> 00:08:34,914
We hope also that
gamma is false.

183
00:08:34,914 --> 00:08:40,186
But I don't think we
need that, because if you

184
00:08:40,186 --> 00:08:44,390
look at this equation
on delta, which we know

185
00:08:44,390 --> 00:08:50,496
is 0, that must mean that
one of these two things is 0.

186
00:08:50,496 --> 00:08:52,398
But b_2 is true.

187
00:08:52,398 --> 00:08:52,899
Sorry.

188
00:08:52,899 --> 00:08:54,734
I'm going to use true
and 1 interchangeably,

189
00:08:54,734 --> 00:08:58,104
and 0 and false for
whatever reason today.

190
00:08:58,104 --> 00:09:02,408
So this needs to be
0, but this is 1.

191
00:09:02,408 --> 00:09:06,178
So this must be 0, which
means that a_1 is 1.

192
00:09:06,178 --> 00:09:09,582
And symmetrically on the top,
this is a symmetric between a

193
00:09:09,582 --> 00:09:10,082
and b.

194
00:09:10,082 --> 00:09:15,521
So up here, you
know that a_2 is 1.

195
00:09:15,521 --> 00:09:19,492
And therefore, b_1-bar must be 0.

196
00:09:19,492 --> 00:09:20,960
So b_1 must be 1.

197
00:09:20,960 --> 00:09:23,129
So we transfer the information.

198
00:09:23,129 --> 00:09:25,298
And the only other thing
to check in all these cases

199
00:09:25,298 --> 00:09:26,999
is that actually
everything is satisfied.

200
00:09:26,999 --> 00:09:28,734
But that's sort of boring.

201
00:09:28,734 --> 00:09:30,369
I want to do the
other direction, which

202
00:09:30,369 --> 00:09:32,638
is that you are
forced to communicate

203
00:09:32,638 --> 00:09:34,740
the copies of a and
the copies of b.

204
00:09:34,740 --> 00:09:35,775
So that was the last row.

205
00:09:35,775 --> 00:09:37,176
I think the first
row should also

206
00:09:37,176 --> 00:09:40,446
be easy for a slightly
different reason.

207
00:09:40,446 --> 00:09:44,050
So a_2 and b_2 are false.

208
00:09:44,050 --> 00:09:47,320



209
00:09:47,320 --> 00:09:48,387
Alpha is false.

210
00:09:48,387 --> 00:09:49,322
Beta is false.

211
00:09:49,322 --> 00:09:53,292
That's as far as
we've gotten so far.

212
00:09:53,292 --> 00:09:54,827
Let's see.

213
00:09:54,827 --> 00:10:00,933
Delta is a_1-bar and b_2, right?

214
00:10:00,933 --> 00:10:04,270



215
00:10:04,270 --> 00:10:04,770
Right.

216
00:10:04,770 --> 00:10:08,307
Because b_2 is false, we
know that delta is false.

217
00:10:08,307 --> 00:10:10,309
So it doesn't matter what a_1 is.

218
00:10:10,309 --> 00:10:12,144
So it's sort of the
reverse direction.

219
00:10:12,144 --> 00:10:15,982
And similarly, we
should be able to-- oh,

220
00:10:15,982 --> 00:10:18,718
because from this, we know
at least one of them is true,

221
00:10:18,718 --> 00:10:20,453
at least one of the
Greek letters is true,

222
00:10:20,453 --> 00:10:21,887
then we've got three down.

223
00:10:21,887 --> 00:10:23,489
So it must be
gamma that is true.

224
00:10:23,489 --> 00:10:24,991
And once you know
gamma is true, you

225
00:10:24,991 --> 00:10:26,726
know exactly what a_1 and b_1 are.

226
00:10:26,726 --> 00:10:28,995
So that's another good case.

227
00:10:28,995 --> 00:10:30,429
These are slightly
more annoying,

228
00:10:30,429 --> 00:10:32,365
at least as far as I could see.

229
00:10:32,365 --> 00:10:34,567
Maybe there's a
cleaner argument.

230
00:10:34,567 --> 00:10:36,302
So let's say they're
symmetric, though.

231
00:10:36,302 --> 00:10:38,137
So let's do the second row.

232
00:10:38,137 --> 00:10:40,473
So a_2 is 0.

233
00:10:40,473 --> 00:10:42,708
b_2 is 0.

234
00:10:42,708 --> 00:10:45,211
I think just like
this argument, we

235
00:10:45,211 --> 00:10:49,949
get that beta is 0,
because beta involves a_2.

236
00:10:49,949 --> 00:10:54,487
We know a_2 is 0, so beta
equals 0, just like this case,

237
00:10:54,487 --> 00:10:55,488
actually.

238
00:10:55,488 --> 00:10:55,988
OK.

239
00:10:55,988 --> 00:10:57,957
So that's good for that.

240
00:10:57,957 --> 00:11:00,092
I think it's harder
to figure out delta.

241
00:11:00,092 --> 00:11:03,195



242
00:11:03,195 --> 00:11:04,964
Or here's one way to argue it.

243
00:11:04,964 --> 00:11:06,666
Suppose that gamma were 1.

244
00:11:06,666 --> 00:11:11,170
It should be 0, because
gamma's supposed to be only 1

245
00:11:11,170 --> 00:11:12,972
in this situation.

246
00:11:12,972 --> 00:11:19,779
If it's 1, then I claim that
a_1 and b_1 must be 0.

247
00:11:19,779 --> 00:11:22,048
That's from this equation.

248
00:11:22,048 --> 00:11:24,650
And then we should
get a contradiction.

249
00:11:24,650 --> 00:11:26,018
Help me find the contradiction.

250
00:11:26,018 --> 00:11:27,987
AUDIENCE: Delta becomes 1.

251
00:11:27,987 --> 00:11:29,555
PROFESSOR: Delta becomes 1.

252
00:11:29,555 --> 00:11:32,391
AUDIENCE: And then the clause
between gamma and delta is--

253
00:11:32,391 --> 00:11:34,026
PROFESSOR: And then
this is unhappy.

254
00:11:34,026 --> 00:11:34,527
Good.

255
00:11:34,527 --> 00:11:35,027
OK.

256
00:11:35,027 --> 00:11:38,431
So we do need a couple other
constraints like this one.

257
00:11:38,431 --> 00:11:38,931
Cool.

258
00:11:38,931 --> 00:11:40,099
So that's the idea.

259
00:11:40,099 --> 00:11:42,201
Therefore, gamma is 0.

260
00:11:42,201 --> 00:11:45,171
And then by that,
delta must be 1.

261
00:11:45,171 --> 00:11:46,906
And then we're happy again.

262
00:11:46,906 --> 00:11:47,540
OK?

263
00:11:47,540 --> 00:11:50,976
So that's the idea
in a nutshell.

264
00:11:50,976 --> 00:11:53,512
There's maybe other
ways to see it.

265
00:11:53,512 --> 00:11:57,416
And this is an old proof
by Lichtenstein in 1982.

266
00:11:57,416 --> 00:11:58,217
It's a cool paper.

267
00:11:58,217 --> 00:11:59,485
It has a lot of results in it.

268
00:11:59,485 --> 00:12:01,620
We'll be covering a
few different results.

269
00:12:01,620 --> 00:12:04,790
But at this point,
we have shown this.

270
00:12:04,790 --> 00:12:06,826
You just apply this
to each crossing.

271
00:12:06,826 --> 00:12:10,596
Eventually you get a
planar bipartite graph

272
00:12:10,596 --> 00:12:13,766
that's satisfiable if and only
if the original is. So planar

273
00:12:13,766 --> 00:12:15,634
3SAT is NP-hard.

274
00:12:15,634 --> 00:12:16,302
Question?

275
00:12:16,302 --> 00:12:17,937
So many questions.

276
00:12:17,937 --> 00:12:19,638
AUDIENCE: I guess this
is probably silly.

277
00:12:19,638 --> 00:12:22,041
But didn't we say that in
3SAT, every clause

278
00:12:22,041 --> 00:12:23,209
had to have three variables.

279
00:12:23,209 --> 00:12:23,542
PROFESSOR: Yes.

280
00:12:23,542 --> 00:12:23,909
OK.

281
00:12:23,909 --> 00:12:24,443
Right.

282
00:12:24,443 --> 00:12:25,377
AUDIENCE: Two or four.

283
00:12:25,377 --> 00:12:28,114
PROFESSOR: I cheated
a little bit here.

284
00:12:28,114 --> 00:12:28,614
OK.

285
00:12:28,614 --> 00:12:29,515
Yeah.

286
00:12:29,515 --> 00:12:30,182
Some have two.

287
00:12:30,182 --> 00:12:32,985



288
00:12:32,985 --> 00:12:37,289
So for that, I need to be able
to construct the value false.

289
00:12:37,289 --> 00:12:38,457
And some have four.

290
00:12:38,457 --> 00:12:42,928
The four, I believe
the claim is you

291
00:12:42,928 --> 00:12:45,931
can take a little
clause like this

292
00:12:45,931 --> 00:12:53,806
and convert it into a clause
with another variable.

293
00:12:53,806 --> 00:12:56,208
AUDIENCE: And one of
the two edges connecting

294
00:12:56,208 --> 00:12:57,309
the variable is negated.

295
00:12:57,309 --> 00:12:58,010
PROFESSOR: Right.

296
00:12:58,010 --> 00:13:00,613



297
00:13:00,613 --> 00:13:01,180
Like this?

298
00:13:01,180 --> 00:13:07,219



299
00:13:07,219 --> 00:13:10,489
So the claim is this four-way
clause, the 4SAT clause

300
00:13:10,489 --> 00:13:13,058
is equivalent to these
two 3SAT clauses.

301
00:13:13,058 --> 00:13:14,693
Let's call this new variable x.

302
00:13:14,693 --> 00:13:22,001



303
00:13:22,001 --> 00:13:23,769
So the idea is x is
going to represent

304
00:13:23,769 --> 00:13:27,139
whether the left side satisfies
the clause or the right side

305
00:13:27,139 --> 00:13:29,975
satisfies the clause.

306
00:13:29,975 --> 00:13:32,545
If x is 1, then it
satisfies this for free.

307
00:13:32,545 --> 00:13:34,914
But it doesn't satisfy this
one, so at least one of these

308
00:13:34,914 --> 00:13:36,949
must be satisfied.

309
00:13:36,949 --> 00:13:41,954
On the other hand, if x is 0,
then it satisfies this one.

310
00:13:41,954 --> 00:13:44,390
And so at least one of these
two should be satisfied.

311
00:13:44,390 --> 00:13:44,890
OK?

312
00:13:44,890 --> 00:13:50,863
So that's a reduction from
4SAT to 3SAT, so to speak.

313
00:13:50,863 --> 00:13:55,067
Now, I didn't create
any degree-two clauses,

314
00:13:55,067 --> 00:13:57,536
but I have tons of degree-two
clauses over there.

315
00:13:57,536 --> 00:13:59,271
AUDIENCE: Just use
parallel edges.

316
00:13:59,271 --> 00:14:00,739
PROFESSOR: Just
use parallel edges.

317
00:14:00,739 --> 00:14:06,478
So you could just repeat the
same variable in the clause

318
00:14:06,478 --> 00:14:07,813
multiple times.

319
00:14:07,813 --> 00:14:08,981
That sounds good.

320
00:14:08,981 --> 00:14:11,817
I don't know if there's an easy
way to avoid multiple edges.

321
00:14:11,817 --> 00:14:13,052
I think it's a little tricky.

322
00:14:13,052 --> 00:14:15,855
You can't construct false
in the CircuitSAT sense,

323
00:14:15,855 --> 00:14:19,024
because everything you
build should be satisfiable.

324
00:14:19,024 --> 00:14:20,492
So you have to be
a little careful.

325
00:14:20,492 --> 00:14:23,429
But it might be possible
to pair them up,

326
00:14:23,429 --> 00:14:30,269
because there should be an
even number of those guys.

327
00:14:30,269 --> 00:14:32,705
And so maybe you pair them up
and connect them in some way.

328
00:14:32,705 --> 00:14:34,740
But let's just allow
multiple edges here.

329
00:14:34,740 --> 00:14:36,208
Yeah?

330
00:14:36,208 --> 00:14:38,143
AUDIENCE: In the original
instance of 3SAT,

331
00:14:38,143 --> 00:14:43,482
does it allow clauses
with two variables?

332
00:14:43,482 --> 00:14:44,516
Before getting planar?

333
00:14:44,516 --> 00:14:45,184
PROFESSOR: Yeah.

334
00:14:45,184 --> 00:14:49,054
I mean, in general, this would
work for any kind of SAT,

335
00:14:49,054 --> 00:14:50,823
any kind of CNF-SAT.

336
00:14:50,823 --> 00:14:54,693
We're not relying on three-ness
at all in this picture.

337
00:14:54,693 --> 00:14:56,729
But it's not going to
split things up, of course.

338
00:14:56,729 --> 00:14:58,230
AUDIENCE: But the
definition of 3SAT

339
00:14:58,230 --> 00:15:00,499
has three distinct
variables in each clause.

340
00:15:00,499 --> 00:15:02,234
PROFESSOR: There are
a couple definitions.

341
00:15:02,234 --> 00:15:05,404
One has exactly
three, but we never, I

342
00:15:05,404 --> 00:15:07,606
think, specify that
they are distinct.

343
00:15:07,606 --> 00:15:09,575
I think that is hard when
they're all distinct.

344
00:15:09,575 --> 00:15:13,212
But I don't know the
reduction offhand.

345
00:15:13,212 --> 00:15:15,481
I think the way we define
it is there's exactly three,

346
00:15:15,481 --> 00:15:18,250
but we didn't say
any uniqueness.

347
00:15:18,250 --> 00:15:19,118
So let's say that.

348
00:15:19,118 --> 00:15:21,153
And then we're still
happy here, because we

349
00:15:21,153 --> 00:15:23,989
can duplicate variables.

350
00:15:23,989 --> 00:15:24,790
Yeah?

351
00:15:24,790 --> 00:15:30,396
AUDIENCE: Why did we include the
a equals a_2, and b equals b_2?

352
00:15:30,396 --> 00:15:32,631
PROFESSOR: I think it's
for the next slide.

353
00:15:32,631 --> 00:15:35,334
[LAUGHTER]

354
00:15:35,334 --> 00:15:41,240
The next claim is that not only
is that bipartite graph planar,

355
00:15:41,240 --> 00:15:44,843
but it also remains planar if
we connect all the variables

356
00:15:44,843 --> 00:15:58,424
together in a cycle.

357
00:15:58,424 --> 00:16:11,236



358
00:16:11,236 --> 00:16:13,439
So let's say we number
the variables 1 through n.

359
00:16:13,439 --> 00:16:15,741
It doesn't matter
how you number them.

360
00:16:15,741 --> 00:16:17,609
Well, in a certain sense.

361
00:16:17,609 --> 00:16:21,680
You can restrict to
instances of 3SAT

362
00:16:21,680 --> 00:16:28,420
that this cycle plus the
variable clause adjacency graph

363
00:16:28,420 --> 00:16:31,824
is together planar.

364
00:16:31,824 --> 00:16:32,791
OK?

365
00:16:32,791 --> 00:16:38,630
So that's less clear here.

366
00:16:38,630 --> 00:16:40,165
But let me prove it.

367
00:16:40,165 --> 00:16:43,502
This is proved in
the same paper.

368
00:16:43,502 --> 00:16:48,907
So here's a top-level diagram
of what we're trying to do.

369
00:16:48,907 --> 00:16:50,642
So we have clauses on one hand.

370
00:16:50,642 --> 00:16:52,311
Let's put them
all on the y-axis.

371
00:16:52,311 --> 00:16:54,246
We have variables
on the other hand.

372
00:16:54,246 --> 00:16:57,850
These are the original variables
in the original 3SAT instance.

373
00:16:57,850 --> 00:16:59,551
Put them on the x-axis.

374
00:16:59,551 --> 00:17:02,054
Then draw all the connections
in the bipartite graph.

375
00:17:02,054 --> 00:17:06,925
And furthermore, draw this
cycle on the vertices down here.

376
00:17:06,925 --> 00:17:07,826
OK?

377
00:17:07,826 --> 00:17:09,728
And obviously, we
put them in the order

378
00:17:09,728 --> 00:17:10,963
that they appear in the cycle.

379
00:17:10,963 --> 00:17:14,466
Otherwise we're making
our lives harder.

380
00:17:14,466 --> 00:17:16,301
And here is that
crossover gadget.

381
00:17:16,301 --> 00:17:18,971
This is how it's
originally drawn.

382
00:17:18,971 --> 00:17:22,074
In this case, it's already
been expanded in the center

383
00:17:22,074 --> 00:17:23,308
into that picture over there.

384
00:17:23,308 --> 00:17:26,945
This is where I got
that reduction from.

385
00:17:26,945 --> 00:17:28,881
And then there's no
color here, but you'll

386
00:17:28,881 --> 00:17:34,286
notice the curvy line is an
attempt to connect together

387
00:17:34,286 --> 00:17:36,688
all of the variables that
appear in the crossover

388
00:17:36,688 --> 00:17:42,895
gadget in linear order without
introducing any crossings.

389
00:17:42,895 --> 00:17:48,267
So that diagram is still planar
when we add all of those edges.

390
00:17:48,267 --> 00:17:51,770
And so what this says
is that if we-- We're

391
00:17:51,770 --> 00:17:54,073
trying to build a
global cycle that

392
00:17:54,073 --> 00:17:55,441
connects all the variables.

393
00:17:55,441 --> 00:17:57,409
So obviously, we have
this for these variables,

394
00:17:57,409 --> 00:17:59,912
but we need to add
into this cycle

395
00:17:59,912 --> 00:18:02,648
all the variables that appear
in all these crossings.

396
00:18:02,648 --> 00:18:05,517
And so what this says is if
we are coming in either here

397
00:18:05,517 --> 00:18:08,554
or here into a_1, we
can follow this path

398
00:18:08,554 --> 00:18:12,391
and then leave either
here or here on a_2.

399
00:18:12,391 --> 00:18:14,093
OK?

400
00:18:14,093 --> 00:18:15,861
And because the diagram
is symmetric, also,

401
00:18:15,861 --> 00:18:20,099
if you're coming into
b_1, you can end up in b_2.

402
00:18:20,099 --> 00:18:24,570
And I'm guessing this
is why we separate b_2.

403
00:18:24,570 --> 00:18:28,373
The reason we separated
b_2 from b in general

404
00:18:28,373 --> 00:18:30,676
is to basically add
this connection,

405
00:18:30,676 --> 00:18:34,446
so we can separate this
gadget from this gadget.

406
00:18:34,446 --> 00:18:37,349
So just showing that we
can copy and extend things.

407
00:18:37,349 --> 00:18:39,151
It may not be necessary,
but it definitely

408
00:18:39,151 --> 00:18:40,819
matches this diagram.

409
00:18:40,819 --> 00:18:41,320
OK.

410
00:18:41,320 --> 00:18:43,655
So this diagram is
this diagram, but where

411
00:18:43,655 --> 00:18:47,693
every intersection plus a few
extra places, like over here,

412
00:18:47,693 --> 00:18:49,061
we add these little diamonds.

413
00:18:49,061 --> 00:18:51,730
The diamonds
indicate that gadget.

414
00:18:51,730 --> 00:18:55,734
Then sorry there's no
color, but in curved lines

415
00:18:55,734 --> 00:18:58,437
is the attempt to connect
all the variables together

416
00:18:58,437 --> 00:18:59,738
in one single path.

417
00:18:59,738 --> 00:19:00,405
Question.

418
00:19:00,405 --> 00:19:02,608
AUDIENCE: So what are the
extra crossover gadgets

419
00:19:02,608 --> 00:19:04,042
that don't cross anything over?

420
00:19:04,042 --> 00:19:06,778
PROFESSOR: They're just
to do this path thing.

421
00:19:06,778 --> 00:19:08,780
So what are they?

422
00:19:08,780 --> 00:19:10,349
I mean, they are
exactly this gadget,

423
00:19:10,349 --> 00:19:11,984
just there's no
connection on the left.

424
00:19:11,984 --> 00:19:14,820
AUDIENCE: So they're a crossover
of the path on the variables.

425
00:19:14,820 --> 00:19:15,787
Is that right?

426
00:19:15,787 --> 00:19:16,054
PROFESSOR: Yeah.

427
00:19:16,054 --> 00:19:17,689
So instead of going
straight here,

428
00:19:17,689 --> 00:19:20,159
you just put a crossover
gadget in the middle.

429
00:19:20,159 --> 00:19:21,426
You can still go through.

430
00:19:21,426 --> 00:19:23,762
You're copying some
arbitrary information here

431
00:19:23,762 --> 00:19:25,531
to some arbitrary
information here.

432
00:19:25,531 --> 00:19:27,966
So you don't preserve the
number of solutions, let's say.

433
00:19:27,966 --> 00:19:30,469
But who cares?

434
00:19:30,469 --> 00:19:33,972
The reason for that is so
that we can take this path,

435
00:19:33,972 --> 00:19:36,175
connect to this vertex,
and then get out over here.

436
00:19:36,175 --> 00:19:38,944
AUDIENCE: Yeah, that's
what I meant by crossing.

437
00:19:38,944 --> 00:19:43,582
PROFESSOR: So that we can
do this kind of loop thing.

438
00:19:43,582 --> 00:19:45,017
So how do we follow the path?

439
00:19:45,017 --> 00:19:47,419
I mean, we basically do
it in scan-line order.

440
00:19:47,419 --> 00:19:50,189
It's like some
printers used to do

441
00:19:50,189 --> 00:19:51,790
this, where they
print back and forth,

442
00:19:51,790 --> 00:19:53,292
left and right, line printers.

443
00:19:53,292 --> 00:19:55,494
So we come in here.

444
00:19:55,494 --> 00:19:58,430
I don't know quite why they draw
it coming in the middle here.

445
00:19:58,430 --> 00:20:00,899
But it's essentially
coming to this vertex.

446
00:20:00,899 --> 00:20:03,569
Then ending on this
vertex on the left side.

447
00:20:03,569 --> 00:20:08,006
Then going into this vertex,
which brings us to here.

448
00:20:08,006 --> 00:20:09,174
Let's say coming on the top.

449
00:20:09,174 --> 00:20:10,142
Doesn't matter.

450
00:20:10,142 --> 00:20:12,611
And then we go to the right
till we get to the end.

451
00:20:12,611 --> 00:20:15,614
Here we add an extra crossover,
so we can basically cross over

452
00:20:15,614 --> 00:20:17,449
this line with our path.

453
00:20:17,449 --> 00:20:19,351
And add another one.

454
00:20:19,351 --> 00:20:22,087
And whenever we visit an
intersection, we can just go.

455
00:20:22,087 --> 00:20:23,989
And then we go to the
next line and so on.

456
00:20:23,989 --> 00:20:25,090
We clear?

457
00:20:25,090 --> 00:20:28,060
Then at the very end, we're
either on the right or left,

458
00:20:28,060 --> 00:20:29,928
depending on parity.

459
00:20:29,928 --> 00:20:31,897
Probably we want
to be on the right.

460
00:20:31,897 --> 00:20:34,499
So if we're on the left, we'll
just add extra crossovers here

461
00:20:34,499 --> 00:20:35,867
to end up on the right.

462
00:20:35,867 --> 00:20:38,837
Then we can go through all
these variables in reverse order

463
00:20:38,837 --> 00:20:40,539
and then come back up here.

464
00:20:40,539 --> 00:20:45,177
So that will be one non-crossing
path in this planar embedding.

465
00:20:45,177 --> 00:20:48,680
Therefore, we've
constructed a new formula

466
00:20:48,680 --> 00:20:51,016
where the bipartite graph
plus the path through all

467
00:20:51,016 --> 00:20:52,718
the variables is planar.

468
00:20:52,718 --> 00:20:55,721
And so this new version
of planar 3SAT is hard.

469
00:20:55,721 --> 00:20:58,523
This version is usually
called planar 3SAT, but if you

470
00:20:58,523 --> 00:20:59,891
want to distinguish
it, you could

471
00:20:59,891 --> 00:21:04,396
call it planar 3SAT with a
variable cycle or something.

472
00:21:04,396 --> 00:21:05,631
Yeah?

473
00:21:05,631 --> 00:21:07,799
AUDIENCE: Why is it
that we care about this?

474
00:21:07,799 --> 00:21:08,900
PROFESSOR: Why do you care?

475
00:21:08,900 --> 00:21:10,035
Aha.

476
00:21:10,035 --> 00:21:12,170
We'll get to that
a little bit later.

477
00:21:12,170 --> 00:21:14,539
Well, we've seen a lot
of proofs, actually,

478
00:21:14,539 --> 00:21:17,976
where you visit a variable
and make a choice,

479
00:21:17,976 --> 00:21:21,346
and then visit the next variable
and make a choice, and so on.

480
00:21:21,346 --> 00:21:24,283
And when you make a choice, you
go visit the clauses and things

481
00:21:24,283 --> 00:21:25,017
like that.

482
00:21:25,017 --> 00:21:27,653
So when we're reducing
from planar 3SAT,

483
00:21:27,653 --> 00:21:30,555
it's often handy to have
this traversable path.

484
00:21:30,555 --> 00:21:34,993
If we have a robot or
somebody moving around,

485
00:21:34,993 --> 00:21:39,097
then we can guarantee
planarity of that motion still.

486
00:21:39,097 --> 00:21:40,966
And the connections
between the variables

487
00:21:40,966 --> 00:21:42,267
don't have to cross anything.

488
00:21:42,267 --> 00:21:45,537
In general, our goal here is
to avoid crossover gadgets

489
00:21:45,537 --> 00:21:48,740
when we're reducing from
3SAT to something else.

490
00:21:48,740 --> 00:21:51,576
So this gives you kind
of a generic crossover,

491
00:21:51,576 --> 00:21:54,079
so that as long as you can
do variables and clauses more

492
00:21:54,079 --> 00:21:57,316
or less independently and
you can build connections,

493
00:21:57,316 --> 00:21:59,818
then you don't have to worry
about the connections crossing.

494
00:21:59,818 --> 00:22:00,385
Yeah?

495
00:22:00,385 --> 00:22:02,421
AUDIENCE: When you're
given this bipartite graph,

496
00:22:02,421 --> 00:22:06,992
how do you actually tell whether
an edge is negated or not?

497
00:22:06,992 --> 00:22:10,429



498
00:22:10,429 --> 00:22:13,465
PROFESSOR: You're still
given a formula, let's say.

499
00:22:13,465 --> 00:22:16,201
And then you're just
told this extra fact

500
00:22:16,201 --> 00:22:18,603
that the bipartite graph plus
this path and the variables,

501
00:22:18,603 --> 00:22:21,373
in that order, is planar.

502
00:22:21,373 --> 00:22:23,375
AUDIENCE: The
variable nodes, you

503
00:22:23,375 --> 00:22:25,777
have one for every variable
and its first negation?

504
00:22:25,777 --> 00:22:26,545
Or do you just--

505
00:22:26,545 --> 00:22:27,212
PROFESSOR: No.

506
00:22:27,212 --> 00:22:28,113
Sorry.

507
00:22:28,113 --> 00:22:31,550
There's only vertices for
variables and for clauses,

508
00:22:31,550 --> 00:22:33,618
not for literals.

509
00:22:33,618 --> 00:22:36,221
But the next version is
actually about that case.

510
00:22:36,221 --> 00:22:40,392



511
00:22:40,392 --> 00:22:49,101
The next one is-- So the
idea, if you were just

512
00:22:49,101 --> 00:22:50,669
given the bipartite
graph, you'd have

513
00:22:50,669 --> 00:22:53,338
to be told the coloring
of the edges here

514
00:22:53,338 --> 00:22:55,173
to know which literal
you're talking about.

515
00:22:55,173 --> 00:22:57,743



516
00:22:57,743 --> 00:23:01,079
But also, the problem
remains planar

517
00:23:01,079 --> 00:23:18,196
if we use literals
instead of variables.

518
00:23:18,196 --> 00:23:21,466
So if you were wondering
about that version,

519
00:23:21,466 --> 00:23:24,035
that will also be planar.

520
00:23:24,035 --> 00:23:25,871
It doesn't follow immediately.

521
00:23:25,871 --> 00:23:29,007
But the idea is
suppose we have v_i.

522
00:23:29,007 --> 00:23:31,410
So in the regular
bipartite graph,

523
00:23:31,410 --> 00:23:35,347
we have some positive edges and
we have some negative edges.

524
00:23:35,347 --> 00:23:44,489
Instead, I want to represent
that as v_i and v_i-bar.

525
00:23:44,489 --> 00:23:46,658
And the positive
connections are over here.

526
00:23:46,658 --> 00:23:48,293
The negative connections
are over here.

527
00:23:48,293 --> 00:23:49,461
Now I don't need
the two coloring,

528
00:23:49,461 --> 00:23:51,730
because I have the labels
to tell me which is which.

529
00:23:51,730 --> 00:23:54,232
And furthermore, I can add
this edge connecting them.

530
00:23:54,232 --> 00:23:55,367
That will still be planar.

531
00:23:55,367 --> 00:23:58,470
So just split v_i into two parts.

532
00:23:58,470 --> 00:24:02,073
What this tells me is that
the positive connections to v_i

533
00:24:02,073 --> 00:24:04,276
appear as a contiguous chunk.

534
00:24:04,276 --> 00:24:07,045
And the negative connections
appear as a contiguous chunk.

535
00:24:07,045 --> 00:24:09,414
So it's not like alternating
white, red, white, red.

536
00:24:09,414 --> 00:24:13,185
So far, it is if you
look at the reduction.

537
00:24:13,185 --> 00:24:15,687
But we can fix that.

538
00:24:15,687 --> 00:24:16,188
OK.

539
00:24:16,188 --> 00:24:19,124



540
00:24:19,124 --> 00:24:26,932
So I just want to add, with an
edge between the x_i and x_i-bar.

541
00:24:26,932 --> 00:24:27,432
Yeah?

542
00:24:27,432 --> 00:24:29,434
AUDIENCE: When you say you
add an edge between them,

543
00:24:29,434 --> 00:24:30,402
what does that mean?

544
00:24:30,402 --> 00:24:31,803
Because all the
edges are supposed

545
00:24:31,803 --> 00:24:33,705
to be in between
literals and clauses.

546
00:24:33,705 --> 00:24:36,208
PROFESSOR: Well, I mean, the
graph already wasn't bipartite.

547
00:24:36,208 --> 00:24:38,910



548
00:24:38,910 --> 00:24:42,013
We start with a bipartite graph
between variables and literals.

549
00:24:42,013 --> 00:24:44,182
Then we also add the
edges between variables

550
00:24:44,182 --> 00:24:45,250
and their complements.

551
00:24:45,250 --> 00:24:50,789
And then we also add a cycle
among all the variables,

552
00:24:50,789 --> 00:24:54,493
among all the
literals, let's say.

553
00:24:54,493 --> 00:24:57,329
So I guess this could be part
of the cycle, for example.

554
00:24:57,329 --> 00:25:00,465
And that graph, which is not
bipartite, must be planar.

555
00:25:00,465 --> 00:25:01,399
That's the constraint.

556
00:25:01,399 --> 00:25:04,569
The claim is that all
such problems are NP-hard.

557
00:25:04,569 --> 00:25:08,173
In general, we want to
make as small a problem

558
00:25:08,173 --> 00:25:10,809
as we can, as special a
case as we can NP-hard,

559
00:25:10,809 --> 00:25:12,277
because then we're reducing.

560
00:25:12,277 --> 00:25:14,980
We have more structure
that we get to exploit.

561
00:25:14,980 --> 00:25:18,783
This is a special case of this
is a special case of this.

562
00:25:18,783 --> 00:25:22,153
So the more we can
confine it, the better.

563
00:25:22,153 --> 00:25:23,054
Cool.

564
00:25:23,054 --> 00:25:25,390
So this is proved also in
the Lichtenstein paper.

565
00:25:25,390 --> 00:25:27,826
Although, we'll see a
cleaner proof in a moment,

566
00:25:27,826 --> 00:25:29,794
so I won't cover this
in too much detail.

567
00:25:29,794 --> 00:25:34,132
But the idea is this.

568
00:25:34,132 --> 00:25:38,136
So we're taking
each variable, we're

569
00:25:38,136 --> 00:25:40,672
replacing it with a
big cycle like this.

570
00:25:40,672 --> 00:25:42,741
I think it's the same kind
of trick as over here.

571
00:25:42,741 --> 00:25:46,745
It doesn't matter.

572
00:25:46,745 --> 00:25:50,215
All these a's should be the
same or sort of alternating.

573
00:25:50,215 --> 00:25:51,850
And we're connecting
the negative side--

574
00:25:51,850 --> 00:25:54,419
So this is really two
vertices connected by an edge,

575
00:25:54,419 --> 00:25:56,154
but I draw it like
that to make clear

576
00:25:56,154 --> 00:26:00,959
that that represents the same
variable, two literals of it.

577
00:26:00,959 --> 00:26:03,395
And do this thing.

578
00:26:03,395 --> 00:26:06,164
And then this is the path.

579
00:26:06,164 --> 00:26:09,768
So suppose the path used
to go through this way.

580
00:26:09,768 --> 00:26:12,337
Then the path now bisects.

581
00:26:12,337 --> 00:26:14,973
And you see that all
of the positive copies

582
00:26:14,973 --> 00:26:19,110
are on one side, and negative
copies are on the other side.

583
00:26:19,110 --> 00:26:21,346
That's the idea.

584
00:26:21,346 --> 00:26:23,415
We will see another proof
of a stronger statement,

585
00:26:23,415 --> 00:26:25,750
so I think let's
not worry about this

586
00:26:25,750 --> 00:26:28,353
too much unless
there are questions.

587
00:26:28,353 --> 00:26:33,758



588
00:26:33,758 --> 00:26:35,026
Here's the stronger statement.

589
00:26:35,026 --> 00:27:19,471



590
00:27:19,471 --> 00:27:26,478
So in general, the
variable cycle--

591
00:27:26,478 --> 00:27:29,314
So I'm going to not subdivide
into literals for the moment.

592
00:27:29,314 --> 00:27:32,684
But we could put that back.

593
00:27:32,684 --> 00:27:35,620
So here's the variable cycle.

594
00:27:35,620 --> 00:27:37,856
This decomposes the
plane at two regions--

595
00:27:37,856 --> 00:27:39,491
the interior and the exterior.

596
00:27:39,491 --> 00:27:40,892
Or course, I could
flip the edge,

597
00:27:40,892 --> 00:27:42,694
and it doesn't matter which
one's interior and exterior.

598
00:27:42,694 --> 00:27:44,262
But there are two regions.

599
00:27:44,262 --> 00:27:48,099
And what I'm going to
require is that every clause

600
00:27:48,099 --> 00:27:53,204
that I draw here should have
entirely positive connections

601
00:27:53,204 --> 00:27:54,606
on this side.

602
00:27:54,606 --> 00:27:58,810
And every clause
that I draw out here

603
00:27:58,810 --> 00:28:01,713
should have entirely
negative connections.

604
00:28:01,713 --> 00:28:04,649



605
00:28:04,649 --> 00:28:05,150
OK?

606
00:28:05,150 --> 00:28:08,720
This is monotone 3SAT again.

607
00:28:08,720 --> 00:28:10,922
So this implies monotone.

608
00:28:10,922 --> 00:28:14,592



609
00:28:14,592 --> 00:28:15,894
We know monotone 3SAT is hard.

610
00:28:15,894 --> 00:28:17,729
Now we're claiming that
planar monotone 3SAT

611
00:28:17,729 --> 00:28:22,167
is hard when all the
positive clauses are

612
00:28:22,167 --> 00:28:23,702
on one side of the
variable cycle,

613
00:28:23,702 --> 00:28:25,837
and all the negative clauses
are on the other side.

614
00:28:25,837 --> 00:28:28,940
This is really helpful.

615
00:28:28,940 --> 00:28:30,608
I haven't yet given
this problem a name,

616
00:28:30,608 --> 00:28:32,744
because it has a name that
uses another word, which

617
00:28:32,744 --> 00:28:34,446
I should first introduce.

618
00:28:34,446 --> 00:28:37,449
So that's the next page.

619
00:28:37,449 --> 00:28:48,026



620
00:28:48,026 --> 00:28:52,731
That word is
"rectilinear". So this

621
00:28:52,731 --> 00:28:54,999
is a relatively simple
modification to what we

622
00:28:54,999 --> 00:28:57,535
have already.

623
00:28:57,535 --> 00:29:01,172
I want the variables
to live on the x-axis.

624
00:29:01,172 --> 00:29:04,075
You can think of them
as horizontal segments

625
00:29:04,075 --> 00:29:05,310
on the x-axis.

626
00:29:05,310 --> 00:29:07,912
I prefer this drawing.

627
00:29:07,912 --> 00:29:10,949
So imagine each variable is like
a little horizontal segment,

628
00:29:10,949 --> 00:29:12,984
or in this case, a box.

629
00:29:12,984 --> 00:29:15,487
And the clauses are
horizontal segments.

630
00:29:15,487 --> 00:29:18,022
And then they're connected
by vertical segments

631
00:29:18,022 --> 00:29:20,458
between the clause
and the variable.

632
00:29:20,458 --> 00:29:24,162
And all of the clauses
that are above the x-axis

633
00:29:24,162 --> 00:29:25,697
should be all positive.

634
00:29:25,697 --> 00:29:27,499
All the clauses that
are below the x-axis

635
00:29:27,499 --> 00:29:29,000
should be all negative.

636
00:29:29,000 --> 00:29:31,236
That would be planar
monotone rectilinear 3SAT,

637
00:29:31,236 --> 00:29:32,403
and I jumped the gun.

638
00:29:32,403 --> 00:29:34,172
Planar rectilinear has
no such constraint.

639
00:29:34,172 --> 00:29:36,641
Each of these could be
positive or negative.

640
00:29:36,641 --> 00:29:37,475
OK.

641
00:29:37,475 --> 00:29:42,647
So variables are segments.

642
00:29:42,647 --> 00:29:43,148
All right.

643
00:29:43,148 --> 00:29:47,185
So each variable is a
segment on the x-axis.

644
00:29:47,185 --> 00:29:50,121



645
00:29:50,121 --> 00:30:00,665
And each clause is another
horizontal segment,

646
00:30:00,665 --> 00:30:08,072
plus vertical connections
to the three variables

647
00:30:08,072 --> 00:30:10,909
that it includes in
positive or negative form.

648
00:30:10,909 --> 00:30:16,080



649
00:30:16,080 --> 00:30:16,781
OK.

650
00:30:16,781 --> 00:30:30,695
And then planar monotone
rectilinear 3SAT

651
00:30:30,695 --> 00:30:33,531
is a special case
of monotone 3SAT,

652
00:30:33,531 --> 00:30:45,877
where all positive
clauses are above the line

653
00:30:45,877 --> 00:30:51,449
and conversely-- above x-axis.

654
00:30:51,449 --> 00:30:55,019
Every clause above the x-axis
should be all positive.

655
00:30:55,019 --> 00:31:00,291
And every clause below the
x-axis should be all negative.

656
00:31:00,291 --> 00:31:09,534



657
00:31:09,534 --> 00:31:10,268
OK.

658
00:31:10,268 --> 00:31:13,304
So I guess this one you
could call monotone planar

659
00:31:13,304 --> 00:31:14,839
3SAT without rectilinear.

660
00:31:14,839 --> 00:31:19,143
But of course, rectilinear
doesn't change much.

661
00:31:19,143 --> 00:31:23,248
I didn't say why, but if
you have a planar drawing

662
00:31:23,248 --> 00:31:27,051
like we had before, this is
just a particularly nice way

663
00:31:27,051 --> 00:31:28,887
to make that drawing.

664
00:31:28,887 --> 00:31:32,390
To go here, I just used the fact
that there are no crossings.

665
00:31:32,390 --> 00:31:35,059
And I stretched out the
variables to decent lengths,

666
00:31:35,059 --> 00:31:37,862
so that clauses can
just go straight down.

667
00:31:37,862 --> 00:31:43,401
You can prove any planar graph
can be drawn in this way.

668
00:31:43,401 --> 00:31:47,872
Any planar graph that has the
v_i cycle and has some degree

669
00:31:47,872 --> 00:31:50,174
three vertices that
connect to variables.

670
00:31:50,174 --> 00:31:52,076
They have to nest in
this way, because if you

671
00:31:52,076 --> 00:31:53,645
think of a clause,
they could either

672
00:31:53,645 --> 00:31:59,017
be in this pocket or outside
of it, or down in this region.

673
00:31:59,017 --> 00:32:01,252
And so you can just
figure out how big

674
00:32:01,252 --> 00:32:03,888
this thing needs to be, and then
make the next one a little bit

675
00:32:03,888 --> 00:32:04,689
bigger.

676
00:32:04,689 --> 00:32:06,291
And so you can
represent the nesting

677
00:32:06,291 --> 00:32:08,793
in this nice orthogonal,
or rectilinear structure.

678
00:32:08,793 --> 00:32:12,397
Rectilinear just means
horizontal and vertical lines.

679
00:32:12,397 --> 00:32:13,131
Cool?

680
00:32:13,131 --> 00:32:17,335
So that's planar rectilinear
3SAT, first observed

681
00:32:17,335 --> 00:32:20,772
by Knuth and Raghunathan.

682
00:32:20,772 --> 00:32:24,342
Now we want to-- let's
prove that planar monotone

683
00:32:24,342 --> 00:32:26,377
rectilinear 3SAT is also hard.

684
00:32:26,377 --> 00:32:26,878
Question.

685
00:32:26,878 --> 00:32:27,512
AUDIENCE: Wait.

686
00:32:27,512 --> 00:32:31,249
If rectilinearity just is a
nice way to draw the graph,

687
00:32:31,249 --> 00:32:33,851
can we use the fact that it's
rectilinear in our reductions?

688
00:32:33,851 --> 00:32:35,620
I mean, is that going
to help us any more?

689
00:32:35,620 --> 00:32:37,355
PROFESSOR: The rectilinear
helps us mainly

690
00:32:37,355 --> 00:32:41,092
when we're reducing to a
problem that lives on a grid.

691
00:32:41,092 --> 00:32:43,161
It's just a convenient
way of thinking about it.

692
00:32:43,161 --> 00:32:45,163
It doesn't directly help us.

693
00:32:45,163 --> 00:32:47,365
I mean, it's a linear
time reduction.

694
00:32:47,365 --> 00:32:48,866
I mean, all of these
are reductions,

695
00:32:48,866 --> 00:32:51,703
so of course, none of
them help us in theory.

696
00:32:51,703 --> 00:32:54,372
But the cleaner you can
make the problem-- I mean,

697
00:32:54,372 --> 00:32:55,440
this looks pretty.

698
00:32:55,440 --> 00:32:57,141
And we'll see, I
think at the end

699
00:32:57,141 --> 00:33:00,044
of class, a proof that
directly mimics this structure.

700
00:33:00,044 --> 00:33:01,279
So that's the only reason.

701
00:33:01,279 --> 00:33:03,081
You could, of course,
as a first step, say,

702
00:33:03,081 --> 00:33:04,382
hey, draw it rectilinearly.

703
00:33:04,382 --> 00:33:08,619
But this saves you that step.

704
00:33:08,619 --> 00:33:10,288
Cool.

705
00:33:10,288 --> 00:33:10,922
All right.

706
00:33:10,922 --> 00:33:14,492
So planar monotone
rectilinear 3SAT.

707
00:33:14,492 --> 00:33:18,229



708
00:33:18,229 --> 00:33:19,864
Here's an explicit example.

709
00:33:19,864 --> 00:33:21,466
Although it's not
going to be modified,

710
00:33:21,466 --> 00:33:24,969
it's just another example
of planar rectilinear 3SAT

711
00:33:24,969 --> 00:33:25,937
without the monotone.

712
00:33:25,937 --> 00:33:29,407
You see there's negations
above, lack of negations below.

713
00:33:29,407 --> 00:33:31,776
And here is the
trick to fix things.

714
00:33:31,776 --> 00:33:34,612



715
00:33:34,612 --> 00:33:37,749
So suppose you have a
variable x_i on the x-axis,

716
00:33:37,749 --> 00:33:40,451
you have a clause above it
that uses that variable

717
00:33:40,451 --> 00:33:42,053
in the wrong orientation.

718
00:33:42,053 --> 00:33:44,322
So of course-- or the
reflected picture.

719
00:33:44,322 --> 00:33:45,423
But let's say it's above.

720
00:33:45,423 --> 00:33:47,091
It's U is negated.

721
00:33:47,091 --> 00:33:49,260
So in general, we have a
bunch of connections up.

722
00:33:49,260 --> 00:33:51,095
We have a bunch of
connections down.

723
00:33:51,095 --> 00:33:53,765
This one is somewhere
in the middle.

724
00:33:53,765 --> 00:33:55,500
These bold lines are
just to distinguish

725
00:33:55,500 --> 00:33:58,169
these are the ones to the right,
these are the ones to the left.

726
00:33:58,169 --> 00:34:00,138
They don't mean
negation, necessarily.

727
00:34:00,138 --> 00:34:01,973
Because this one
should be negated.

728
00:34:01,973 --> 00:34:02,473
OK.

729
00:34:02,473 --> 00:34:05,543
So we're just going to
replace it like this.

730
00:34:05,543 --> 00:34:08,546
This is the trick that we
saw in the right and bottom

731
00:34:08,546 --> 00:34:09,814
corner of the crossover gadget.

732
00:34:09,814 --> 00:34:12,383
We're going to duplicate
x_i, way except we'll

733
00:34:12,383 --> 00:34:13,751
negate it at the same time.

734
00:34:13,751 --> 00:34:17,388
So the other one had a negation
here and one negation here,

735
00:34:17,388 --> 00:34:18,556
not here.

736
00:34:18,556 --> 00:34:23,494
This x_i or a, together with
x_i-bar or a-bar-- again,

737
00:34:23,494 --> 00:34:24,462
these are 2SAT clauses.

738
00:34:24,462 --> 00:34:29,000
You have to duplicate
an edge to make it 3SAT.

739
00:34:29,000 --> 00:34:32,737
That forces x_i to
be not a, I think.

740
00:34:32,737 --> 00:34:35,239
Maybe I even have
that as a fade.

741
00:34:35,239 --> 00:34:37,208
OK, x_i is not equal to a.

742
00:34:37,208 --> 00:34:40,845
Similarly, a does not equal b,
which means b equals x_i.

743
00:34:40,845 --> 00:34:41,345
OK?

744
00:34:41,345 --> 00:34:45,416
So we just duplicated x_i to be
used in all the old scenarios.

745
00:34:45,416 --> 00:34:47,218
And maybe these guys
still all go down.

746
00:34:47,218 --> 00:34:49,720
We could move some of them
over here if we wanted to.

747
00:34:49,720 --> 00:34:51,489
The ones to the left
have to be over here.

748
00:34:51,489 --> 00:34:53,591
The ones to the right
have to be over here.

749
00:34:53,591 --> 00:34:56,761
This one gets to use
a negated copy of x_i.

750
00:34:56,761 --> 00:35:00,364
So boom, one negation down.

751
00:35:00,364 --> 00:35:02,233
One negation that was
on the wrong side.

752
00:35:02,233 --> 00:35:06,304
Repeat this n times.

753
00:35:06,304 --> 00:35:08,306
Where you have a negation
you're not supposed to

754
00:35:08,306 --> 00:35:10,475
and everywhere you don't
have a negation that you're

755
00:35:10,475 --> 00:35:12,477
supposed to, apply this trick.

756
00:35:12,477 --> 00:35:14,112
You'll increase the
number of variables

757
00:35:14,112 --> 00:35:16,848
by some constant factor.

758
00:35:16,848 --> 00:35:18,583
And now you're in
the monotone case.

759
00:35:18,583 --> 00:35:20,284
So that's actually really easy.

760
00:35:20,284 --> 00:35:22,420
It's our first proof that
monotone 3SAT is hard.

761
00:35:22,420 --> 00:35:24,122
But it's a pretty easy one.

762
00:35:24,122 --> 00:35:25,189
Yeah?

763
00:35:25,189 --> 00:35:26,958
AUDIENCE: Can we use
a similar construction

764
00:35:26,958 --> 00:35:29,694
to recover splitting the
variables into literals?

765
00:35:29,694 --> 00:35:32,697



766
00:35:32,697 --> 00:35:34,532
PROFESSOR: Oh, to do this?

767
00:35:34,532 --> 00:35:35,733
AUDIENCE: Yeah.

768
00:35:35,733 --> 00:35:39,504
Because we dropped that when
we moved over here, right?

769
00:35:39,504 --> 00:35:41,439
AUDIENCE: But you said
it was just [INAUDIBLE].

770
00:35:41,439 --> 00:35:43,040
PROFESSOR: Well, we sort of did.

771
00:35:43,040 --> 00:35:45,643
No, actually, this is supposed
to be a generalization of this,

772
00:35:45,643 --> 00:35:48,412
because you could just
split apart-- I mean, you

773
00:35:48,412 --> 00:35:51,182
can carve v_i in half
to the positive side

774
00:35:51,182 --> 00:35:52,884
and the negative side.

775
00:35:52,884 --> 00:35:54,685
And all the negative
sides are below,

776
00:35:54,685 --> 00:35:56,787
and all the positive
sides are above.

777
00:35:56,787 --> 00:35:59,657
So yeah, we could
already do that.

778
00:35:59,657 --> 00:36:02,927



779
00:36:02,927 --> 00:36:03,427
Right.

780
00:36:03,427 --> 00:36:06,364
Because this was not
about having them--

781
00:36:06,364 --> 00:36:10,935
it was about having the vertices
labeled as literals instead of

782
00:36:10,935 --> 00:36:11,502
as variables.

783
00:36:11,502 --> 00:36:14,138
So we don't need to explicitly
say that this one does not

784
00:36:14,138 --> 00:36:14,906
equal that one.

785
00:36:14,906 --> 00:36:16,908
That's already in the problem.

786
00:36:16,908 --> 00:36:19,477
So we can combine all of
the things I've said so far.

787
00:36:19,477 --> 00:36:23,281
That may not always be the case,
but so far, we can combine all.

788
00:36:23,281 --> 00:36:23,781
Yeah?

789
00:36:23,781 --> 00:36:24,849
AUDIENCE: Silly question.

790
00:36:24,849 --> 00:36:27,385
If we're carving them into
positive side of the variable

791
00:36:27,385 --> 00:36:28,653
on one side and negative
on the other side,

792
00:36:28,653 --> 00:36:30,254
wouldn't that make
all the connections

793
00:36:30,254 --> 00:36:32,123
below that positive
connections instead

794
00:36:32,123 --> 00:36:33,758
of negative connections?

795
00:36:33,758 --> 00:36:34,725
PROFESSOR: Sorry.

796
00:36:34,725 --> 00:36:37,328
I don't mean split it in
the way of that diagram.

797
00:36:37,328 --> 00:36:39,964
I mean that we
could, in this sense,

798
00:36:39,964 --> 00:36:43,401
we could have vertices
represent a positive vi

799
00:36:43,401 --> 00:36:45,570
and a negative vi, and
have the connections.

800
00:36:45,570 --> 00:36:47,138
This was saying that
we could separate

801
00:36:47,138 --> 00:36:49,340
the positive connections
from the negative ones.

802
00:36:49,340 --> 00:36:51,776
And I'm just saying we
already have that here.

803
00:36:51,776 --> 00:36:54,212
This is a stronger property
to say that they're also

804
00:36:54,212 --> 00:36:55,580
all in the same direction.

805
00:36:55,580 --> 00:36:57,181
If you just had this
property, then you

806
00:36:57,181 --> 00:37:00,017
could have some white
here, and some white here,

807
00:37:00,017 --> 00:37:01,452
and red here, and red here.

808
00:37:01,452 --> 00:37:03,421
But this is saying you
can get them all aligned

809
00:37:03,421 --> 00:37:06,324
in the right direction.

810
00:37:06,324 --> 00:37:06,824
Yeah.

811
00:37:06,824 --> 00:37:15,466
In fact, if we look
at this diagram,

812
00:37:15,466 --> 00:37:17,201
maybe you didn't
understand this diagram,

813
00:37:17,201 --> 00:37:20,838
but it has the same issue.

814
00:37:20,838 --> 00:37:22,540
Or this is exactly
that kind of picture.

815
00:37:22,540 --> 00:37:23,941
So here we have a_5.

816
00:37:23,941 --> 00:37:26,811
The positive is over here,
the negative is over here.

817
00:37:26,811 --> 00:37:27,678
Here we have a_4.

818
00:37:27,678 --> 00:37:30,114
The negative is there,
and the positive is there.

819
00:37:30,114 --> 00:37:32,783
So this was getting
the weaker property.

820
00:37:32,783 --> 00:37:34,452
Again, you don't have
to worry about it,

821
00:37:34,452 --> 00:37:37,455
because we got the stronger one.

822
00:37:37,455 --> 00:37:39,123
But that's just to
show that there's

823
00:37:39,123 --> 00:37:42,360
a difference between the two.

824
00:37:42,360 --> 00:37:44,362
Good.

825
00:37:44,362 --> 00:37:50,334
So that was planar
monotone rectilinear 3SAT.

826
00:37:50,334 --> 00:37:50,968
OK.

827
00:37:50,968 --> 00:37:56,974
I have a governor
general's warning.

828
00:37:56,974 --> 00:38:02,546



829
00:38:02,546 --> 00:38:04,982
So here's another problem.

830
00:38:04,982 --> 00:38:06,450
Suppose we have
the variable cycle.

831
00:38:06,450 --> 00:38:11,789



832
00:38:11,789 --> 00:38:15,860
And I say, well, every
clause is inside the cycle.

833
00:38:15,860 --> 00:38:19,463
And you are free to have
positive and negative

834
00:38:19,463 --> 00:38:19,964
connections.

835
00:38:19,964 --> 00:38:25,736



836
00:38:25,736 --> 00:38:27,171
It's going to get hard.

837
00:38:27,171 --> 00:38:27,872
OK.

838
00:38:27,872 --> 00:38:30,374
Something like that.

839
00:38:30,374 --> 00:38:32,476
And it's planar.

840
00:38:32,476 --> 00:38:36,013
That problem is
polynomially solvable.

841
00:38:36,013 --> 00:38:38,916
So I'll rephrase this.

842
00:38:38,916 --> 00:38:58,636
If all the clauses are on one
side of the variable cycle,

843
00:38:58,636 --> 00:39:02,106
then that version of 3SAT
is polynomially solvable.

844
00:39:02,106 --> 00:39:06,277
And the intuition is that
this kind of nesting structure

845
00:39:06,277 --> 00:39:09,180
is essentially a tree.

846
00:39:09,180 --> 00:39:11,816
If you look at what
nests inside of what,

847
00:39:11,816 --> 00:39:15,052
what clauses fall
underneath other clauses,

848
00:39:15,052 --> 00:39:18,956
that is a nesting relation,
which corresponds to a tree.

849
00:39:18,956 --> 00:39:22,026
And then you just do dynamic
programming over the tree.

850
00:39:22,026 --> 00:39:23,361
That's easy.

851
00:39:23,361 --> 00:39:25,429
The sort of surprising
thing is that just

852
00:39:25,429 --> 00:39:28,132
having two of these trees, one
on the inside of the cycle, one

853
00:39:28,132 --> 00:39:30,701
on the outside, is enough
to make the problem hard.

854
00:39:30,701 --> 00:39:32,069
That's a typical
thing, actually,

855
00:39:32,069 --> 00:39:34,839
because the trees interdigitate.

856
00:39:34,839 --> 00:39:36,741
They have no real
relation to each other,

857
00:39:36,741 --> 00:39:38,743
and there's no way to
keep track of both of them

858
00:39:38,743 --> 00:39:41,979
simultaneously with the dynamic
program unless P equals NP.

859
00:39:41,979 --> 00:39:46,550



860
00:39:46,550 --> 00:39:47,051
OK.

861
00:39:47,051 --> 00:39:48,819
So that's one gotcha
to be careful of.

862
00:39:48,819 --> 00:39:50,354
So when you're doing
your reductions,

863
00:39:50,354 --> 00:39:52,857
you have to worry about things
above the line and things

864
00:39:52,857 --> 00:39:53,524
below the line.

865
00:39:53,524 --> 00:39:57,328



866
00:39:57,328 --> 00:40:00,131
Also, here's a
special case of this.

867
00:40:00,131 --> 00:40:18,449



868
00:40:18,449 --> 00:40:21,152
Suppose I phrase the
following problem.

869
00:40:21,152 --> 00:40:24,188
I want the bipartite graph
on variables versus clauses,

870
00:40:24,188 --> 00:40:28,592
plus the cycle
v_1 through v_n back to v_1,

871
00:40:28,592 --> 00:40:32,930
plus another cycle on the
clauses c_1 to c_n and back

872
00:40:32,930 --> 00:40:33,464
to c_1.

873
00:40:33,464 --> 00:40:37,501
I want that whole
graph to be planar.

874
00:40:37,501 --> 00:40:39,570
OK?

875
00:40:39,570 --> 00:40:41,305
If you think about
that for a second, that

876
00:40:41,305 --> 00:40:43,474
would imply all the
clauses are on one side

877
00:40:43,474 --> 00:40:44,942
of the variable cycle.

878
00:40:44,942 --> 00:40:46,644
And so we're in this
case, which is easy.

879
00:40:46,644 --> 00:40:48,712
So this is a special
case of that case.

880
00:40:48,712 --> 00:40:52,149
Now, this one I mentioned,
because if this were hard,

881
00:40:52,149 --> 00:40:53,384
life would be so easy.

882
00:40:53,384 --> 00:40:54,718
It's not so life isn't easy.

883
00:40:54,718 --> 00:40:57,621
But you already knew that.

884
00:40:57,621 --> 00:41:01,759
Recall, say, proving
push-1 is hard in 2D.

885
00:41:01,759 --> 00:41:04,862
Well, first we did it in 3D and
then we had a crossover gadget.

886
00:41:04,862 --> 00:41:06,931
And most of the work was
in the crossover gadget.

887
00:41:06,931 --> 00:41:09,033
The base proof was
trivial or very easy.

888
00:41:09,033 --> 00:41:12,670



889
00:41:12,670 --> 00:41:15,339
So we can get all of these
connections between variables

890
00:41:15,339 --> 00:41:17,041
and clauses to be planar.

891
00:41:17,041 --> 00:41:19,343
We can get all of these
connections, the variables

892
00:41:19,343 --> 00:41:22,012
in a line, to be
planar together,

893
00:41:22,012 --> 00:41:23,481
all of those things together.

894
00:41:23,481 --> 00:41:27,518
But we cannot also have a path
connecting all the clauses

895
00:41:27,518 --> 00:41:28,152
together.

896
00:41:28,152 --> 00:41:28,919
Even a path.

897
00:41:28,919 --> 00:41:35,326
So I said a path here,
which is what we want.

898
00:41:35,326 --> 00:41:37,328
So that's annoying,
because if we

899
00:41:37,328 --> 00:41:38,929
could make all of
these things planar,

900
00:41:38,929 --> 00:41:41,632
we wouldn't have to worry
about these crossovers.

901
00:41:41,999 --> 00:41:44,301
OK.

902
00:41:44,301 --> 00:41:47,338
So next topic.

903
00:41:47,338 --> 00:41:58,315



904
00:41:58,315 --> 00:42:03,687
We will see some
planar 3SAT proofs,

905
00:42:03,687 --> 00:42:04,889
reductions from planar 3SAT.

906
00:42:04,889 --> 00:42:07,191
But let me first tell you
about other versions of 3SAT.

907
00:42:07,191 --> 00:42:09,393
Remember there are three
main versions-- planar 3SAT,

908
00:42:09,393 --> 00:42:11,795
planar 1-in-3SAT, and-- sorry.

909
00:42:11,795 --> 00:42:14,865
There are three versions
of 3SAT-- 3SAT, 1-in-3SAT,

910
00:42:14,865 --> 00:42:16,500
and Not-All-Equal SAT.

911
00:42:16,500 --> 00:42:21,071
Turns out 1-in-3SAT is hard
when its graphs are planar.

912
00:42:21,071 --> 00:42:24,008
Not-All-Equal SAT is easy
when graphs are planar.

913
00:42:24,008 --> 00:42:25,809
So I will show you both.

914
00:42:25,809 --> 00:42:26,510
All right.

915
00:42:26,510 --> 00:42:28,479
Let's do planar 1-in-3SAT.

916
00:42:28,479 --> 00:42:31,215
So it's pretty much
the same thing.

917
00:42:31,215 --> 00:42:33,050
I won't duplicate
all of the text here.

918
00:42:33,050 --> 00:42:38,289
We take the bipartite graph
of variables versus clauses.

919
00:42:38,289 --> 00:42:42,993
And we also add
a path, or cycle,

920
00:42:42,993 --> 00:42:45,629
connecting all the variables.

921
00:42:45,629 --> 00:42:48,933
And that graph should be planar.

922
00:42:48,933 --> 00:42:53,370
And otherwise, it's
1-in-3SAT, exactly 1-in-3SAT.

923
00:42:53,370 --> 00:42:55,573
So here's the proof.

924
00:42:55,573 --> 00:42:58,676
It's one of the easiest
proofs we'll cover.

925
00:42:58,676 --> 00:42:59,777
Suppose you have a clause.

926
00:42:59,777 --> 00:43:04,248



927
00:43:04,248 --> 00:43:10,054
It's a reduction from planar
3SAT to planar 1-in-3SAT.

928
00:43:10,054 --> 00:43:11,255
OK?

929
00:43:11,255 --> 00:43:14,992
So this is also our first
proof of 1-in-3SAT being hard.

930
00:43:14,992 --> 00:43:18,362
We are going to take
a regular 3SAT clause

931
00:43:18,362 --> 00:43:22,299
and turn it into three
1-in-3SAT clauses.

932
00:43:22,299 --> 00:43:25,703
And that transformation
preserves planarity, so done.

933
00:43:25,703 --> 00:43:27,504
So all of our proofs
are going to just keep

934
00:43:27,504 --> 00:43:28,505
building up in this way.

935
00:43:28,505 --> 00:43:30,207
We've already proved
this problem's hard

936
00:43:30,207 --> 00:43:31,875
when the graph is planar.

937
00:43:31,875 --> 00:43:34,345
So let's do this.

938
00:43:34,345 --> 00:43:35,746
At least one of
them should be 1.

939
00:43:35,746 --> 00:43:37,014
We don't want them all to be 0.

940
00:43:37,014 --> 00:43:39,984
So let's try when they're all 0,
see if something should break.

941
00:43:39,984 --> 00:43:42,519
Let's say this variable
is 0, easier to reach.

942
00:43:42,519 --> 00:43:48,158
So that makes this
guy satisfied,

943
00:43:48,158 --> 00:43:50,027
which means both of
these must be false.

944
00:43:50,027 --> 00:43:51,495
This variable's
just hanging out.

945
00:43:51,495 --> 00:43:53,964
It's just to make
everything degree three.

946
00:43:53,964 --> 00:43:59,470
So if this is 0, this
is 1, so this must be 0.

947
00:43:59,470 --> 00:44:00,738
So this is 0.

948
00:44:00,738 --> 00:44:02,072
This is 0.

949
00:44:02,072 --> 00:44:04,508
That means exactly one
of these should be 1.

950
00:44:04,508 --> 00:44:06,644
If z_p is 1, obviously,
we're happy.

951
00:44:06,644 --> 00:44:08,846
But this will end up
forcing this guy to be 0.

952
00:44:08,846 --> 00:44:09,446
Or sorry.

953
00:44:09,446 --> 00:44:12,449
Actually, it'll leave this
guy free to do whatever.

954
00:44:12,449 --> 00:44:18,422
So if this is 0, 0, 0,
then this must be 1.

955
00:44:18,422 --> 00:44:19,690
This is 1.

956
00:44:19,690 --> 00:44:20,257
This is 1.

957
00:44:20,257 --> 00:44:21,692
Therefore, both of these are 0.

958
00:44:21,692 --> 00:44:25,562
If z_r-bar is 0, that
must mean this one is 1.

959
00:44:25,562 --> 00:44:29,299
So if both of these were 0,
it forced this guy to be a 1.

960
00:44:29,299 --> 00:44:32,970
If this was 0 and this is
1, for example, this is 1.

961
00:44:32,970 --> 00:44:35,539



962
00:44:35,539 --> 00:44:38,809
Then this must be 0. OK.

963
00:44:38,809 --> 00:44:40,010
This is 0.

964
00:44:40,010 --> 00:44:42,112
But we're free to set
either one of these to 1.

965
00:44:42,112 --> 00:44:45,215
So z_r is free, which
is what we want to do.

966
00:44:45,215 --> 00:44:46,483
We're simulating regular 3SAT.

967
00:44:46,483 --> 00:44:48,452
If this is 1, then
both of these guys

968
00:44:48,452 --> 00:44:50,120
should be able to do
whatever they want.

969
00:44:50,120 --> 00:44:52,923
And that's what these
guys let you do.

970
00:44:52,923 --> 00:44:54,625
They're free floating.

971
00:44:54,625 --> 00:44:56,960
This guy can toggle if
it's not constrained

972
00:44:56,960 --> 00:44:58,729
to be the only guy that's 1.

973
00:44:58,729 --> 00:44:59,630
Yeah?

974
00:44:59,630 --> 00:45:03,233
AUDIENCE: What's the
dashed line represent?

975
00:45:03,233 --> 00:45:05,869
PROFESSOR: Dashed line is
the outline of the gadget.

976
00:45:05,869 --> 00:45:10,541
It's just saying you replace
that blob with this blob.

977
00:45:10,541 --> 00:45:12,710
I mean, slightly
more formally, I

978
00:45:12,710 --> 00:45:14,111
think it's saying
something like,

979
00:45:14,111 --> 00:45:16,747
if you contract this to a
point or if you contract this

980
00:45:16,747 --> 00:45:18,682
to a point, then it's
exactly the same diagram.

981
00:45:18,682 --> 00:45:20,217
So it's one way to
argue you preserve

982
00:45:20,217 --> 00:45:21,952
planarity, something like that.

983
00:45:21,952 --> 00:45:24,922



984
00:45:24,922 --> 00:45:27,424
So ignore it, basically.

985
00:45:27,424 --> 00:45:30,094
Now, I guess you
would have to argue

986
00:45:30,094 --> 00:45:34,264
that you can still have a path
that visits all the variables.

987
00:45:34,264 --> 00:45:34,965
Another question?

988
00:45:34,965 --> 00:45:35,966
AUDIENCE: Yeah.

989
00:45:35,966 --> 00:45:40,404
What's preventing you from
setting all three to false?

990
00:45:40,404 --> 00:45:42,372
PROFESSOR: That is one
of the cases I just did.

991
00:45:42,372 --> 00:45:47,344
If these two are false,
then these have to be true.

992
00:45:47,344 --> 00:45:48,312
No, sorry.

993
00:45:48,312 --> 00:45:49,246
These have to be 0.

994
00:45:49,246 --> 00:45:50,714
So these are both 0.

995
00:45:50,714 --> 00:45:53,817
And then this has to
be a 1 or satisfy this.

996
00:45:53,817 --> 00:45:56,420



997
00:45:56,420 --> 00:45:58,589
It's easy to get confused,
because that one is 3SAT,

998
00:45:58,589 --> 00:45:59,923
this one is 1-in-3SAT.

999
00:45:59,923 --> 00:46:03,260
So these all have
exactly-1 constraints.

1000
00:46:03,260 --> 00:46:04,528
OK.

1001
00:46:04,528 --> 00:46:06,730
Now, this proof has negations.

1002
00:46:06,730 --> 00:46:10,167
And you may recall
that monotone--

1003
00:46:10,167 --> 00:46:12,936
I'm going to switch to saying
positive 1-in-3SAT where you

1004
00:46:12,936 --> 00:46:15,506
have no negations is also hard.

1005
00:46:15,506 --> 00:46:22,746
So we can also define
planar positive 1-in-3SAT.

1006
00:46:22,746 --> 00:46:29,953



1007
00:46:29,953 --> 00:46:34,892
This is also hard by a slightly
more complicated proof,

1008
00:46:34,892 --> 00:46:36,794
more recent proof also.

1009
00:46:36,794 --> 00:46:41,165
Surprisingly, this planar
monotone rectilinear 3SAT,

1010
00:46:41,165 --> 00:46:44,067
or just planar monotone
3SAT, is also very recent.

1011
00:46:44,067 --> 00:46:45,736
I think 2010.

1012
00:46:45,736 --> 00:46:48,338
So a lot of these
just fell recently

1013
00:46:48,338 --> 00:46:52,042
but are a natural culmination
of all these simplifications.

1014
00:46:52,042 --> 00:46:54,244
So this is a version
that-- well, these

1015
00:46:54,244 --> 00:46:55,879
are some gadgets, actually.

1016
00:46:55,879 --> 00:46:58,782
This is one way to force
the two variables to have

1017
00:46:58,782 --> 00:47:01,552
opposite values and force
the two variables to have

1018
00:47:01,552 --> 00:47:06,123
equal values, using--
I guess this is really

1019
00:47:06,123 --> 00:47:11,495
planar positive
rectilinear 1-in-3SAT.

1020
00:47:11,495 --> 00:47:13,597
It's the 1-in-3SAT
version of this problem.

1021
00:47:13,597 --> 00:47:15,432
So again, variables
are on the x-axis.

1022
00:47:15,432 --> 00:47:17,334
Everything above is
implicitly all positive.

1023
00:47:17,334 --> 00:47:19,603
Everything below is
implicitly all negative.

1024
00:47:19,603 --> 00:47:21,138
Oh, sorry.

1025
00:47:21,138 --> 00:47:22,840
Here, everything
is all positive.

1026
00:47:22,840 --> 00:47:23,774
Yeah?

1027
00:47:23,774 --> 00:47:25,275
AUDIENCE: Another
nice thing to note

1028
00:47:25,275 --> 00:47:26,710
about that particular
construction

1029
00:47:26,710 --> 00:47:29,646
is that each of the variables
in the clauses are unique,

1030
00:47:29,646 --> 00:47:30,614
so it's exactly 3.

1031
00:47:30,614 --> 00:47:34,017
And they're all
unique, which someone

1032
00:47:34,017 --> 00:47:35,285
was asking about before.

1033
00:47:35,285 --> 00:47:35,953
PROFESSOR: Good.

1034
00:47:35,953 --> 00:47:41,425
So in this construction,
1-in-3SAT, all of the clauses

1035
00:47:41,425 --> 00:47:43,694
do not repeat any variables.

1036
00:47:43,694 --> 00:47:45,796
Exactly three
distinct guys, yeah.

1037
00:47:45,796 --> 00:47:50,033
AUDIENCE: So to be clear,
this problem is hard,

1038
00:47:50,033 --> 00:47:56,573
but in this terminology, planar
positive rectilinear 3SAT,

1039
00:47:56,573 --> 00:48:00,210
not 1-in-3SAT, is easy.

1040
00:48:00,210 --> 00:48:03,213
Because if everything was
on one side of the line--

1041
00:48:03,213 --> 00:48:06,316
PROFESSOR: I mean,
positive 3SAT is easy.

1042
00:48:06,316 --> 00:48:10,153
You set all the
variables to true.

1043
00:48:10,153 --> 00:48:11,121
AUDIENCE: I'm confused.

1044
00:48:11,121 --> 00:48:12,789
Positive means that--

1045
00:48:12,789 --> 00:48:14,958
PROFESSOR: Positive is sort
of the 1-in-3SAT version

1046
00:48:14,958 --> 00:48:15,692
of monotone.

1047
00:48:15,692 --> 00:48:19,029
So 3SAT monotone
means every clause is

1048
00:48:19,029 --> 00:48:20,564
all positive or all negative.

1049
00:48:20,564 --> 00:48:23,834
In 1-in-3SAT, you just
need everything positive.

1050
00:48:23,834 --> 00:48:24,835
And it's still hard.

1051
00:48:24,835 --> 00:48:26,703
But with 3SAT, that
doesn't work, because you

1052
00:48:26,703 --> 00:48:28,572
can set everything to true.

1053
00:48:28,572 --> 00:48:32,876
1-in-3SAT requires
some false things.

1054
00:48:32,876 --> 00:48:35,112
So it's sort of the analog.

1055
00:48:35,112 --> 00:48:39,416
This is sometimes called planar
monotone rectilinear 1-in-3SAT.

1056
00:48:39,416 --> 00:48:42,920
But to avoid confusion, because
they are somewhat different,

1057
00:48:42,920 --> 00:48:44,354
I'm calling it positive.

1058
00:48:44,354 --> 00:48:46,323
I think this paper
actually calls it positive,

1059
00:48:46,323 --> 00:48:48,025
which makes me happy.

1060
00:48:48,025 --> 00:48:51,328
Anyway, you can check these
gadgets that they force.

1061
00:48:51,328 --> 00:48:54,564
In particular here, you're
basically forcing a to be 0

1062
00:48:54,564 --> 00:48:56,667
by this little construction.

1063
00:48:56,667 --> 00:48:58,702
And c is 1.

1064
00:48:58,702 --> 00:49:02,306
Therefore, this clause
forces exactly one of these

1065
00:49:02,306 --> 00:49:03,707
to be true, the
other to be false.

1066
00:49:03,707 --> 00:49:05,142
So it forces them
to be different.

1067
00:49:05,142 --> 00:49:06,910
You repeat that twice,
you get equality.

1068
00:49:06,910 --> 00:49:08,045
Then you do this.

1069
00:49:08,045 --> 00:49:11,615



1070
00:49:11,615 --> 00:49:14,451
First, you get rid
of all negations,

1071
00:49:14,451 --> 00:49:15,886
because you have
this way to force

1072
00:49:15,886 --> 00:49:18,055
two things to be different.

1073
00:49:18,055 --> 00:49:19,890
These Xed out ones
are the red lines.

1074
00:49:19,890 --> 00:49:22,726
Those are connected
to negated copies.

1075
00:49:22,726 --> 00:49:25,629
You just duplicate the
variable in negated form

1076
00:49:25,629 --> 00:49:27,631
and then use a wire there.

1077
00:49:27,631 --> 00:49:29,466
So this wire
becomes that one. x_2

1078
00:49:29,466 --> 00:49:31,935
is different from x_1.
x_3 is different from x_2,

1079
00:49:31,935 --> 00:49:32,970
so it's equal to x_1.

1080
00:49:32,970 --> 00:49:34,838
Same trick we saw before.

1081
00:49:34,838 --> 00:49:36,106
Now you have no negations.

1082
00:49:36,106 --> 00:49:40,110
So now this type of
clause is a 3SAT clause.

1083
00:49:40,110 --> 00:49:41,244
It's a little weird.

1084
00:49:41,244 --> 00:49:43,981
Right of the arrows, these
are 1-in-3SAT clauses.

1085
00:49:43,981 --> 00:49:45,816
Left of the arrows are
regular 3SAT clauses.

1086
00:49:45,816 --> 00:49:48,218
So we replace this
with this construction.

1087
00:49:48,218 --> 00:49:52,622



1088
00:49:52,622 --> 00:49:54,524
It's sort of like the
old one but a little bit

1089
00:49:54,524 --> 00:49:56,026
spread out, with
the duplications,

1090
00:49:56,026 --> 00:49:58,662
with these equal gadgets.

1091
00:49:58,662 --> 00:50:01,031
We get a copy of x over here.

1092
00:50:01,031 --> 00:50:03,600
That's so that if we have
more connections below,

1093
00:50:03,600 --> 00:50:07,337
we can easily access x still.

1094
00:50:07,337 --> 00:50:10,807
And yeah.

1095
00:50:10,807 --> 00:50:15,512
These 1-in-3 gadgets
constrain this.

1096
00:50:15,512 --> 00:50:16,813
Yeah, there is an equal gadget--

1097
00:50:16,813 --> 00:50:17,247
AUDIENCE: The equals
and not equals

1098
00:50:17,247 --> 00:50:18,949
are not part of the
problem, they're

1099
00:50:18,949 --> 00:50:20,484
just referring to
the earlier gadget.

1100
00:50:20,484 --> 00:50:20,717
PROFESSOR: No.

1101
00:50:20,717 --> 00:50:21,218
Right.

1102
00:50:21,218 --> 00:50:23,353
That's shorthand
for these gadgets.

1103
00:50:23,353 --> 00:50:25,522
So you would plug in
each of those things

1104
00:50:25,522 --> 00:50:27,424
into those little pictures.

1105
00:50:27,424 --> 00:50:27,924
Yeah.

1106
00:50:27,924 --> 00:50:30,227



1107
00:50:30,227 --> 00:50:30,727
OK.

1108
00:50:30,727 --> 00:50:32,863
So let's skip those details.

1109
00:50:32,863 --> 00:50:38,635
But you get that planar positive
rectilinear 1-in-3SAT is hard.

1110
00:50:38,635 --> 00:50:42,139
And that was 2008.

1111
00:50:42,139 --> 00:50:42,639
Cool.

1112
00:50:42,639 --> 00:50:46,410



1113
00:50:46,410 --> 00:50:56,386
Let's do planar
Not-All-Equal 3SAT.

1114
00:50:56,386 --> 00:50:59,456



1115
00:50:59,456 --> 00:51:00,424
This is polynomial.

1116
00:51:00,424 --> 00:51:02,793
Important thing to remember--
in the planar world,

1117
00:51:02,793 --> 00:51:06,596
you have to be careful
with all sorts of things.

1118
00:51:06,596 --> 00:51:09,166
It would be nice to have
a Schaefer-type dichotomy

1119
00:51:09,166 --> 00:51:13,403
theorem for planar graphs, but I
don't know of any such theorem.

1120
00:51:13,403 --> 00:51:16,239
So meanwhile, this is the
sort of main characterization.

1121
00:51:16,239 --> 00:51:18,608
You have those three
standard problems.

1122
00:51:18,608 --> 00:51:20,710
This one falls in
the planar case.

1123
00:51:20,710 --> 00:51:21,745
Same setup.

1124
00:51:21,745 --> 00:51:24,448
We have Not-All-Equal
clauses and the connections

1125
00:51:24,448 --> 00:51:28,485
between those and the
variables, negated or not.

1126
00:51:28,485 --> 00:51:32,456
Even when you allow negations,
this problem is polynomial.

1127
00:51:32,456 --> 00:51:36,660
The fun thing is the proof of
this theorem is a reduction,

1128
00:51:36,660 --> 00:51:38,462
and it looks exactly
like a hardness proof.

1129
00:51:38,462 --> 00:51:40,964
I mean-- [LAUGHS]
It just happens

1130
00:51:40,964 --> 00:51:45,102
to be from this problem to a
known polynomial time problem,

1131
00:51:45,102 --> 00:51:47,804
namely, planar max cut.

1132
00:51:47,804 --> 00:51:50,574
So we're going to
reduce to -- this

1133
00:51:50,574 --> 00:51:56,146
is one of the few times we will
reduce to something -- planar

1134
00:51:56,146 --> 00:51:58,148
max cut.

1135
00:51:58,148 --> 00:52:00,383
So max cut is I
give you a graph,

1136
00:52:00,383 --> 00:52:03,120
and I want to color the
vertices two different colors.

1137
00:52:03,120 --> 00:52:05,422
Think of them as the
two sides of a cut.

1138
00:52:05,422 --> 00:52:06,656
Say red and blue.

1139
00:52:06,656 --> 00:52:08,024
And I want to
maximize the number

1140
00:52:08,024 --> 00:52:11,294
of edges that are red, blue.

1141
00:52:11,294 --> 00:52:17,067
So I want to maximize the number
of, here, white-black edges,

1142
00:52:17,067 --> 00:52:18,869
bichromatic edges.

1143
00:52:18,869 --> 00:52:19,669
That's max cut.

1144
00:52:19,669 --> 00:52:22,005
In general graphs, that's
NP-hard, but in planar graphs,

1145
00:52:22,005 --> 00:52:25,242
it's easy, because if you
look at the dual graph

1146
00:52:25,242 --> 00:52:27,978
and then solve the Chinese
postman tour problem, which

1147
00:52:27,978 --> 00:52:30,447
is the shortest path that
visits all of the edges at least

1148
00:52:30,447 --> 00:52:32,315
once, which you can
do in polynomial time

1149
00:52:32,315 --> 00:52:36,720
by perfect matching and a
bipartite [INAUDIBLE] clique.

1150
00:52:36,720 --> 00:52:39,122
Anyway, you do that.

1151
00:52:39,122 --> 00:52:42,526
And then all the edges that
you double are not in the cut,

1152
00:52:42,526 --> 00:52:43,026
I think.

1153
00:52:43,026 --> 00:52:45,495
And all the edges that you
don't double in that tour

1154
00:52:45,495 --> 00:52:49,866
are in the max cut.

1155
00:52:49,866 --> 00:52:50,834
Fun fact.

1156
00:52:50,834 --> 00:52:54,271
So this is a known fact.

1157
00:52:54,271 --> 00:52:55,739
Planar max cut is easy.

1158
00:52:55,739 --> 00:52:59,442
So if we reduce from planar
Not Equal 3SAT to max cut,

1159
00:52:59,442 --> 00:53:00,510
the problem is easy.

1160
00:53:00,510 --> 00:53:01,645
And here's the proof.

1161
00:53:01,645 --> 00:53:06,516
It's got a variable gadget and
a Not-All-Equal clause gadget.

1162
00:53:06,516 --> 00:53:10,153
So we want to represent
Not-All-Equal.

1163
00:53:10,153 --> 00:53:12,856
And so the idea is we're
going to represent a variable

1164
00:53:12,856 --> 00:53:15,325
with this alternating chain.

1165
00:53:15,325 --> 00:53:17,761
And if you want to maximize
the number of red-blue edges,

1166
00:53:17,761 --> 00:53:19,930
you should alternate, because
this have even length.

1167
00:53:19,930 --> 00:53:21,531
If you don't alternate
anywhere, you're

1168
00:53:21,531 --> 00:53:22,933
going to not get as many edges.

1169
00:53:22,933 --> 00:53:26,169
In general, we'll say,
well, the target cut

1170
00:53:26,169 --> 00:53:28,104
size you're trying to
get, the decision problem

1171
00:53:28,104 --> 00:53:30,407
is, is there a cut of
size at least something?

1172
00:53:30,407 --> 00:53:32,676
The something is going to
be, in particular, it's

1173
00:53:32,676 --> 00:53:34,711
going to be a sum of
things, but for this gadget,

1174
00:53:34,711 --> 00:53:36,479
it is two times the
number of occurrences

1175
00:53:36,479 --> 00:53:40,283
that the variable would
say, or basically the length

1176
00:53:40,283 --> 00:53:42,319
of this cycle.

1177
00:53:42,319 --> 00:53:43,853
We'll just make the
cycle big enough,

1178
00:53:43,853 --> 00:53:47,724
so we get lots of copies of
x_i, lots of copies of x_i-bar.

1179
00:53:47,724 --> 00:53:50,093
So this is one possible setting.

1180
00:53:50,093 --> 00:53:54,164
If blue means true, this is like
saying that we set x_i to true.

1181
00:53:54,164 --> 00:53:55,165
We could do the reverse.

1182
00:53:55,165 --> 00:53:59,703
We could set x_i to false
and set x_i-bar to true.

1183
00:53:59,703 --> 00:54:01,037
But they have to be opposites.

1184
00:54:01,037 --> 00:54:03,873
So now we have-- this is
basically a split gadget.

1185
00:54:03,873 --> 00:54:08,845
We have several copies
of x_i and x_i-bar.

1186
00:54:08,845 --> 00:54:11,648
Then we're going to connect them
with this Not-All-Equal clause,

1187
00:54:11,648 --> 00:54:14,117
which is just a triangle.

1188
00:54:14,117 --> 00:54:18,154
And the idea is if these
are-- so this is really

1189
00:54:18,154 --> 00:54:21,024
a negated version of x_i,
but it doesn't matter.

1190
00:54:21,024 --> 00:54:24,194
If you negate all the variables,
they'll still be not all equal.

1191
00:54:24,194 --> 00:54:25,862
And exactly when
they're not all equal,

1192
00:54:25,862 --> 00:54:28,832
we get two points
out of this gadget.

1193
00:54:28,832 --> 00:54:30,667
Well, we also have to
get the three points

1194
00:54:30,667 --> 00:54:32,235
from these connections.

1195
00:54:32,235 --> 00:54:33,536
That forces this alternation.

1196
00:54:33,536 --> 00:54:35,438
So we say the target
in this gadget

1197
00:54:35,438 --> 00:54:37,374
is to get a cut of size 5.

1198
00:54:37,374 --> 00:54:39,342
We want five red-blue edges.

1199
00:54:39,342 --> 00:54:41,978
That's the most you could hope
for because of an odd cycle

1200
00:54:41,978 --> 00:54:42,812
here.

1201
00:54:42,812 --> 00:54:47,550
And if you get the sum of all
these cut sizes, in total,

1202
00:54:47,550 --> 00:54:51,087
you must have Not All
Equal in every clause.

1203
00:54:51,087 --> 00:54:54,791
So that's simulating
Not-All-Equal-- planar

1204
00:54:54,791 --> 00:54:55,825
Not-All-Equal 3SAT.

1205
00:54:55,825 --> 00:54:57,394
This also preserves planarity.

1206
00:54:57,394 --> 00:54:58,962
And we just contract
the variable

1207
00:54:58,962 --> 00:55:00,430
to a point, the
clauses to a point.

1208
00:55:00,430 --> 00:55:04,668
And it is the bipartite graph
of the Not-All-Equal picture.

1209
00:55:04,668 --> 00:55:07,170
And we've simulated that planar
Not-All-Equal 3SAT instance

1210
00:55:07,170 --> 00:55:11,074
with planar max cut,
which here, we actually

1211
00:55:11,074 --> 00:55:12,242
have a polynomial algorithm.

1212
00:55:12,242 --> 00:55:13,843
So that gives us a
polynomial algorithm

1213
00:55:13,843 --> 00:55:16,046
for planar Not-All-Equal 3SAT.

1214
00:55:16,046 --> 00:55:18,048
So that's kind of fun.

1215
00:55:18,048 --> 00:55:18,748
Similar style.

1216
00:55:18,748 --> 00:55:22,452



1217
00:55:22,452 --> 00:55:23,987
Yeah.

1218
00:55:23,987 --> 00:55:24,487
Good.

1219
00:55:24,487 --> 00:55:28,124



1220
00:55:28,124 --> 00:55:29,359
So many problems.

1221
00:55:29,359 --> 00:55:53,383



1222
00:55:53,383 --> 00:55:58,955
So I guess now we're going
to do some reductions

1223
00:55:58,955 --> 00:56:03,059
from various planar 3SAT
things to problems you might

1224
00:56:03,059 --> 00:56:05,462
care a little bit more about.

1225
00:56:05,462 --> 00:56:06,996
I'm going to
start-- I mean, it's

1226
00:56:06,996 --> 00:56:09,065
sort of a vague
transition, because these,

1227
00:56:09,065 --> 00:56:11,901
you could think of just more
problems of the same type.

1228
00:56:11,901 --> 00:56:15,505
X3C is something we talked about
in the context of 3PARTITION.

1229
00:56:15,505 --> 00:56:19,809
This was exact cover
with sets of size 3.

1230
00:56:19,809 --> 00:56:23,413
I think Exact Cover
with sets of size 3.

1231
00:56:23,413 --> 00:56:26,349
So this was-- you could
think of it as a hyper-graph.

1232
00:56:26,349 --> 00:56:28,284
Or you could think of
it as a bipartite graph.

1233
00:56:28,284 --> 00:56:33,056
You have sets of size 3
which cover variables.

1234
00:56:33,056 --> 00:56:35,658
You want every variable to
be covered exactly once.

1235
00:56:35,658 --> 00:56:39,496



1236
00:56:39,496 --> 00:56:42,265
But you can only
choose sets of size 3.

1237
00:56:42,265 --> 00:56:44,000
Yeah.

1238
00:56:44,000 --> 00:56:51,040
So this is closely related,
I guess, to planar 1-in-3SAT.

1239
00:56:51,040 --> 00:56:54,210
Here, each of these
things could have

1240
00:56:54,210 --> 00:56:56,246
arbitrary degree--
each element can

1241
00:56:56,246 --> 00:56:59,215
appear in many different sets.

1242
00:56:59,215 --> 00:57:03,186
Whereas over-- and you're
covering these with these.

1243
00:57:03,186 --> 00:57:10,894
I think this is the reverse
setup, where every-- let's see.

1244
00:57:10,894 --> 00:57:13,396



1245
00:57:13,396 --> 00:57:15,999
The clauses, again, have
to be exactly covered

1246
00:57:15,999 --> 00:57:19,068
by these things.

1247
00:57:19,068 --> 00:57:24,040
And these things
have arbitrary size.

1248
00:57:24,040 --> 00:57:25,909
So these are the things
that you're choosing.

1249
00:57:25,909 --> 00:57:27,844
I'm choosing to make
this variable true, which

1250
00:57:27,844 --> 00:57:29,179
covers this guy.

1251
00:57:29,179 --> 00:57:30,447
These have arbitrary size here.

1252
00:57:30,447 --> 00:57:33,383
The thing that I'm
choosing has size 3.

1253
00:57:33,383 --> 00:57:33,883
OK?

1254
00:57:33,883 --> 00:57:35,218
So it's sort of the dual of--

1255
00:57:35,218 --> 00:57:36,553
AUDIENCE: What are you choosing?

1256
00:57:36,553 --> 00:57:39,189
PROFESSOR: --of
planar 1-in-3SAT.

1257
00:57:39,189 --> 00:57:44,828
So the goal-- maybe I should
write down the problem again.

1258
00:57:44,828 --> 00:57:46,629
You're given 3-sets.

1259
00:57:46,629 --> 00:57:48,465
These are sets of size 3.

1260
00:57:48,465 --> 00:57:53,603
And you want to choose,
let's say, k of them.

1261
00:57:53,603 --> 00:57:57,941



1262
00:57:57,941 --> 00:58:02,545
Actually, it would be choose
n/3 of them that are disjoint.

1263
00:58:02,545 --> 00:58:05,215



1264
00:58:05,215 --> 00:58:08,284
And therefore, every element
-- there're n elements --

1265
00:58:08,284 --> 00:58:13,356
every element is covered exactly
once by exactly one 3SAT.

1266
00:58:13,356 --> 00:58:15,124
So it's, I think,
sort of complementary

1267
00:58:15,124 --> 00:58:16,693
to planar 1-in-3SAT.

1268
00:58:16,693 --> 00:58:21,130
The planar version is that
this bipartite graph is planar.

1269
00:58:21,130 --> 00:58:25,802
And Dyer and Freeze,
this is same people

1270
00:58:25,802 --> 00:58:30,006
that approved one of these
many problems is hard.

1271
00:58:30,006 --> 00:58:34,177
I think the-- I'll look back.

1272
00:58:34,177 --> 00:58:37,680



1273
00:58:37,680 --> 00:58:39,849
Planar 1-in-3SAT.

1274
00:58:39,849 --> 00:58:41,317
So no surprise.

1275
00:58:41,317 --> 00:58:44,654
So we're going to reduce
from planar 1-in-3SAT

1276
00:58:44,654 --> 00:58:47,624
to this problem, prove
that this is hard.

1277
00:58:47,624 --> 00:58:49,392
And here's a very simple proof.

1278
00:58:49,392 --> 00:58:50,727
They make it more complicated.

1279
00:58:50,727 --> 00:58:54,898
But for starters,
let's make a variable

1280
00:58:54,898 --> 00:58:57,534
by this kind of
even cycle trick.

1281
00:58:57,534 --> 00:59:01,538
And the picture here is that
the big circles are 3SATs,

1282
00:59:01,538 --> 00:59:03,740
the dots are the elements
you're trying to cover.

1283
00:59:03,740 --> 00:59:05,542
And every element should
be covered exactly

1284
00:59:05,542 --> 00:59:07,477
by exactly one set.

1285
00:59:07,477 --> 00:59:10,146
So this looks good, because
there are exactly two ways

1286
00:59:10,146 --> 00:59:11,748
to solve this thing.

1287
00:59:11,748 --> 00:59:15,285
You could choose these guys
and cover those points exactly

1288
00:59:15,285 --> 00:59:18,755
once, in which case, this
is covered, this is covered,

1289
00:59:18,755 --> 00:59:19,589
and this is covered.

1290
00:59:19,589 --> 00:59:21,624
But these other
guys are uncovered.

1291
00:59:21,624 --> 00:59:24,394
Those are going to
attach to other gadgets.

1292
00:59:24,394 --> 00:59:26,296
Or you could do the reverse.

1293
00:59:26,296 --> 00:59:29,365
So that's going to correspond
to a true or false setting.

1294
00:59:29,365 --> 00:59:31,200
And I think-- this is
not in their paper,

1295
00:59:31,200 --> 00:59:35,805
but I think this would be a
clause for exactly one 3SAT.

1296
00:59:35,805 --> 00:59:41,644
Just connect-- you
could have even negated

1297
00:59:41,644 --> 00:59:43,479
versions of your variables.

1298
00:59:43,479 --> 00:59:47,216
But let's say we have all
positive planar 1-in-3SAT.

1299
00:59:47,216 --> 00:59:49,485
So I'll just
take a positive copy

1300
00:59:49,485 --> 00:59:52,589
of x_i, a positive copy
of x_j from somewhere,

1301
00:59:52,589 --> 00:59:56,159
and then just bring them
together at a common dot.

1302
00:59:56,159 --> 00:59:57,527
Then that point
should be covered

1303
00:59:57,527 --> 00:59:59,862
by exactly one of them, which
means exactly one of those

1304
00:59:59,862 --> 01:00:01,130
is true.

1305
01:00:01,130 --> 01:00:01,631
Done.

1306
01:00:01,631 --> 01:00:03,099
Very easy.

1307
01:00:03,099 --> 01:00:05,101
Now, they want to
prove more things,

1308
01:00:05,101 --> 01:00:09,939
so they end up using-- I think
I will just show you for fun.

1309
01:00:09,939 --> 01:00:14,310
They end up using a more
complicated clause and a more

1310
01:00:14,310 --> 01:00:19,182
complicated way to connect
these things into the clause,

1311
01:00:19,182 --> 01:00:23,186
because they want to prove
another problem hard,

1312
01:00:23,186 --> 01:00:29,392
which is planar
three-dimensional matching.

1313
01:00:29,392 --> 01:00:31,327
Three-dimensional matching
was a generalization

1314
01:00:31,327 --> 01:00:35,565
of numerical three-dimensional
matching, which was

1315
01:00:35,565 --> 01:00:38,067
closely related to 3PARTITION.

1316
01:00:38,067 --> 01:00:41,938
In general,
three-dimensional matching,

1317
01:00:41,938 --> 01:00:43,272
it's like this problem,

1318
01:00:43,272 --> 01:00:45,174
but you also have
the extra information

1319
01:00:45,174 --> 01:00:49,045
that for every set of size
3, one of these is red,

1320
01:00:49,045 --> 01:00:53,216
another one is blue,
another one is yellow.

1321
01:00:53,216 --> 01:00:56,052
This paper uses the
additive primary colors.

1322
01:00:56,052 --> 01:00:57,286
I don't know why.

1323
01:00:57,286 --> 01:01:00,556
It could be green if you prefer.

1324
01:01:00,556 --> 01:01:02,625
So there are three
types of elements.

1325
01:01:02,625 --> 01:01:05,495
And you're told that every
set has one of each type.

1326
01:01:05,495 --> 01:01:09,565
So that's extra information
that's useful in some proofs.

1327
01:01:09,565 --> 01:01:12,402
So this is a better
construction,

1328
01:01:12,402 --> 01:01:16,172
because it's going to end
up being three-colorable.

1329
01:01:16,172 --> 01:01:18,608
Yeah.

1330
01:01:18,608 --> 01:01:20,777
I don't know how much you
care about this reduction.

1331
01:01:20,777 --> 01:01:23,880
I think I will skip the
details, although I spent

1332
01:01:23,880 --> 01:01:27,050
a lot of time understanding it.

1333
01:01:27,050 --> 01:01:29,986
The rough idea is that
these connectors-- there's

1334
01:01:29,986 --> 01:01:32,055
a positive and a negative
version, because they're

1335
01:01:32,055 --> 01:01:33,056
worried about negations.

1336
01:01:33,056 --> 01:01:35,958
But these connections
will attach

1337
01:01:35,958 --> 01:01:37,860
to these three terminals
for one variable,

1338
01:01:37,860 --> 01:01:39,295
these three terminals
for another,

1339
01:01:39,295 --> 01:01:40,496
and these three for another.

1340
01:01:40,496 --> 01:01:43,299
And just by a counting
argument in here,

1341
01:01:43,299 --> 01:01:50,073
there is 1, 2, 3, 4, 5,
6, 7, 8, 9 of these guys.

1342
01:01:50,073 --> 01:01:53,242
And there are however many--
I guess I should really

1343
01:01:53,242 --> 01:01:54,343
be counting the black dots.

1344
01:01:54,343 --> 01:02:01,150
1, 2, 3, 4, 5, 6, 7, 8,
9, 11, 12 points here.

1345
01:02:01,150 --> 01:02:06,989
So the best you can do is
to choose three of the sets

1346
01:02:06,989 --> 01:02:10,460
inside that will cover
all of the black dots

1347
01:02:10,460 --> 01:02:11,994
except for three of them.

1348
01:02:11,994 --> 01:02:14,263
And so from that, you
get exactly one 1SAT.

1349
01:02:14,263 --> 01:02:17,967
Exactly one of these should be
covered from somewhere else.

1350
01:02:17,967 --> 01:02:19,602
That would correspond
to this situation

1351
01:02:19,602 --> 01:02:21,738
where you cover
these three points as

1352
01:02:21,738 --> 01:02:24,140
opposed to this situation,
where none of them get covered.

1353
01:02:24,140 --> 01:02:25,608
That's like these guys.

1354
01:02:25,608 --> 01:02:27,276
And then you can
always satisfy the rest

1355
01:02:27,276 --> 01:02:28,911
by adding three in there.

1356
01:02:28,911 --> 01:02:32,648
So that's roughly how
that clause works.

1357
01:02:32,648 --> 01:02:35,651
Then that picture
is three-colorable.

1358
01:02:35,651 --> 01:02:40,223
And this way, you can color
all the dots with three colors.

1359
01:02:40,223 --> 01:02:41,257
And it pretty much works.

1360
01:02:41,257 --> 01:02:43,993
The variable
alternates red, yellow.

1361
01:02:43,993 --> 01:02:46,362
So we always get blue
connections, which is good.

1362
01:02:46,362 --> 01:02:49,031
So we can attach to
anything, except that the way

1363
01:02:49,031 --> 01:02:50,500
that we attach is like this.

1364
01:02:50,500 --> 01:02:55,171
And these are three
colors which match here.

1365
01:02:55,171 --> 01:02:58,341
And in this case, these
three colors match here.

1366
01:02:58,341 --> 01:03:00,276
But you might want to
attach here, for example.

1367
01:03:00,276 --> 01:03:05,314
So you need another connector,
which is slightly different.

1368
01:03:05,314 --> 01:03:07,150
This does exactly
the same thing,

1369
01:03:07,150 --> 01:03:10,119
but now this color
pattern matches

1370
01:03:10,119 --> 01:03:11,788
here, but in negated form.

1371
01:03:11,788 --> 01:03:18,294
And if you switch these two
colors, it matches here,

1372
01:03:18,294 --> 01:03:19,562
I think when it's upside-down.

1373
01:03:19,562 --> 01:03:22,031
So there's this version, and
there's the reflected version.

1374
01:03:22,031 --> 01:03:26,903
And then there's also this
coloring of the same gadget.

1375
01:03:26,903 --> 01:03:28,237
And so you do all these things.

1376
01:03:28,237 --> 01:03:29,939
You know what you're
supposed to connect,

1377
01:03:29,939 --> 01:03:32,041
and so you just choose one
of these three gadgets,

1378
01:03:32,041 --> 01:03:34,777
and it connects to one of
the three appropriate places.

1379
01:03:34,777 --> 01:03:35,545
That's their proof.

1380
01:03:35,545 --> 01:03:37,246
It was fun to read.

1381
01:03:37,246 --> 01:03:39,515
And that proves that planar
three-dimensional matching

1382
01:03:39,515 --> 01:03:41,050
is hard.

1383
01:03:41,050 --> 01:03:41,651
OK.

1384
01:03:41,651 --> 01:03:44,220
Plus, in their
diagrams, oh, they

1385
01:03:44,220 --> 01:03:46,088
have dashed lines through
everything in order

1386
01:03:46,088 --> 01:03:48,324
to illustrate that you
can have one path that

1387
01:03:48,324 --> 01:03:51,260
visits all of the elements,
just like in planar 3SAT.

1388
01:03:51,260 --> 01:03:54,397
So also, both planar
three-dimensional matching and

1389
01:03:54,397 --> 01:04:01,304
planar exact cover by 3-sets,
you can have one cycle

1390
01:04:01,304 --> 01:04:02,371
that visits every element.

1391
01:04:02,371 --> 01:04:06,008



1392
01:04:06,008 --> 01:04:07,910
Yeah.

1393
01:04:07,910 --> 01:04:09,078
Cool.

1394
01:04:09,078 --> 01:04:12,181
Here's another
relatively simple proof.

1395
01:04:12,181 --> 01:04:14,050
This is in the original
Lichtenstein paper,

1396
01:04:14,050 --> 01:04:17,320
so this is one of their
motivations for planar 3SAT.

1397
01:04:17,320 --> 01:04:18,821
Planar vertex cover.

1398
01:04:18,821 --> 01:04:21,958
So what's vertex cover?

1399
01:04:21,958 --> 01:04:23,226
You're given a graph.

1400
01:04:23,226 --> 01:04:26,229
You want to choose
a set of vertices

1401
01:04:26,229 --> 01:04:27,597
that cover all of the edges.

1402
01:04:27,597 --> 01:04:29,732
So for example, if
you have a triangle,

1403
01:04:29,732 --> 01:04:31,868
and I choose this vertex,
it covers this edge,

1404
01:04:31,868 --> 01:04:33,236
and it covers this edge.

1405
01:04:33,236 --> 01:04:34,437
I have one edge uncovered.

1406
01:04:34,437 --> 01:04:36,572
So I'm going to add
this one and cover that.

1407
01:04:36,572 --> 01:04:39,208
So I don't require
exactly one cover.

1408
01:04:39,208 --> 01:04:41,944
Just every edge has to be
covered by at least one

1409
01:04:41,944 --> 01:04:43,579
of its endpoints.

1410
01:04:43,579 --> 01:04:47,750
So you can think of it as
an OR of its two endpoints.

1411
01:04:47,750 --> 01:04:48,251
OK.

1412
01:04:48,251 --> 01:04:51,520
But this problem is NP-hard
even for planar graphs.

1413
01:04:51,520 --> 01:04:53,489
And here's one way to do.

1414
01:04:53,489 --> 01:04:55,691
This is like the whole
proof in one little picture.

1415
01:04:55,691 --> 01:04:58,227
You have a variable
gadget, which,

1416
01:04:58,227 --> 01:05:01,831
again, is just an even cycle.

1417
01:05:01,831 --> 01:05:06,402
And in an even cycle,
the vertex cover has to--

1418
01:05:06,402 --> 01:05:08,137
let's say this has size k.

1419
01:05:08,137 --> 01:05:11,340
And I give you the budget of
only k/2 for your vertex cover,

1420
01:05:11,340 --> 01:05:12,708
then you have to alternate.

1421
01:05:12,708 --> 01:05:14,877
So either these three guys
are in your vertex cover,

1422
01:05:14,877 --> 01:05:16,579
or these three guys are.

1423
01:05:16,579 --> 01:05:17,980
This proof actually
looks the same

1424
01:05:17,980 --> 01:05:19,916
as the last one we saw, right?

1425
01:05:19,916 --> 01:05:22,385
Then those things are just
connected to triangles.

1426
01:05:22,385 --> 01:05:23,753
Same deal here.

1427
01:05:23,753 --> 01:05:25,688
I'm going to give
you a budget of two

1428
01:05:25,688 --> 01:05:28,491
for this clause, because to
cover all three of these edges,

1429
01:05:28,491 --> 01:05:32,261
you need at least two vertices,
like we did over there.

1430
01:05:32,261 --> 01:05:35,531
And if you're going to get
away with only two-- so

1431
01:05:35,531 --> 01:05:37,233
if I choose, for
example, these two, that

1432
01:05:37,233 --> 01:05:39,802
also covers this edge
and this edge for free.

1433
01:05:39,802 --> 01:05:41,237
But it does not cover this edge.

1434
01:05:41,237 --> 01:05:43,406
This would be the one edge
not covered by the clause

1435
01:05:43,406 --> 01:05:45,408
alone if you only
get a budget of two.

1436
01:05:45,408 --> 01:05:46,876
And that's the
one that better be

1437
01:05:46,876 --> 01:05:48,244
covered by this
side, which means

1438
01:05:48,244 --> 01:05:49,912
this variable is set to true.

1439
01:05:49,912 --> 01:05:51,981
And in general, at least
one of these three things

1440
01:05:51,981 --> 01:05:52,748
better be covered.

1441
01:05:52,748 --> 01:05:54,884
Otherwise you won't
have enough budget

1442
01:05:54,884 --> 01:05:57,386
to finish that triangle clause.

1443
01:05:57,386 --> 01:05:58,187
Question?

1444
01:05:58,187 --> 01:06:01,390
AUDIENCE: So the hexagon
versus square here

1445
01:06:01,390 --> 01:06:03,159
is just to give you
more connection points

1446
01:06:03,159 --> 01:06:03,592
into other clauses?

1447
01:06:03,592 --> 01:06:03,826
PROFESSOR: Yeah.

1448
01:06:03,826 --> 01:06:05,194
Just make these
cycles big enough

1449
01:06:05,194 --> 01:06:07,897
to connect up to all the
things you need it in.

1450
01:06:07,897 --> 01:06:10,132
So if you have n_i
occurrences, you're

1451
01:06:10,132 --> 01:06:12,535
going to do, like,
2n_i or something.

1452
01:06:12,535 --> 01:06:15,738



1453
01:06:15,738 --> 01:06:16,238
Cool.

1454
01:06:16,238 --> 01:06:18,107
So that's planar vertex cover.

1455
01:06:18,107 --> 01:06:21,711
And because this reduction
preserved planarity,

1456
01:06:21,711 --> 01:06:24,947
we get planar
vertex cover's hard,

1457
01:06:24,947 --> 01:06:26,182
because planar 3SAT is hard.

1458
01:06:26,182 --> 01:06:27,616
Here we didn't need
any connections

1459
01:06:27,616 --> 01:06:28,951
between the variables.

1460
01:06:28,951 --> 01:06:30,586
Here's one where we
do need connections

1461
01:06:30,586 --> 01:06:32,121
between the variables.

1462
01:06:32,121 --> 01:06:36,759
So this is planar-directed
Hamiltonian cycle.

1463
01:06:36,759 --> 01:06:39,595
So I think you all know
what Hamiltonian cycle is.

1464
01:06:39,595 --> 01:06:41,864
And you're given a
directed graph here.

1465
01:06:41,864 --> 01:06:44,333
You want to find one path that
visits every vertex exactly

1466
01:06:44,333 --> 01:06:45,267
once.

1467
01:06:45,267 --> 01:06:46,936
Don't care about edges.

1468
01:06:46,936 --> 01:06:49,772
So we can do a
similar kind of thing.

1469
01:06:49,772 --> 01:06:52,408
The proof is a little bit--
but checking this works is

1470
01:06:52,408 --> 01:06:53,509
a little bit more annoying.

1471
01:06:53,509 --> 01:06:58,047
But here's Lichtenstein's
idea for variable.

1472
01:06:58,047 --> 01:06:58,881
Essentially, a wire.

1473
01:06:58,881 --> 01:07:01,484



1474
01:07:01,484 --> 01:07:02,852
The graph is directed here.

1475
01:07:02,852 --> 01:07:05,488
So we get to say there's
an incoming edge here.

1476
01:07:05,488 --> 01:07:06,422
Then you get a choice

1477
01:07:06,422 --> 01:07:08,124
of which way to go.

1478
01:07:08,124 --> 01:07:10,192
But then you basically
have to alternate.

1479
01:07:10,192 --> 01:07:11,861
Because of these
vertices in the middle,

1480
01:07:11,861 --> 01:07:13,329
you've got to visit all of them.

1481
01:07:13,329 --> 01:07:15,431
And the only way to do
that is to alternate.

1482
01:07:15,431 --> 01:07:17,299
So you get this
alternating pattern,

1483
01:07:17,299 --> 01:07:21,103
which means if you look at
these edges, a_1 and a_1-bar,

1484
01:07:21,103 --> 01:07:23,205
exactly one of these is in.

1485
01:07:23,205 --> 01:07:25,674
And then the opposite
of these are in.

1486
01:07:25,674 --> 01:07:27,943
The variable here is called a.

1487
01:07:27,943 --> 01:07:30,312
So there's many instances of a.

1488
01:07:30,312 --> 01:07:34,216
And these are going to
be in-- they're going

1489
01:07:34,216 --> 01:07:35,418
to be both in or both out.

1490
01:07:35,418 --> 01:07:38,487
And then these are going to be
both out or both in and so on.

1491
01:07:38,487 --> 01:07:41,357
So because I have
to zigzag, I made

1492
01:07:41,357 --> 01:07:45,861
a bunch of copies, ni
copies of the variable a.

1493
01:07:45,861 --> 01:07:48,230
But you're free to choose
one setting or the other.

1494
01:07:48,230 --> 01:07:51,200
And then the clause is just
going to be a single vertex.

1495
01:07:51,200 --> 01:07:57,406
And the idea is if we want
b-bar to satisfy this clause,

1496
01:07:57,406 --> 01:07:58,974
we're going to add
in those two edges.

1497
01:07:58,974 --> 01:08:01,911
So instead of going straight
here, you could have done this

1498
01:08:01,911 --> 01:08:03,412
and grabbed the clause for free.

1499
01:08:03,412 --> 01:08:04,947
You don't have to.

1500
01:08:04,947 --> 01:08:07,416
But this is going to
get grabbed if and only

1501
01:08:07,416 --> 01:08:10,486
if exactly-- at
least one of these

1502
01:08:10,486 --> 01:08:11,687
chooses the appropriate edge.

1503
01:08:11,687 --> 01:08:13,155
If you're using
this edge, there's

1504
01:08:13,155 --> 01:08:14,323
no way to cover this clause.

1505
01:08:14,323 --> 01:08:16,792
But if using this
edge, you can do that.

1506
01:08:16,792 --> 01:08:19,495
You have to check that you
can't let go from here to there

1507
01:08:19,495 --> 01:08:20,663
to over here.

1508
01:08:20,663 --> 01:08:22,264
That's what this
figure is about.

1509
01:08:22,264 --> 01:08:24,867
So basically, if you're
alternating here,

1510
01:08:24,867 --> 01:08:28,070
you switch sides, and then
you're alternating here,

1511
01:08:28,070 --> 01:08:30,206
this guy is uncovered.

1512
01:08:30,206 --> 01:08:31,774
And apparently, this
proof works even

1513
01:08:31,774 --> 01:08:34,376
when the graph is undirected,
but that's even less clear.

1514
01:08:34,376 --> 01:08:36,745
We'll see other
Hamiltonian cycle proofs

1515
01:08:36,745 --> 01:08:37,913
that are stronger than this.

1516
01:08:37,913 --> 01:08:39,415
But it's a nice illustration.

1517
01:08:39,415 --> 01:08:42,685
Here we're using that we
can connect all the vertices

1518
01:08:42,685 --> 01:08:43,252
together.

1519
01:08:43,252 --> 01:08:46,755
That's what these
connections are in the cycle.

1520
01:08:46,755 --> 01:08:50,126
So there's this big
vertex loop on the outside

1521
01:08:50,126 --> 01:08:52,094
taking these gadgets,
and pasting them together

1522
01:08:52,094 --> 01:08:55,898
in a big loop, because we want
an overall Hamiltonian cycle.

1523
01:08:55,898 --> 01:09:00,136
Because we know that preserves
planarity, life is good.

1524
01:09:00,136 --> 01:09:00,636
OK.

1525
01:09:00,636 --> 01:09:02,338
So there'll be some
clauses inside the cycle,

1526
01:09:02,338 --> 01:09:03,606
some clauses outside the cycle.

1527
01:09:03,606 --> 01:09:06,275
But that doesn't matter.

1528
01:09:06,275 --> 01:09:06,775
OK.

1529
01:09:06,775 --> 01:09:09,111
That's planar directed
Hamiltonian cycle.

1530
01:09:09,111 --> 01:09:12,081



1531
01:09:12,081 --> 01:09:14,717
Time for a Nikoli game.

1532
01:09:14,717 --> 01:09:17,853
I bumped into this slide
that I made a while ago.

1533
01:09:17,853 --> 01:09:20,389
So for fun, these are
all the Nikoli games

1534
01:09:20,389 --> 01:09:22,625
I know that have been proved
hard except the one I'm

1535
01:09:22,625 --> 01:09:23,959
going to talk about.

1536
01:09:23,959 --> 01:09:27,096
These are the references.

1537
01:09:27,096 --> 01:09:29,899
We covered one of them,
right, the Light Up.

1538
01:09:29,899 --> 01:09:32,568
But there's a lot.

1539
01:09:32,568 --> 01:09:34,236
And lots of papers proving them.

1540
01:09:34,236 --> 01:09:36,372
So here's a relatively new game.

1541
01:09:36,372 --> 01:09:38,741
It came out a couple
years ago in Nikoli land,

1542
01:09:38,741 --> 01:09:40,309
although it was
invented before that.

1543
01:09:40,309 --> 01:09:44,580
Shakashaka, which is
like a shaking sound.

1544
01:09:44,580 --> 01:09:50,152
So we have a square grid, blank
squares, and obstacle squares.

1545
01:09:50,152 --> 01:09:52,688
The obstacle squares, some of
them have numbers, some of them

1546
01:09:52,688 --> 01:09:54,757
are wild cards.

1547
01:09:54,757 --> 01:10:00,496
And what you're allowed to do
for a blank square-- or some

1548
01:10:00,496 --> 01:10:04,466
of the blank squares,
you can fill in one half.

1549
01:10:04,466 --> 01:10:06,335
So you have like
four different halves

1550
01:10:06,335 --> 01:10:08,103
of the square you can choose.

1551
01:10:08,103 --> 01:10:10,806
There they are-- this one, this
one, this one, and this one.

1552
01:10:10,806 --> 01:10:13,509
And you can fill it in
half black, half white.

1553
01:10:13,509 --> 01:10:15,945
So you cut along a
diagonal, and then you

1554
01:10:15,945 --> 01:10:18,480
choose one of the two
halves to fill in black.

1555
01:10:18,480 --> 01:10:19,248
You don't have to.

1556
01:10:19,248 --> 01:10:22,051
You could just leave it white.

1557
01:10:22,051 --> 01:10:24,787
And when you have
a numbered square,

1558
01:10:24,787 --> 01:10:27,723
then the number of filled things
must be exactly that number.

1559
01:10:27,723 --> 01:10:31,927
So here, there's one adjacent
to it, and nothing down here.

1560
01:10:31,927 --> 01:10:35,898
This guy has exactly two
half-filled squares next to it.

1561
01:10:35,898 --> 01:10:37,166
This one has exactly one.

1562
01:10:37,166 --> 01:10:40,669
This one has exactly
zero half-filled squares.

1563
01:10:40,669 --> 01:10:46,308
Think of blank squares as zeros
and these as counting as one.

1564
01:10:46,308 --> 01:10:49,211
Plus, the goal is that the
regions you make-- this

1565
01:10:49,211 --> 01:10:52,081
would all be easy
so far, I think.

1566
01:10:52,081 --> 01:10:54,450
But the extra constraint is
that all the regions you make

1567
01:10:54,450 --> 01:10:56,986
must be rectangles.

1568
01:10:56,986 --> 01:10:57,486
OK?

1569
01:10:57,486 --> 01:11:00,889
This is a 45-degree-rotated
rectangle.

1570
01:11:00,889 --> 01:11:02,224
This is a regular rectangle.

1571
01:11:02,224 --> 01:11:03,525
So you can use either one.

1572
01:11:03,525 --> 01:11:04,627
So it's a funny constraint.

1573
01:11:04,627 --> 01:11:07,329
It's actually quite
a fun game to play.

1574
01:11:07,329 --> 01:11:09,765
You're not allowed to
fill in a square 100%.

1575
01:11:09,765 --> 01:11:12,034
That one was already filled.

1576
01:11:12,034 --> 01:11:13,969
That's the rules.

1577
01:11:13,969 --> 01:11:16,605
Here's a reduction
from planar 3SAT.

1578
01:11:16,605 --> 01:11:18,007
Pretty simple.

1579
01:11:18,007 --> 01:11:20,609
Looks a lot like
Minesweeper, in some sense,

1580
01:11:20,609 --> 01:11:22,411
a little bit thickened.

1581
01:11:22,411 --> 01:11:26,382
But this is a
wire, because the 1

1582
01:11:26,382 --> 01:11:28,384
says that one of the two
sides is half-filled.

1583
01:11:28,384 --> 01:11:30,853
Once that's half-filled, you
have to make this a rectangle.

1584
01:11:30,853 --> 01:11:33,088
You can't just leave
it as a pentagon.

1585
01:11:33,088 --> 01:11:35,624
So you've got to fill that
in to a rotated square.

1586
01:11:35,624 --> 01:11:37,826
But because of the 1, this
must be an empty square.

1587
01:11:37,826 --> 01:11:39,094
So it alternates.

1588
01:11:39,094 --> 01:11:40,896
You can do this or this.

1589
01:11:40,896 --> 01:11:41,397
OK.

1590
01:11:41,397 --> 01:11:43,966
You can easily split just
by connecting those things

1591
01:11:43,966 --> 01:11:45,534
in the obvious way.

1592
01:11:45,534 --> 01:11:47,002
You can do 90-degree turns.

1593
01:11:47,002 --> 01:11:47,503
No problem.

1594
01:11:47,503 --> 01:11:50,306



1595
01:11:50,306 --> 01:11:54,576
Here's a slightly more
sophisticated-- slightly more

1596
01:11:54,576 --> 01:11:56,145
sophisticated gadget.

1597
01:11:56,145 --> 01:11:58,914
You can think of
this as a terminator.

1598
01:11:58,914 --> 01:12:01,850
It would be hard to just
stop this somewhere.

1599
01:12:01,850 --> 01:12:05,254
Well, maybe you could
just go all black.

1600
01:12:05,254 --> 01:12:07,356
I think that's OK as well.

1601
01:12:07,356 --> 01:12:08,857
This could also be a terminator.

1602
01:12:08,857 --> 01:12:13,295
You can also think
of this as a negator.

1603
01:12:13,295 --> 01:12:15,464
Of course, also, the
splitter's like a negator.

1604
01:12:15,464 --> 01:12:18,534
This guide's just
probably not so necessary.

1605
01:12:18,534 --> 01:12:21,136
Let's get to Clause.

1606
01:12:21,136 --> 01:12:23,672
So Clause is bringing
three things together

1607
01:12:23,672 --> 01:12:24,740
with one of these blocks.

1608
01:12:24,740 --> 01:12:26,275
But we do it in a funny way.

1609
01:12:26,275 --> 01:12:27,976
There's no 1s here or here.

1610
01:12:27,976 --> 01:12:29,745
So we end up with
this L blank shape.

1611
01:12:29,745 --> 01:12:32,314
Everything else is
now drawn as black.

1612
01:12:32,314 --> 01:12:33,215
That's just obstacles.

1613
01:12:33,215 --> 01:12:35,818
So this is not
happy the way it is.

1614
01:12:35,818 --> 01:12:38,053
There's lots of
ways to resolve it.

1615
01:12:38,053 --> 01:12:40,055
The one case where
we can't resolve

1616
01:12:40,055 --> 01:12:47,129
it is when all of these wires
are 0s, because there's

1617
01:12:47,129 --> 01:12:49,665
already stuff here, and
stuff here, and stuff here,

1618
01:12:49,665 --> 01:12:51,266
so we can't put anything here.

1619
01:12:51,266 --> 01:12:53,135
Can't put anything
here, or here, or here,

1620
01:12:53,135 --> 01:12:54,236
because of those 1s.

1621
01:12:54,236 --> 01:12:57,573
Then you're forced to have
the L shape, and you're toast.

1622
01:12:57,573 --> 01:13:00,209
In every other case,
we can decompose

1623
01:13:00,209 --> 01:13:03,479
into sometimes a big rectangle,
sometimes little squares,

1624
01:13:03,479 --> 01:13:04,713
sometimes rotated squares.

1625
01:13:04,713 --> 01:13:05,581
But that's OK.

1626
01:13:05,581 --> 01:13:08,817
So this is a
regular 3SAT clause.

1627
01:13:08,817 --> 01:13:12,454
The one thing that's
missing at this point

1628
01:13:12,454 --> 01:13:17,059
is a parity shift gadget,
because a lot of these gadgets

1629
01:13:17,059 --> 01:13:20,662
have very specific lengths,
modulo 3 or whatever.

1630
01:13:20,662 --> 01:13:25,134
So it turns out this is a
way to shift things slightly.

1631
01:13:25,134 --> 01:13:27,536
It can be filled in two ways.

1632
01:13:27,536 --> 01:13:32,408
You can fill in all of
these guys like that

1633
01:13:32,408 --> 01:13:34,676
and make this giant
rotated square.

1634
01:13:34,676 --> 01:13:38,147
Or if these are not allowed
because these are here,

1635
01:13:38,147 --> 01:13:40,282
then you can do
this weird filling.

1636
01:13:40,282 --> 01:13:42,751
You end up with a rectangle
there, and two rotated squares,

1637
01:13:42,751 --> 01:13:45,454
another rectangle.

1638
01:13:45,454 --> 01:13:46,722
And you count the total length.

1639
01:13:46,722 --> 01:13:52,161
This is length 4, whereas most
of the things are length 2?

1640
01:13:52,161 --> 01:13:53,362
AUDIENCE: 3.

1641
01:13:53,362 --> 01:13:53,962
PROFESSOR: 3.

1642
01:13:53,962 --> 01:13:54,463
OK.

1643
01:13:54,463 --> 01:13:57,800
So that makes me happy.

1644
01:13:57,800 --> 01:13:58,534
Shift the parity.

1645
01:13:58,534 --> 01:14:01,670
And that is Shakashaka.

1646
01:14:01,670 --> 01:14:03,472
Here's an overall
picture where we actually

1647
01:14:03,472 --> 01:14:05,274
plugged some gadgets together.

1648
01:14:05,274 --> 01:14:06,208
That was fun.

1649
01:14:06,208 --> 01:14:09,144



1650
01:14:09,144 --> 01:14:16,218
So I think I have one
more proof to just sketch.

1651
01:14:16,218 --> 01:14:19,988
So this is a problem of
so-called fixed-angle chains.

1652
01:14:19,988 --> 01:14:22,090
So you have this
forced 90-degree angle.

1653
01:14:22,090 --> 01:14:24,326
We had a similar thing
with the Hamiltonian path

1654
01:14:24,326 --> 01:14:27,029
with cubes and
elastics between them.

1655
01:14:27,029 --> 01:14:30,165
You could twist one
edge around the other,

1656
01:14:30,165 --> 01:14:33,502
one block around the other, but
you couldn't adjust this angle.

1657
01:14:33,502 --> 01:14:34,002
OK?

1658
01:14:34,002 --> 01:14:36,271
So the problem is I give
you such a chain, which

1659
01:14:36,271 --> 01:14:38,340
is specified by lengths
and then 90-degree angles.

1660
01:14:38,340 --> 01:14:41,076
So it can be-- you don't know
whether the 90-degree angle

1661
01:14:41,076 --> 01:14:42,644
goes up or down.

1662
01:14:42,644 --> 01:14:46,615
And you want to just put it into
the plane without crossings.

1663
01:14:46,615 --> 01:14:48,817
And this is an old
proof from 2000.

1664
01:14:48,817 --> 01:14:50,919
The problem is weakly NP-hard.

1665
01:14:50,919 --> 01:14:52,454
It's basically a
partition proof,

1666
01:14:52,454 --> 01:14:54,256
so-- It is a partition proof.

1667
01:14:54,256 --> 01:14:56,925
You get to choose, for
each of these things,

1668
01:14:56,925 --> 01:14:58,327
whether it goes left or right.

1669
01:14:58,327 --> 01:15:00,028
And you need to line
up this with that.

1670
01:15:00,028 --> 01:15:02,130
Otherwise you get collisions.

1671
01:15:02,130 --> 01:15:03,332
You would just need to argue.

1672
01:15:03,332 --> 01:15:06,034
This outer structure has a
unique embedding, roughly.

1673
01:15:06,034 --> 01:15:07,135
Unique enough.

1674
01:15:07,135 --> 01:15:08,937
It always looks like that.

1675
01:15:08,937 --> 01:15:13,976
So we proved a few years ago
that it is strongly NP-hard.

1676
01:15:13,976 --> 01:15:15,577
And I will just
sketch the proof,

1677
01:15:15,577 --> 01:15:18,213
because it's fun and cool.

1678
01:15:18,213 --> 01:15:19,848
So here's the rough idea.

1679
01:15:19,848 --> 01:15:22,684
Imagine this is like
a piece of wire.

1680
01:15:22,684 --> 01:15:25,387
And you can flip it up or down.

1681
01:15:25,387 --> 01:15:27,489
All the angles stay 90 degrees.

1682
01:15:27,489 --> 01:15:28,590
These are the down-case.

1683
01:15:28,590 --> 01:15:30,058
Here are some example up-cases.

1684
01:15:30,058 --> 01:15:32,528
One of them's going to
represent false, the other true.

1685
01:15:32,528 --> 01:15:33,028
Question?

1686
01:15:33,028 --> 01:15:35,597
AUDIENCE: What's the difference
between this and the Carpenter

1687
01:15:35,597 --> 01:15:36,465
Ruler problem?

1688
01:15:36,465 --> 01:15:37,599
PROFESSOR: Which Carpenter?

1689
01:15:37,599 --> 01:15:39,935
AUDIENCE: Like you have
to fold the ruler to fit.

1690
01:15:39,935 --> 01:15:41,737
PROFESSOR: Oh, to fit
inside a given length.

1691
01:15:41,737 --> 01:15:44,740



1692
01:15:44,740 --> 01:15:45,908
Well, the goal is different.

1693
01:15:45,908 --> 01:15:49,278
Here, the goal is to draw it
in the plane without crossings.

1694
01:15:49,278 --> 01:15:53,382
Before, the goal was to draw it
in the plane with minimum span.

1695
01:15:53,382 --> 01:15:55,984



1696
01:15:55,984 --> 01:15:57,119
To fit inside box.

1697
01:15:57,119 --> 01:15:57,619
Yeah.

1698
01:15:57,619 --> 01:15:59,555
I mean, this proof is
pretty much the same.

1699
01:15:59,555 --> 01:16:01,290
This proof will be
totally different.

1700
01:16:01,290 --> 01:16:02,891
That problem was also
only weakly hard.

1701
01:16:02,891 --> 01:16:04,826
There was a pseudopoly
algorithm.

1702
01:16:04,826 --> 01:16:06,395
This problem is
strongly NP-hard.

1703
01:16:06,395 --> 01:16:07,763
There is no pseudo
poly-algorithm

1704
01:16:07,763 --> 01:16:08,931
unless P equals NP.

1705
01:16:08,931 --> 01:16:11,099
So just a slightly
different goal.

1706
01:16:11,099 --> 01:16:12,501
That one was more
one-dimensional.

1707
01:16:12,501 --> 01:16:14,670
This is going to be much
more two-dimensional. That's

1708
01:16:14,670 --> 01:16:15,637
the other difference.

1709
01:16:15,637 --> 01:16:16,138
OK.

1710
01:16:16,138 --> 01:16:20,375
So this is our some
kind of variable gadget.

1711
01:16:20,375 --> 01:16:22,411
This is the variables gadget.

1712
01:16:22,411 --> 01:16:24,346
All n variables are
represented here.

1713
01:16:24,346 --> 01:16:25,814
This represents one variable.

1714
01:16:25,814 --> 01:16:28,016
At this point, I only have
one copy of each variable,

1715
01:16:28,016 --> 01:16:30,385
because there's no
constraint between these.

1716
01:16:30,385 --> 01:16:32,854
Each of them can
independently flip up or down.

1717
01:16:32,854 --> 01:16:33,889
Next, we have a clause.

1718
01:16:33,889 --> 01:16:36,291
This is where things get fun.

1719
01:16:36,291 --> 01:16:41,029
So there's some infrastructure,
but the main action is here.

1720
01:16:41,029 --> 01:16:43,031
Each of these is
sort of independently

1721
01:16:43,031 --> 01:16:45,033
pop-in-or-out-able.

1722
01:16:45,033 --> 01:16:47,603
It's like some kind
of pleated form.

1723
01:16:47,603 --> 01:16:50,072
It can either pleat back and
forth, like it's doing here,

1724
01:16:50,072 --> 01:16:52,574
where it pleats in and
out and out and in.

1725
01:16:52,574 --> 01:16:55,911
And that gets this
to this position.

1726
01:16:55,911 --> 01:16:57,813
With a slightly
different pleating,

1727
01:16:57,813 --> 01:16:59,281
it ends up in this position.

1728
01:16:59,281 --> 01:17:00,649
Or a slightly
different pleating,

1729
01:17:00,649 --> 01:17:03,485
where they're all out, you
end up in this position.

1730
01:17:03,485 --> 01:17:06,888
And notice this structure.

1731
01:17:06,888 --> 01:17:08,724
So I'll go through it again.

1732
01:17:08,724 --> 01:17:10,392
Here's the left one.

1733
01:17:10,392 --> 01:17:14,196
And then the middle one.

1734
01:17:14,196 --> 01:17:16,331
And then the last one.

1735
01:17:16,331 --> 01:17:19,301
What ends up happening is
that these pegs, in order

1736
01:17:19,301 --> 01:17:26,475
to avoid hitting that peg,
occupy either p_1 or p_2 or p_3.

1737
01:17:26,475 --> 01:17:28,410
So I'll go through
it one more time.

1738
01:17:28,410 --> 01:17:30,679
Here it's hitting p_1,
because this basically

1739
01:17:30,679 --> 01:17:33,348
pushes this thing down.

1740
01:17:33,348 --> 01:17:34,983
Whereas the other
ones can be up-- this

1741
01:17:34,983 --> 01:17:38,220
is up and up and up and up.

1742
01:17:38,220 --> 01:17:40,155
Or if we shift it
into the middle,

1743
01:17:40,155 --> 01:17:41,990
then this one has to be down.

1744
01:17:41,990 --> 01:17:45,827
But this guy can be up
and avoid p_1 but hit p_2.

1745
01:17:45,827 --> 01:17:50,298
Or this one's down, these
are up, and we hit p_3.

1746
01:17:50,298 --> 01:17:52,534
We want to avoid
collisions, so we

1747
01:17:52,534 --> 01:17:56,204
have to collide with
exactly one of these things,

1748
01:17:56,204 --> 01:17:58,573
or at least one
of them, I guess.

1749
01:17:58,573 --> 01:18:01,677
So that's the sort of picture.

1750
01:18:01,677 --> 01:18:04,479
This is a bunch
of those clauses.

1751
01:18:04,479 --> 01:18:11,219
There's one here, there's one
here, and there's one here.

1752
01:18:11,219 --> 01:18:11,787
Look familiar?

1753
01:18:11,787 --> 01:18:17,859
This is planar monotone
rectilinear 3SAT, I think.

1754
01:18:17,859 --> 01:18:20,929



1755
01:18:20,929 --> 01:18:22,698
So far so good,
except this chain

1756
01:18:22,698 --> 01:18:24,166
is separate from
this one, so we're

1757
01:18:24,166 --> 01:18:25,467
going to connect them together.

1758
01:18:25,467 --> 01:18:27,769



1759
01:18:27,769 --> 01:18:29,337
Is a little more, I think.

1760
01:18:29,337 --> 01:18:30,172
Yeah.

1761
01:18:30,172 --> 01:18:31,573
Connect them together.

1762
01:18:31,573 --> 01:18:33,775
So now it is one big chain.

1763
01:18:33,775 --> 01:18:36,111
What I ended up doing,
there's still this big thing

1764
01:18:36,111 --> 01:18:37,946
to represent the
entire variable.

1765
01:18:37,946 --> 01:18:40,549
But I basically made a
whole bunch of copies of it,

1766
01:18:40,549 --> 01:18:43,852
so that I could
attach things here.

1767
01:18:43,852 --> 01:18:46,888
But for example, when this
is up, all of these guys

1768
01:18:46,888 --> 01:18:48,423
have to simultaneously be up.

1769
01:18:48,423 --> 01:18:51,760
So it forces all the
copies of the variable

1770
01:18:51,760 --> 01:18:53,195
here to be one way or the other.

1771
01:18:53,195 --> 01:18:55,464
This is one variable,
this is another variable,

1772
01:18:55,464 --> 01:18:57,733
this is another variable,
and this is another variable,

1773
01:18:57,733 --> 01:18:59,134
just like before.

1774
01:18:59,134 --> 01:19:01,570
So same thing, but now I can
connect them all together.

1775
01:19:01,570 --> 01:19:06,608
Up here, these are all the
negative, I think, clauses.

1776
01:19:06,608 --> 01:19:07,275
Doesn't matter.

1777
01:19:07,275 --> 01:19:09,845
And then down here, you put
all the positive clauses.

1778
01:19:09,845 --> 01:19:10,912
And that's the proof.

1779
01:19:10,912 --> 01:19:11,413
Question.

1780
01:19:11,413 --> 01:19:13,048
AUDIENCE: --all those
three dots in a row?

1781
01:19:13,048 --> 01:19:15,450
Like, it seems to me that if
you have two dots in a

1782
01:19:15,450 --> 01:19:18,720
straight line, they might as
well just merge into one dot.

1783
01:19:18,720 --> 01:19:20,856
PROFESSOR: I think the
idea is, yeah, this

1784
01:19:20,856 --> 01:19:22,257
could be a single line.

1785
01:19:22,257 --> 01:19:24,760
We subdivide it just to point
out that you can attach things

1786
01:19:24,760 --> 01:19:25,761
to it.

1787
01:19:25,761 --> 01:19:26,595
Yeah.

1788
01:19:26,595 --> 01:19:31,032
There's extra dots, but just
for consistency's sake, I guess.

1789
01:19:31,032 --> 01:19:35,036
So now everywhere here, you
can attach one of the clauses.

1790
01:19:35,036 --> 01:19:36,471
And that way, they
all kind of hold

1791
01:19:36,471 --> 01:19:38,006
to the same infrastructure.

1792
01:19:38,006 --> 01:19:41,009
Yeah.

1793
01:19:41,009 --> 01:19:41,610
Clear?

1794
01:19:41,610 --> 01:19:42,711
[LAUGHS]

1795
01:19:42,711 --> 01:19:44,746
So obviously, you get
pretty complicated pictures

1796
01:19:44,746 --> 01:19:45,247
in the end.

1797
01:19:45,247 --> 01:19:47,749
But this is a proof
that clearly benefited

1798
01:19:47,749 --> 01:19:51,186
from the rectilinear aspect
and the monotone aspect

1799
01:19:51,186 --> 01:19:54,689
that all the true thing-- we
could not get some true above

1800
01:19:54,689 --> 01:19:55,857
and some true below.

1801
01:19:55,857 --> 01:19:57,626
They all wanted to
go the same way.

1802
01:19:57,626 --> 01:19:59,060
And the rectilinear
was nice, so we

1803
01:19:59,060 --> 01:20:01,363
could draw this all
on a horizontal line

1804
01:20:01,363 --> 01:20:03,431
and only have to worry
about vertical connections

1805
01:20:03,431 --> 01:20:04,766
between the top and the bottom.

1806
01:20:04,766 --> 01:20:06,268
So that gets to
your question about,

1807
01:20:06,268 --> 01:20:09,337
why do we need rectilinear?

1808
01:20:09,337 --> 01:20:10,138
But there you go.

1809
01:20:10,138 --> 01:20:15,076
So that was just a few
examples of planar 3SAT.

1810
01:20:15,076 --> 01:20:18,013
But in general, the idea
is that a lot of 3SAT--

1811
01:20:18,013 --> 01:20:21,116
or many 3SAT proofs
get easier when you use

1812
01:20:21,116 --> 01:20:22,651
the appropriate planar version.

1813
01:20:22,651 --> 01:20:26,054
You just have to be careful
of ones that are not hard.

1814
01:20:26,054 --> 01:20:27,923
As long as you
avoid that and you

1815
01:20:27,923 --> 01:20:29,991
have the right sort
of graph setup,

1816
01:20:29,991 --> 01:20:32,127
you don't have to add
too many extra edges.

1817
01:20:32,127 --> 01:20:33,895
Then you'll have
planarity and not

1818
01:20:33,895 --> 01:20:35,197
have to worry about crossovers.

1819
01:20:35,197 --> 01:20:36,932
And crossover, it
wouldn't have a clue

1820
01:20:36,932 --> 01:20:40,635
how to do a crossover
in a problem like this.

1821
01:20:40,635 --> 01:20:43,171
And other times, it just makes
your life a little bit easier,

1822
01:20:43,171 --> 01:20:45,340
because you skip one gadget.

1823
01:20:45,340 --> 01:20:47,876
But that is planar 3SAT.

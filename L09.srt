1
00:00:02,235 --> 00:00:03,103
PROFESSOR: All right.

2
00:00:03,103 --> 00:00:05,638
Welcome back to 6.890.

3
00:00:05,638 --> 00:00:09,442
Today we're going to look at
a bunch of different graph

4
00:00:09,442 --> 00:00:11,911
problems, that is, their
unifying feature is

5
00:00:11,911 --> 00:00:13,313
they're problems on graphs.

6
00:00:13,313 --> 00:00:16,583
We're going to look
at vertex cover,

7
00:00:16,583 --> 00:00:20,153
we're going to look at
vertex coloring of graphs,

8
00:00:20,153 --> 00:00:24,090
and we're going to look at some
ordering problems on graphs,

9
00:00:24,090 --> 00:00:29,195
and I think, one more,
orientations of graphs.

10
00:00:29,195 --> 00:00:31,398
So these are all going to
be some kind of constraint

11
00:00:31,398 --> 00:00:33,199
that we place on the
graph or something we

12
00:00:33,199 --> 00:00:35,402
want to do with the graph.

13
00:00:35,402 --> 00:00:38,104
This is sort of a
miscellaneous lecture.

14
00:00:38,104 --> 00:00:40,840
We've spent a lot of
time talking about 3SAT,

15
00:00:40,840 --> 00:00:45,345
most recently Hamiltonicity, and
before all that, 3-partition,

16
00:00:45,345 --> 00:00:50,650
which are the most popular,
most useful, I would say,

17
00:00:50,650 --> 00:00:52,485
ways of doing NP
hardness reductions.

18
00:00:52,485 --> 00:00:53,853
But there are few
others that are

19
00:00:53,853 --> 00:00:59,092
good to know that are sometimes
relevant, and so this is that.

20
00:00:59,092 --> 00:01:01,728
Each one is a little
bit smaller in content,

21
00:01:01,728 --> 00:01:04,497
so we're just going to
lump them all together.

22
00:01:04,497 --> 00:01:07,067
So we'll start
with vertex cover.

23
00:01:07,067 --> 00:01:09,069
We saw this slide
from lecture four,

24
00:01:09,069 --> 00:01:12,105
I think, from planar 3SAT.

25
00:01:12,105 --> 00:01:15,442
Lichtenstein proved
planar vertex covers hard.

26
00:01:15,442 --> 00:01:17,911
Vertex cover, remember,
is this problem.

27
00:01:17,911 --> 00:01:24,818



28
00:01:24,818 --> 00:01:27,987
You want to choose
a set of vertices,

29
00:01:27,987 --> 00:01:32,225
let's say k vertices,
to hit all the edges.

30
00:01:32,225 --> 00:01:37,497



31
00:01:37,497 --> 00:01:39,899
A different way of thinking
about this problem-- and a lot

32
00:01:39,899 --> 00:01:42,869
of these problems, you can think
of in a more logical context,

33
00:01:42,869 --> 00:01:53,279
formulas and so on-- this is
essentially a form of 2SAT

34
00:01:53,279 --> 00:02:00,320
with k true variables.

35
00:02:00,320 --> 00:02:03,022
It's even a positive 2SAT.

36
00:02:03,022 --> 00:02:06,593



37
00:02:06,593 --> 00:02:08,962
Because essentially,
you could think

38
00:02:08,962 --> 00:02:11,764
of there being a
variable for each vertex,

39
00:02:11,764 --> 00:02:14,067
whether you choose
it, and then the edge

40
00:02:14,067 --> 00:02:16,002
is just stating the
constraint that you should

41
00:02:16,002 --> 00:02:19,038
choose one or the
other endpoints

42
00:02:19,038 --> 00:02:22,709
and so that's a 2SAT constraint.

43
00:02:22,709 --> 00:02:24,911
And 2SAT is easy,
but when you say,

44
00:02:24,911 --> 00:02:27,280
I want to solve 2SAT with only
setting k of the variables

45
00:02:27,280 --> 00:02:30,416
to be true, then it becomes this
NP hard problem vertex cover.

46
00:02:30,416 --> 00:02:32,952
And so we have-- This was a
reduction from planar 3SAT

47
00:02:32,952 --> 00:02:36,156
to planar vertex cover, so
we know this problem is hard.

48
00:02:36,156 --> 00:02:39,692
Let's use it for some
things, and let's also

49
00:02:39,692 --> 00:02:46,766
prove some even more
related versions are hard.

50
00:02:46,766 --> 00:02:55,341
So this one was already
maximum degree 3,

51
00:02:55,341 --> 00:02:58,611
if we have some unused copies,
we'll get degree 2 vertices,

52
00:02:58,611 --> 00:03:00,613
but certainly every vertex
is at most degree 3.

53
00:03:00,613 --> 00:03:04,751
And it was planar, so
that's already cool.

54
00:03:04,751 --> 00:03:14,394
Planar max degree 3 is hard.

55
00:03:14,394 --> 00:03:17,330
Some polynomial versions
to be careful of if you're

56
00:03:17,330 --> 00:03:22,168
using vertex cover
as a starting point.

57
00:03:22,168 --> 00:03:25,038
One is what I call
exact vertex cover.

58
00:03:25,038 --> 00:03:31,077



59
00:03:31,077 --> 00:03:44,290
Each edge is incident to
exactly one chosen vertex.

60
00:03:44,290 --> 00:03:49,195



61
00:03:49,195 --> 00:03:51,831
So the vertex cover could
be one or the other.

62
00:03:51,831 --> 00:03:59,439
If you have exclusively, or
between those two, it's easy.

63
00:03:59,439 --> 00:04:02,308
And another version,
sort of the duel

64
00:04:02,308 --> 00:04:05,178
between vertices
and edges, one might

65
00:04:05,178 --> 00:04:10,216
call it edge cover,
which would be choose

66
00:04:10,216 --> 00:04:11,651
k edges to hit all vertices.

67
00:04:11,651 --> 00:04:19,359



68
00:04:19,359 --> 00:04:23,263
AUDIENCE: Doesn't exact
edge cover perfect matching?

69
00:04:23,263 --> 00:04:28,001
PROFESSOR: Exact vertex cover
is perfect matching, thank you.

70
00:04:28,001 --> 00:04:30,036
This is also essentially
maximum cardinality

71
00:04:30,036 --> 00:04:34,040
matching because the more
you can be a matching,

72
00:04:34,040 --> 00:04:35,642
the more efficient
you're going to be,

73
00:04:35,642 --> 00:04:37,777
and then every isolated
vertex after you

74
00:04:37,777 --> 00:04:39,312
have a maximum
cardinality matching,

75
00:04:39,312 --> 00:04:41,114
you just have to cover
those with one more.

76
00:04:41,114 --> 00:04:42,949
So both of these
reduce to matching.

77
00:04:42,949 --> 00:04:46,886
So it's obvious in
hindsight, but be careful,

78
00:04:46,886 --> 00:04:50,223
if you're ever doing vertex
cover, not to accidentally do

79
00:04:50,223 --> 00:04:52,525
one of these.

80
00:04:52,525 --> 00:04:54,861
OK, so this morning's.

81
00:04:54,861 --> 00:04:58,431



82
00:04:58,431 --> 00:05:00,867
Here's a cool version
of vertex cover.

83
00:05:00,867 --> 00:05:02,402
It can be useful.

84
00:05:02,402 --> 00:05:05,505
We'll use it in a moment to
prove a particular problem

85
00:05:05,505 --> 00:05:08,274
hard, connected vertex cover.

86
00:05:08,274 --> 00:05:09,876
So usually, with a
vertex cover, you

87
00:05:09,876 --> 00:05:11,444
imagine you're just
grabbing vertices

88
00:05:11,444 --> 00:05:12,979
from all over the graph.

89
00:05:12,979 --> 00:05:15,615
With connected vertex
cover, you require

90
00:05:15,615 --> 00:05:20,386
that the chosen vertices
induce a connected subgraph.

91
00:05:20,386 --> 00:05:37,603



92
00:05:37,603 --> 00:05:41,641
So this is not, obviously,
easier or harder as a problem.

93
00:05:41,641 --> 00:05:44,577
It's more restrictive
on the cover,

94
00:05:44,577 --> 00:05:49,649
but we can prove that
it's NP hard by reduction

95
00:05:49,649 --> 00:05:51,918
from this problem.

96
00:05:51,918 --> 00:05:53,753
And so in particular,
we'll get that it's NP

97
00:05:53,753 --> 00:05:59,225
hard for planar max
degree 4 graphs.

98
00:05:59,225 --> 00:06:14,774



99
00:06:14,774 --> 00:06:18,378
So here's the reduction.

100
00:06:18,378 --> 00:06:19,912
I think this reduction
is quite cool,

101
00:06:19,912 --> 00:06:22,982
because it uses planarity.

102
00:06:22,982 --> 00:06:24,717
It may not be necessary
to use planarity,

103
00:06:24,717 --> 00:06:28,654
but this reduction definitely
uses planarity in a rich way.

104
00:06:28,654 --> 00:06:31,124
So even if you were trying to
prove this without planarity,

105
00:06:31,124 --> 00:06:32,892
it would be more awkward.

106
00:06:32,892 --> 00:06:34,360
So, suppose you
have a planar graph

107
00:06:34,360 --> 00:06:38,798
and you want to find a minimum
vertex cover in this graph.

108
00:06:38,798 --> 00:06:41,467
We're going to modify
the graph in this way.

109
00:06:41,467 --> 00:06:44,837
This is yet another
Garey and Johnson paper.

110
00:06:44,837 --> 00:06:48,541
So you can see the original
faces of the graph,

111
00:06:48,541 --> 00:06:50,009
and then for each
face, we're going

112
00:06:50,009 --> 00:06:55,648
to add in sort of
a copy of the face.

113
00:06:55,648 --> 00:07:00,253
So also the outside face
gets this kind of curvy copy.

114
00:07:00,253 --> 00:07:02,355
And so in particular,
at every vertex

115
00:07:02,355 --> 00:07:05,992
there's now going to be
five copies of the vertex.

116
00:07:05,992 --> 00:07:08,828
One on the one incident face,
one on the other incident

117
00:07:08,828 --> 00:07:10,363
face, and then for
every one of these

118
00:07:10,363 --> 00:07:12,698
we're going to have an
extra leaf hanging off.

119
00:07:12,698 --> 00:07:13,733
Why leaves?

120
00:07:13,733 --> 00:07:17,570
Leaves are really cool, or
really annoying, or whatever.

121
00:07:17,570 --> 00:07:22,241
They're very forceful in
the case of vertex cover.

122
00:07:22,241 --> 00:07:26,012
If you look at a leaf--
So here's a leaf.

123
00:07:26,012 --> 00:07:28,481
It's connected to some vertex
that's presumably not a leaf,

124
00:07:28,481 --> 00:07:31,951
otherwise there'd be
an isolated component.

125
00:07:31,951 --> 00:07:35,721
It's never useful to put
this in the vertex cover.

126
00:07:35,721 --> 00:07:37,857
If you decide to put
this in the vertex cover,

127
00:07:37,857 --> 00:07:39,592
you might as well
choose this guy instead,

128
00:07:39,592 --> 00:07:41,527
because this covers more.

129
00:07:41,527 --> 00:07:43,963
It covers all the edges that
this one did, namely that one

130
00:07:43,963 --> 00:07:46,432
edge, and some other edges.

131
00:07:46,432 --> 00:07:48,134
Maybe it was already
in the vertex cover.

132
00:07:48,134 --> 00:07:49,101
Then it wasn't minimum.

133
00:07:49,101 --> 00:07:50,670
Then you got smaller.

134
00:07:50,670 --> 00:07:53,840
But you can assume there is
an optimal solution where

135
00:07:53,840 --> 00:07:58,010
you never put leaves
in the vertex cover.

136
00:07:58,010 --> 00:08:01,347
What that means is, wherever
we add a leaf like this,

137
00:08:01,347 --> 00:08:03,349
it basically forces
you-- It lets

138
00:08:03,349 --> 00:08:06,185
you know that you might as well
have this in the vertex cover.

139
00:08:06,185 --> 00:08:08,521
There is an optimal solution
where this is in the vertex

140
00:08:08,521 --> 00:08:11,257
cover, because the only other
option is that this one is,

141
00:08:11,257 --> 00:08:12,992
and then you can move it over.

142
00:08:12,992 --> 00:08:17,997
So these vertices on
the copies of the faces,

143
00:08:17,997 --> 00:08:21,834
those are all forced to
be in the cover, which

144
00:08:21,834 --> 00:08:26,205
means this entire copy of the
face, the inset copy the face,

145
00:08:26,205 --> 00:08:29,742
is completely covered
already, plus these edges

146
00:08:29,742 --> 00:08:33,613
are covered connecting
the inner copy of the face

147
00:08:33,613 --> 00:08:34,580
to the original face.

148
00:08:34,580 --> 00:08:38,818



149
00:08:38,818 --> 00:08:40,920
So there's still stuff to cover.

150
00:08:40,920 --> 00:08:42,989
So in particular, it's
still interesting to put

151
00:08:42,989 --> 00:08:44,924
one of the original
vertices in the cover.

152
00:08:44,924 --> 00:08:48,661
That would cover these
three, now every edge

153
00:08:48,661 --> 00:08:49,996
got cut into three parts.

154
00:08:49,996 --> 00:08:53,132
So this would cover
1/3 of the edge.

155
00:08:53,132 --> 00:08:54,867
The idea is, if you
put this in the cover

156
00:08:54,867 --> 00:08:57,169
and you cover those
three guys, we still

157
00:08:57,169 --> 00:08:59,539
have to cover these
two, and we'll

158
00:08:59,539 --> 00:09:03,743
do that by putting this
vertex in the cover.

159
00:09:03,743 --> 00:09:05,645
Because one of these two
has to be in in order

160
00:09:05,645 --> 00:09:08,848
to cover this middle
edge, and the idea

161
00:09:08,848 --> 00:09:11,017
is that you'll be able to
just put one of them in.

162
00:09:11,017 --> 00:09:13,553
You'll be able to put
exactly one of these two

163
00:09:13,553 --> 00:09:16,522
on every subdivided edge, if
and only if there is a vertex

164
00:09:16,522 --> 00:09:19,158
cover of the right size.

165
00:09:19,158 --> 00:09:25,197
So if I do the arithmetic
here, the claim

166
00:09:25,197 --> 00:09:35,775
is we added exactly 5 times
the original number of edges

167
00:09:35,775 --> 00:09:39,912
to the optimal vertex cover.

168
00:09:39,912 --> 00:09:49,655
5 because for every original
edge we added 2 here,

169
00:09:49,655 --> 00:09:53,125
2 here, and then 1 of these too.

170
00:09:53,125 --> 00:09:57,763
So there were 6 vertices
around this edge that we added,

171
00:09:57,763 --> 00:10:02,768
and if we can cover, say,
this edge using that vertex

172
00:10:02,768 --> 00:10:04,570
or cover this edge
using that vertex, which

173
00:10:04,570 --> 00:10:07,206
is the same as saying that this
original edge is covered by one

174
00:10:07,206 --> 00:10:09,709
side or the other, then we
only need one of these two guys

175
00:10:09,709 --> 00:10:12,311
and then we'll get away
with just 5 per edge.

176
00:10:12,311 --> 00:10:15,348
So the original thing has
a vertex cover of size k

177
00:10:15,348 --> 00:10:18,618
if and only if this new thing
has a vertex cover size of k

178
00:10:18,618 --> 00:10:21,954
plus 5 times the
number of edges.

179
00:10:21,954 --> 00:10:23,255
Question?

180
00:10:23,255 --> 00:10:28,127
AUDIENCE: What stops you
from taking one of the--

181
00:10:28,127 --> 00:10:29,996
PROFESSOR: Taking both
of these, for example?

182
00:10:29,996 --> 00:10:30,529
AUDIENCE: Yeah.

183
00:10:30,529 --> 00:10:30,830
PROFESSOR: Yeah.

184
00:10:30,830 --> 00:10:32,398
So that's a good
thing to worry about.

185
00:10:32,398 --> 00:10:34,300
Maybe you take both
and then you don't

186
00:10:34,300 --> 00:10:36,068
have to choose either
one, so it doesn't

187
00:10:36,068 --> 00:10:38,738
look like a vertex cover, but
this is a similar argument

188
00:10:38,738 --> 00:10:39,338
to the leaves.

189
00:10:39,338 --> 00:10:40,773
If you choose both
of these guys,

190
00:10:40,773 --> 00:10:43,142
because you know that
the other four are there,

191
00:10:43,142 --> 00:10:45,478
you can always move one
of them to the vertex.

192
00:10:45,478 --> 00:10:47,813
So you'll get a
recover vertex cover.

193
00:10:47,813 --> 00:10:50,349
AUDIENCE: [INAUDIBLE]
fives times the edges

194
00:10:50,349 --> 00:10:54,053
plus the number for
vertices because you also

195
00:10:54,053 --> 00:10:56,722
have to cover the
leaves off the vertices?

196
00:10:56,722 --> 00:10:57,723
PROFESSOR: These leaves?

197
00:10:57,723 --> 00:10:58,024
AUDIENCE: No, the one
with the vertices.

198
00:10:58,024 --> 00:10:59,925
PROFESSOR: Oh, these ones.

199
00:10:59,925 --> 00:11:01,060
Whoops.

200
00:11:01,060 --> 00:11:02,495
Oh, so it looks
like they're always

201
00:11:02,495 --> 00:11:04,664
increasing the degree to 4.

202
00:11:04,664 --> 00:11:07,166
Connected vertex, however, is
actually an important problem.

203
00:11:07,166 --> 00:11:09,335
People think about it a lot.

204
00:11:09,335 --> 00:11:12,304
For some kind of
networking applications,

205
00:11:12,304 --> 00:11:14,840
you want to build some backbone
that can reach everybody,

206
00:11:14,840 --> 00:11:17,743
you need a connected network.

207
00:11:17,743 --> 00:11:20,880
But Garey and Johnson's
original motivation

208
00:11:20,880 --> 00:11:25,184
for introducing that problem is
rectilinear Steiner tree, also

209
00:11:25,184 --> 00:11:26,519
an important networking problem.

210
00:11:26,519 --> 00:11:30,289
Steiner tree is about
usually you imagine

211
00:11:30,289 --> 00:11:33,759
you're given some space where
you can build a network,

212
00:11:33,759 --> 00:11:36,195
and you're given some things
that you want to interconnect.

213
00:11:36,195 --> 00:11:40,700
So maybe you're building a
new city around some existing

214
00:11:40,700 --> 00:11:42,568
houses, you're given
some points in the plane

215
00:11:42,568 --> 00:11:43,869
that represent houses.

216
00:11:43,869 --> 00:11:46,238
Now you want to build roads
to connect them all together.

217
00:11:46,238 --> 00:11:48,708
You want to minimize the amount
of roads you have to build,

218
00:11:48,708 --> 00:11:50,242
so you're going to build a tree.

219
00:11:50,242 --> 00:11:53,379
And Steiner tree means that
you can add intersections

220
00:11:53,379 --> 00:11:57,416
wherever you want, as opposed
to a minimum spanning tree,

221
00:11:57,416 --> 00:12:01,620
where you can only turn
at the given vertices.

222
00:12:01,620 --> 00:12:09,729
If you have some points
like this in the plane,

223
00:12:09,729 --> 00:12:11,263
the best way to
connect them together

224
00:12:11,263 --> 00:12:15,367
in the Euclidean metric is
to have-- I didn't draw it

225
00:12:15,367 --> 00:12:19,572
super well-- to have
120 degree angles at all

226
00:12:19,572 --> 00:12:21,974
the intersections,
something you can prove.

227
00:12:21,974 --> 00:12:24,810
Here, we're thinking about
rectilinear Steiner tree, which

228
00:12:24,810 --> 00:12:28,080
is the Manhattan version,
where you're only

229
00:12:28,080 --> 00:12:34,153
allowed to draw orthogonal
connections, like that.

230
00:12:34,153 --> 00:12:35,654
So you can still
add extra vertices

231
00:12:35,654 --> 00:12:37,323
if you want to minimize
the total length

232
00:12:37,323 --> 00:12:40,659
of these connections given
endpoints in the plane.

233
00:12:40,659 --> 00:12:44,964
This problem is NP hard,
and you can prove it

234
00:12:44,964 --> 00:12:46,132
in a very simple way.

235
00:12:46,132 --> 00:12:51,604
This is the reduction
from the previous problem.

236
00:12:51,604 --> 00:12:54,507
So the first step
is-- And the reason

237
00:12:54,507 --> 00:12:57,243
they care about max degree
4 in the previous problem

238
00:12:57,243 --> 00:13:01,113
is to draw the graph in the
plane in orthogonal drawings.

239
00:13:01,113 --> 00:13:03,382
So every vertex becomes
a point, every edge

240
00:13:03,382 --> 00:13:06,018
become some orthogonal path
connecting two vertices.

241
00:13:06,018 --> 00:13:08,287
We've done that in
previous proofs.

242
00:13:08,287 --> 00:13:10,890
So now everything's drawn in
the plane, something like this.

243
00:13:10,890 --> 00:13:13,692
And that each
vertex, we're going

244
00:13:13,692 --> 00:13:18,564
to erase a little
circle of radius 2,

245
00:13:18,564 --> 00:13:20,933
and then that leaves
a bunch of segments,

246
00:13:20,933 --> 00:13:23,736
and the segments
connected together,

247
00:13:23,736 --> 00:13:25,971
and now we're just going to
place along those segments

248
00:13:25,971 --> 00:13:28,541
a whole bunch of points.

249
00:13:28,541 --> 00:13:31,710
And so the idea is that
the Steiner tree should

250
00:13:31,710 --> 00:13:35,848
connect all those together, and
then it's left with a choice.

251
00:13:35,848 --> 00:13:38,017
And those are all going
to be distance 1 apart.

252
00:13:38,017 --> 00:13:40,619
Then it's left with a choice
of where to connect things

253
00:13:40,619 --> 00:13:42,955
together, which vertices.

254
00:13:42,955 --> 00:13:49,161
So a little bit more
formally, each of these edges

255
00:13:49,161 --> 00:13:55,234
is going to be scaled up by a
huge factor, 4 times n squared,

256
00:13:55,234 --> 00:13:59,071
where n, I think, is the
dimension of the n by n grid.

257
00:13:59,071 --> 00:14:03,943
So these are the original
grids, the dash lines.

258
00:14:03,943 --> 00:14:06,912
Originally, when you draw
it on a graph, on a grid,

259
00:14:06,912 --> 00:14:08,848
you imagine probably
these are unit length.

260
00:14:08,848 --> 00:14:13,552
Scale it up to the length
4n squared and then the rule

261
00:14:13,552 --> 00:14:16,722
is, wherever you have an
integer point along that line,

262
00:14:16,722 --> 00:14:17,923
add a dot.

263
00:14:17,923 --> 00:14:21,026
And so they will be spaced
with distances of 1.

264
00:14:21,026 --> 00:14:23,729
Over here, we have
distances of 2

265
00:14:23,729 --> 00:14:28,167
between the vertex, which is
not actually a point in the set,

266
00:14:28,167 --> 00:14:29,435
and here.

267
00:14:29,435 --> 00:14:33,172
And so distance of 4 between
any pairs of those points.

268
00:14:33,172 --> 00:14:35,841
Because these
distances are so huge,

269
00:14:35,841 --> 00:14:39,478
you never want to connect from
here to anywhere else that's

270
00:14:39,478 --> 00:14:41,981
not at this local intersection.

271
00:14:41,981 --> 00:14:42,948
OK?

272
00:14:42,948 --> 00:14:44,483
And there's an
argument about that,

273
00:14:44,483 --> 00:14:47,353
looking at these regions
of where you could possibly

274
00:14:47,353 --> 00:14:51,190
want to go, and there's only
those endpoints in there

275
00:14:51,190 --> 00:14:52,825
and these are really
cheap to connect.

276
00:14:52,825 --> 00:14:54,994
So it really only pays to
connect things in between.

277
00:14:54,994 --> 00:14:58,063



278
00:14:58,063 --> 00:14:59,565
So basically, you
show that you're

279
00:14:59,565 --> 00:15:03,035
forced to do all the
unit length connections,

280
00:15:03,035 --> 00:15:06,272
and now you just have to
make the thing connected.

281
00:15:06,272 --> 00:15:06,939
Question?

282
00:15:06,939 --> 00:15:08,807
AUDIENCE: Why 2?

283
00:15:08,807 --> 00:15:10,376
PROFESSOR: Because
2 is bigger than 1.

284
00:15:10,376 --> 00:15:13,746



285
00:15:13,746 --> 00:15:14,246
Yeah?

286
00:15:14,246 --> 00:15:16,582
AUDIENCE: I guess with the
vertex covers that you'd want

287
00:15:16,582 --> 00:15:18,984
to fill in that whole cross?

288
00:15:18,984 --> 00:15:22,087
But maybe there's a fear
that you would just connect--

289
00:15:22,087 --> 00:15:22,955
PROFESSOR: No.

290
00:15:22,955 --> 00:15:24,723
You won't fill in the whole
cross in the vertex cover.

291
00:15:24,723 --> 00:15:26,225
Let me tell what
you're going to do.

292
00:15:26,225 --> 00:15:28,494



293
00:15:28,494 --> 00:15:31,764
This proof is-- I mean, the
reduction is super simple,

294
00:15:31,764 --> 00:15:34,867
but the argument is confusing.

295
00:15:34,867 --> 00:15:37,836
So here's the idea.

296
00:15:37,836 --> 00:16:34,827



297
00:16:34,827 --> 00:16:36,962
So there's essentially
two things going on,

298
00:16:36,962 --> 00:16:38,897
but let's first
think about the case

299
00:16:38,897 --> 00:16:42,868
where I give you a connected
vertex cover of some size.

300
00:16:42,868 --> 00:16:47,806
What I'm going to do is
first-- or you can think

301
00:16:47,806 --> 00:16:50,242
of it in either order--
I'm, in particular,

302
00:16:50,242 --> 00:16:53,245
going to connect all
the vertices together.

303
00:16:53,245 --> 00:16:55,681
Now, there's no particular
reason to connect the vertices,

304
00:16:55,681 --> 00:16:58,317
but I'm just going to do it
anyway, or think about doing it

305
00:16:58,317 --> 00:17:01,720
anyway, by a spanning tree.

306
00:17:01,720 --> 00:17:03,922
So there's lots of
redundant connectivity here.

307
00:17:03,922 --> 00:17:05,491
I don't need to
connect this, to this,

308
00:17:05,491 --> 00:17:06,925
to this all the way around.

309
00:17:06,925 --> 00:17:08,861
I can drop one of
those connections

310
00:17:08,861 --> 00:17:11,296
because I just need
to be connected,

311
00:17:11,296 --> 00:17:12,831
I just need a spanning tree.

312
00:17:12,831 --> 00:17:20,005
And in general, there are v
vertices to connect together,

313
00:17:20,005 --> 00:17:26,612
and each one of them costs
2, in a certain sense.

314
00:17:26,612 --> 00:17:30,282
To connect a vertex to
an incident edge costs 2.

315
00:17:30,282 --> 00:17:33,485
And so there are v minus 1
edges in the spanning tree,

316
00:17:33,485 --> 00:17:34,953
so I'm going to pay that.

317
00:17:34,953 --> 00:17:36,889
On the other hand, I
also knew that every edge

318
00:17:36,889 --> 00:17:39,058
is connected to some vertex.

319
00:17:39,058 --> 00:17:41,226
That's the vertex
cover constraint,

320
00:17:41,226 --> 00:17:43,362
and so every edge is
going to pay 2 in order

321
00:17:43,362 --> 00:17:44,797
to connect to a vertex.

322
00:17:44,797 --> 00:17:47,266
So the weird thing here is the
involvement of the vertices,

323
00:17:47,266 --> 00:17:48,700
even though there's
no point there.

324
00:17:48,700 --> 00:17:52,137



325
00:17:52,137 --> 00:17:53,906
That's funny.

326
00:17:53,906 --> 00:17:56,508
Maybe we could add a point there
and make it a little clearer,

327
00:17:56,508 --> 00:18:01,280
but instead of thinking
about connections from edges

328
00:18:01,280 --> 00:18:03,515
to edges, which
would cost 4, that's

329
00:18:03,515 --> 00:18:05,851
sort of the wrong way to think
about it, because there's

330
00:18:05,851 --> 00:18:06,819
two things going on.

331
00:18:06,819 --> 00:18:09,488
One is just to get the edges
to connect to something,

332
00:18:09,488 --> 00:18:11,356
and then there's getting
all that something's

333
00:18:11,356 --> 00:18:12,858
connected together.

334
00:18:12,858 --> 00:18:14,860
So this is sort of a
spanning tree thing,

335
00:18:14,860 --> 00:18:19,098
and this is more of the actual
vertex cover constraint.

336
00:18:19,098 --> 00:18:20,766
Together, they give
the connector vertex

337
00:18:20,766 --> 00:18:21,500
cover constraint.

338
00:18:21,500 --> 00:18:23,735
It would be impossible
for a Steiner tree

339
00:18:23,735 --> 00:18:26,071
to do one without the other.

340
00:18:26,071 --> 00:18:28,707
But essentially-- I mean,
I'm going to wave my hands

341
00:18:28,707 --> 00:18:30,843
a little bit here,
but you work it out.

342
00:18:30,843 --> 00:18:34,012
In all cases, the number
of connections you need

343
00:18:34,012 --> 00:18:36,582
is exactly this if
there's a vertex cover,

344
00:18:36,582 --> 00:18:39,751
and this will have to go up
if there isn't a vertex cover.

345
00:18:39,751 --> 00:18:43,188



346
00:18:43,188 --> 00:18:45,357
That was vertex cover.

347
00:18:45,357 --> 00:18:47,693
Let's do coloring.

348
00:18:47,693 --> 00:18:52,030
This will be, I think, more fun.

349
00:18:52,030 --> 00:18:57,903
So first, let's prove
that coloring is hard.

350
00:18:57,903 --> 00:19:00,772
So in general, in
the coloring problem,

351
00:19:00,772 --> 00:19:02,875
also called chromatic
number, you're given a graph

352
00:19:02,875 --> 00:19:04,376
and you're given a number k.

353
00:19:04,376 --> 00:19:06,678
You want to color the
vertices of the graph using

354
00:19:06,678 --> 00:19:10,048
k different colors,
so that's a mapping

355
00:19:10,048 --> 00:19:13,819
from the vertices
to the colors such

356
00:19:13,819 --> 00:19:16,755
that no edge is monochromatic.

357
00:19:16,755 --> 00:19:22,628



358
00:19:22,628 --> 00:19:27,466
So you want a mapping, let's
call it c, from the vertices

359
00:19:27,466 --> 00:19:43,916
to 1 up to k such that for
every edge, let me call it vw,

360
00:19:43,916 --> 00:19:47,886
the color of v does not
equal to color of w.

361
00:19:47,886 --> 00:19:50,622
So that's the no
monochromatic edge constraint.

362
00:19:50,622 --> 00:19:52,424
It's usual coloring
for vertex coloring.

363
00:19:52,424 --> 00:19:55,194
You could also talk about
edge coloring and so on,

364
00:19:55,194 --> 00:19:57,496
and this problem is easy.

365
00:19:57,496 --> 00:20:01,900
If k is 1, then you
better not have any edges.

366
00:20:01,900 --> 00:20:03,535
It's easy if k is 2.

367
00:20:03,535 --> 00:20:05,103
That's bipartiteness testing.

368
00:20:05,103 --> 00:20:07,372
You can just greedily
color and you can never

369
00:20:07,372 --> 00:20:10,042
make a mistake unless the
graph isn't bipartite.

370
00:20:10,042 --> 00:20:12,511
But it becomes hard
when k equals 3,

371
00:20:12,511 --> 00:20:14,446
so that's a fun transition.

372
00:20:14,446 --> 00:20:18,150
And so here is why vertex
3-coloring is hard as proved

373
00:20:18,150 --> 00:20:21,286
by Garey, Johnson, Stockmeyer.

374
00:20:21,286 --> 00:20:23,355
Reduction from 3SAT.

375
00:20:23,355 --> 00:20:26,491
So we have, on the one
hand, variable gadget.

376
00:20:26,491 --> 00:20:32,764
We're going to represent
XI and XI bar like this.

377
00:20:32,764 --> 00:20:35,634
I mean, coloring should
feel a lot like SAT.

378
00:20:35,634 --> 00:20:42,941
In fact, you might think
of this as xor 2SAT,

379
00:20:42,941 --> 00:20:46,011
if you think of xor as
the not equals operator.

380
00:20:46,011 --> 00:20:51,583
But it's over ternary logic.

381
00:20:51,583 --> 00:20:54,453
So this gets back to
a question from class.

382
00:20:54,453 --> 00:20:55,687
What about ternary logic?

383
00:20:55,687 --> 00:20:58,857
You can think of 3-colorings
like ternary logic,

384
00:20:58,857 --> 00:21:01,326
just like on the problem set.

385
00:21:01,326 --> 00:21:05,030
So what we're going
to do is we're

386
00:21:05,030 --> 00:21:06,632
going to have one
copy of this gadget.

387
00:21:06,632 --> 00:21:07,799
I call it a colors gadget.

388
00:21:07,799 --> 00:21:10,269
It's just a triangle,
and so all three colors

389
00:21:10,269 --> 00:21:12,537
must appear on that triangle.

390
00:21:12,537 --> 00:21:15,040
We don't know in what order,
but we don't really care.

391
00:21:15,040 --> 00:21:17,509
We can just define the one.

392
00:21:17,509 --> 00:21:19,778
The color that this guy's
assigned, we'll call it red.

393
00:21:19,778 --> 00:21:21,880
It could be 1, 2, or 3,
but it doesn't matter.

394
00:21:21,880 --> 00:21:24,783
Call the color that this
guy's assigned green,

395
00:21:24,783 --> 00:21:26,685
and this one blue,
and hopefully you're

396
00:21:26,685 --> 00:21:29,955
not sufficiently colorblind to
be unable to distinguish those.

397
00:21:29,955 --> 00:21:32,190
But I did check with
a color blind tester,

398
00:21:32,190 --> 00:21:34,960
they do seem at least
different, but it might

399
00:21:34,960 --> 00:21:36,228
be hard to know the names.

400
00:21:36,228 --> 00:21:36,728
All right.

401
00:21:36,728 --> 00:21:40,799
So this green vertex is
connected to both XI and XI bar

402
00:21:40,799 --> 00:21:42,868
for each of the
variables, which means

403
00:21:42,868 --> 00:21:45,003
they can either be red or blue.

404
00:21:45,003 --> 00:21:48,740
And I want to red to mean
false, blue to mean true.

405
00:21:48,740 --> 00:21:51,310
So that's cool, that's
nice, regular binary logic.

406
00:21:51,310 --> 00:21:53,278
And then we're going to
combine those variables

407
00:21:53,278 --> 00:21:54,813
with this clause gadget.

408
00:21:54,813 --> 00:21:57,916
Clause gadget also has
one node out at the end

409
00:21:57,916 --> 00:22:00,052
here connected to
both green and red,

410
00:22:00,052 --> 00:22:02,354
which forces it to be blue.

411
00:22:02,354 --> 00:22:03,822
But otherwise,
it's kind of free.

412
00:22:03,822 --> 00:22:06,058
So we have instances
of literals.

413
00:22:06,058 --> 00:22:07,859
These don't have to
be the positive forms,

414
00:22:07,859 --> 00:22:11,263
this could be XI bar,
XJ bar, whatever.

415
00:22:11,263 --> 00:22:13,098
And now we're going to
think about coloring.

416
00:22:13,098 --> 00:22:16,435
So let me show you a couple
of possible colorings.

417
00:22:16,435 --> 00:22:17,636
Here's a valid coloring.

418
00:22:17,636 --> 00:22:19,938
It's valid because at least--
This is going to be 3SAT,

419
00:22:19,938 --> 00:22:23,141
so at least one of these should
be true, true means blue.

420
00:22:23,141 --> 00:22:26,411
This guy is blue,
and in general,

421
00:22:26,411 --> 00:22:29,114
what we're doing is
kind of taking an

422
00:22:29,114 --> 00:22:35,187
or of this pair and then an
or of that pair with this one

423
00:22:35,187 --> 00:22:38,857
variable, one
literal, I should say.

424
00:22:38,857 --> 00:22:44,062
And because this is not
red, I can put red here.

425
00:22:44,062 --> 00:22:45,897
Again, all three
colors must appear.

426
00:22:45,897 --> 00:22:47,799
So in general,
what I want to do--

427
00:22:47,799 --> 00:22:50,335
you'll see why in a moment--
is push the reds as far

428
00:22:50,335 --> 00:22:51,570
back as possible.

429
00:22:51,570 --> 00:22:55,140
So if I can put a red or
red here or here, I'm happy,

430
00:22:55,140 --> 00:22:58,343
and I put some other
color over there.

431
00:22:58,343 --> 00:23:01,880
I guess I'll put-- It
doesn't matter which

432
00:23:01,880 --> 00:23:04,316
one is blue or green here.

433
00:23:04,316 --> 00:23:06,218
As long as I can
put red back here,

434
00:23:06,218 --> 00:23:09,087
I can also put red back here.

435
00:23:09,087 --> 00:23:10,789
And it could be if
this one is blue,

436
00:23:10,789 --> 00:23:12,257
I could also put
the red guy here,

437
00:23:12,257 --> 00:23:13,558
and I have the flexibility.

438
00:23:13,558 --> 00:23:16,061
But as long as I can put
red either here or here,

439
00:23:16,061 --> 00:23:18,330
this one will not be red.

440
00:23:18,330 --> 00:23:20,399
And furthermore, I
can make it not green,

441
00:23:20,399 --> 00:23:23,535
and that's what these
constraints tell me.

442
00:23:23,535 --> 00:23:25,804
This vertex should
not be red or green.

443
00:23:25,804 --> 00:23:27,539
That's satisfied here.

444
00:23:27,539 --> 00:23:30,442
And you can show, you
can check all cases,

445
00:23:30,442 --> 00:23:33,412
or just sort of go
through that argument.

446
00:23:33,412 --> 00:23:36,148
The only bad case is
when they're all red,

447
00:23:36,148 --> 00:23:38,750
because then, looking
at this triangle,

448
00:23:38,750 --> 00:23:40,752
the red one has to
be pushed forward.

449
00:23:40,752 --> 00:23:43,021
And then, because this one
is red and this one is red,

450
00:23:43,021 --> 00:23:45,424
again, this red has
to be pushed forward,

451
00:23:45,424 --> 00:23:46,892
but then we have a
red-red adjacency

452
00:23:46,892 --> 00:23:48,994
and that's not allowed.

453
00:23:48,994 --> 00:23:53,231
So that is 3SAT to
vertex 3-coloring.

454
00:23:53,231 --> 00:23:53,732
Cool.

455
00:23:53,732 --> 00:23:59,671
Now, this does not
preserve planarity,

456
00:23:59,671 --> 00:24:01,273
because the colors
gadget is connected

457
00:24:01,273 --> 00:24:03,475
to pretty much everything,
and it does not

458
00:24:03,475 --> 00:24:05,343
preserve bounded degree.

459
00:24:05,343 --> 00:24:05,911
Question.

460
00:24:05,911 --> 00:24:06,511
AUDIENCE: Yeah.

461
00:24:06,511 --> 00:24:09,714
The variable gadget doesn't seem
to be connected to the clause

462
00:24:09,714 --> 00:24:10,482
gadget here.

463
00:24:10,482 --> 00:24:11,183
PROFESSOR: Sorry.

464
00:24:11,183 --> 00:24:12,851
I mean, when I
sit right XI here,

465
00:24:12,851 --> 00:24:15,287
I mean it's the same
vertex as one of these.

466
00:24:15,287 --> 00:24:15,921
Yeah.

467
00:24:15,921 --> 00:24:18,156
So if there's n
variables, n clauses,

468
00:24:18,156 --> 00:24:20,892
it's going to be 2n
of these vertices

469
00:24:20,892 --> 00:24:24,996
and then they're shared
among the n clauses.

470
00:24:24,996 --> 00:24:26,998
It's hard to draw,
because actually they're

471
00:24:26,998 --> 00:24:31,570
identified as opposed
to connected by an edge.

472
00:24:31,570 --> 00:24:33,405
Other questions?

473
00:24:33,405 --> 00:24:33,905
All right.

474
00:24:33,905 --> 00:24:37,409
So I think first
we make it planar.

475
00:24:37,409 --> 00:24:42,113
We have a new crossover gadget
for specific to 3-coloring.

476
00:24:42,113 --> 00:24:44,115
Planar 3SAT doesn't seem
to help immediately,

477
00:24:44,115 --> 00:24:45,550
so we're just going
to, because we

478
00:24:45,550 --> 00:24:47,519
have all of these
connections from colors

479
00:24:47,519 --> 00:24:53,191
gadget to everybody,
plug this in whenever

480
00:24:53,191 --> 00:24:54,326
we have an intersection.

481
00:24:54,326 --> 00:24:57,729
And the idea, locally,
is that whatever color

482
00:24:57,729 --> 00:24:59,397
is assigned to this
vertex, x, must

483
00:24:59,397 --> 00:25:01,566
be the same as the color
assigned to this vertex,

484
00:25:01,566 --> 00:25:05,170
x prime, and similarly,
y, and y prime.

485
00:25:05,170 --> 00:25:07,072
And they're free
of each other, you

486
00:25:07,072 --> 00:25:09,174
can do any assignment to
x, any assignment to y,

487
00:25:09,174 --> 00:25:11,476
and this will be satisfiable.

488
00:25:11,476 --> 00:25:14,379
I'll give you some colorings
to give you-- I mean,

489
00:25:14,379 --> 00:25:16,581
this is essentially two
cases, which is either

490
00:25:16,581 --> 00:25:20,018
x and x prime have the
same color as y and y prime

491
00:25:20,018 --> 00:25:21,853
or they have different colors.

492
00:25:21,853 --> 00:25:23,321
So here's the same
color case, you

493
00:25:23,321 --> 00:25:25,690
get this nice
rotational symmetry.

494
00:25:25,690 --> 00:25:29,561
In general, you've
got this wheel pattern

495
00:25:29,561 --> 00:25:34,599
of four triangles, and
you have some color here,

496
00:25:34,599 --> 00:25:37,469
and then that forced these guys
to alternate in the other two

497
00:25:37,469 --> 00:25:40,572
colors available
around that center,

498
00:25:40,572 --> 00:25:42,274
and then it essentially
communicates

499
00:25:42,274 --> 00:25:44,709
the information you need.

500
00:25:44,709 --> 00:25:46,811
It's hard to do sort of
a straight line argument

501
00:25:46,811 --> 00:25:49,681
about why this is the case,
other than to just try

502
00:25:49,681 --> 00:25:51,483
all the possibilities.

503
00:25:51,483 --> 00:25:53,184
But there's, again,
lots of triangles.

504
00:25:53,184 --> 00:25:55,720
So once you know this is red,
you know one of these is green,

505
00:25:55,720 --> 00:25:57,455
and one of them is blue.

506
00:25:57,455 --> 00:25:59,324
Could go one way or the
other at this point.

507
00:25:59,324 --> 00:26:01,560
I think you could actually
do it one way or the other

508
00:26:01,560 --> 00:26:03,228
and just flip all the
greens with blues,

509
00:26:03,228 --> 00:26:06,598
and vice versa, because green
and blue is, in this case,

510
00:26:06,598 --> 00:26:09,100
local to the gadget.

511
00:26:09,100 --> 00:26:12,404
And, anyway, you end up with,
once these two are set red,

512
00:26:12,404 --> 00:26:17,342
these two are forced to
be set red by casework.

513
00:26:17,342 --> 00:26:22,347
Here is the other case, when
xx prime is different from yy

514
00:26:22,347 --> 00:26:25,250
prime, or you could say
x and y are different,

515
00:26:25,250 --> 00:26:27,552
and then, again, it forces
x to propagate through,

516
00:26:27,552 --> 00:26:28,486
y to propagate through.

517
00:26:28,486 --> 00:26:32,624
We still get alternation
here, but now the unused color

518
00:26:32,624 --> 00:26:35,827
is in the center, whereas
before, this picture,

519
00:26:35,827 --> 00:26:38,863
we had the center color was
the color used by all three,

520
00:26:38,863 --> 00:26:39,731
or all four of them.

521
00:26:39,731 --> 00:26:41,733
On the outside
here, it's the color

522
00:26:41,733 --> 00:26:44,102
that's not any of those two.

523
00:26:44,102 --> 00:26:49,741
And, again, it's forced
by playing around.

524
00:26:49,741 --> 00:26:50,241
OK.

525
00:26:50,241 --> 00:26:52,711
So that means we
have a figure here

526
00:26:52,711 --> 00:26:54,913
about how you actually
use this crossover

527
00:26:54,913 --> 00:26:57,949
gadget because there's this
issue of identification,

528
00:26:57,949 --> 00:26:59,484
which is little bit subtle.

529
00:26:59,484 --> 00:27:02,654
So if you have an edge that's
crossed by a bunch of edges,

530
00:27:02,654 --> 00:27:04,155
you intuitively
want to stick this

531
00:27:04,155 --> 00:27:05,991
into each of the crossings.

532
00:27:05,991 --> 00:27:08,760
But because this is copying
the value here to here,

533
00:27:08,760 --> 00:27:10,495
it's really just like
taking this vertex

534
00:27:10,495 --> 00:27:13,365
and pushing it to the
other side of the edge.

535
00:27:13,365 --> 00:27:15,300
So when you throw
in this crossover,

536
00:27:15,300 --> 00:27:19,237
you want to identify the
left vertex of the crossover

537
00:27:19,237 --> 00:27:22,607
with the original
vertex on the left side,

538
00:27:22,607 --> 00:27:24,943
but not identify it
on the right side.

539
00:27:24,943 --> 00:27:26,311
Therefore, overall,
there's still

540
00:27:26,311 --> 00:27:30,115
one edge connecting x and y
because this is essentially

541
00:27:30,115 --> 00:27:33,218
a copy of x, but you still
need that edge to connect to y.

542
00:27:33,218 --> 00:27:35,020
So you don't want to
identify both sides,

543
00:27:35,020 --> 00:27:36,821
you don't want to
identify on neither side,

544
00:27:36,821 --> 00:27:38,790
because that would be two edges.

545
00:27:38,790 --> 00:27:39,691
Identify on one side.

546
00:27:39,691 --> 00:27:42,227
And it's like a vertex
cover, but you just

547
00:27:42,227 --> 00:27:46,731
pick one side for
each edge arbitrarily.

548
00:27:46,731 --> 00:27:51,736
And that is planar vertex
3-coloring not bound

549
00:27:51,736 --> 00:27:53,571
to degree yet.

550
00:27:53,571 --> 00:27:54,072
OK?

551
00:27:54,072 --> 00:27:55,674
Next reduction.

552
00:27:55,674 --> 00:27:59,177
This is in the same paper.

553
00:27:59,177 --> 00:28:00,712
Here's how to
simulate high degree.

554
00:28:00,712 --> 00:28:01,980
I mean, it's pretty intuitive.

555
00:28:01,980 --> 00:28:04,382
Once you have the
ability to copy color,

556
00:28:04,382 --> 00:28:08,553
you can use it to
get high degree.

557
00:28:08,553 --> 00:28:11,756
OK, I'll talk about the actual
degree bound in the moment,

558
00:28:11,756 --> 00:28:13,992
but let's say we're
aiming for max degree 4.

559
00:28:13,992 --> 00:28:16,594



560
00:28:16,594 --> 00:28:19,264
This one, you can actually
argue in a very simple way.

561
00:28:19,264 --> 00:28:20,331
So here's a little gadget.

562
00:28:20,331 --> 00:28:22,801
I claim it makes three
copies of this color,

563
00:28:22,801 --> 00:28:25,503
or two copies of the color at x.

564
00:28:25,503 --> 00:28:26,971
So you've got these
three vertices.

565
00:28:26,971 --> 00:28:28,640
One of them's blue,
one of them's green.

566
00:28:28,640 --> 00:28:31,109
Doesn't matter which is which,
but then this vertex must

567
00:28:31,109 --> 00:28:34,746
be red because of that
triangle, and then this vertex

568
00:28:34,746 --> 00:28:36,715
must be green because
of that triangle,

569
00:28:36,715 --> 00:28:39,284
then this vertex must be blue
because of that triangle,

570
00:28:39,284 --> 00:28:42,220
this one must be red,
and this one must be red.

571
00:28:42,220 --> 00:28:44,723
So that's a really
easy one to argue.

572
00:28:44,723 --> 00:28:47,125
And so, this is not
very interesting,

573
00:28:47,125 --> 00:28:48,827
because we made two copies.

574
00:28:48,827 --> 00:28:50,495
This will simulate
a degree 3 vertex,

575
00:28:50,495 --> 00:28:52,564
which we don't worry about.

576
00:28:52,564 --> 00:28:54,332
But where it gets
interesting, if you just

577
00:28:54,332 --> 00:28:55,900
string a bunch of
these together here,

578
00:28:55,900 --> 00:28:58,403
we end up with five
copies of a single color,

579
00:28:58,403 --> 00:29:01,072
and so you can connect with
a single edge out here,

580
00:29:01,072 --> 00:29:03,341
let's say.

581
00:29:03,341 --> 00:29:05,744
I guess you could even
afford two edges there.

582
00:29:05,744 --> 00:29:07,812
In particular, we can
use this to simulate

583
00:29:07,812 --> 00:29:14,552
one vertex of degree 5 and we
will end up with max degree 4.

584
00:29:14,552 --> 00:29:17,689
Degree 4 Because some of
these vertices have degree 4.

585
00:29:17,689 --> 00:29:19,891
Actually, most of them do.

586
00:29:19,891 --> 00:29:22,861
AUDIENCE: Could you have just
used the crossover gadget

587
00:29:22,861 --> 00:29:25,330
as a high degree gadget?

588
00:29:25,330 --> 00:29:26,598
PROFESSOR: Oh, in a circle.

589
00:29:26,598 --> 00:29:28,099
Yeah, that would
also work, I think.

590
00:29:28,099 --> 00:29:29,100
Do you have a problem?

591
00:29:29,100 --> 00:29:31,536
AUDIENCE: There are degree 7
vertices when you pit together

592
00:29:31,536 --> 00:29:32,570
two of these?

593
00:29:32,570 --> 00:29:33,171
You've moved--

594
00:29:33,171 --> 00:29:34,672
[INTERPOSING VOICES]

595
00:29:34,672 --> 00:29:36,274
PROFESSOR: Degree 6.

596
00:29:36,274 --> 00:29:38,042
Yeah.

597
00:29:38,042 --> 00:29:38,576
Well, OK.

598
00:29:38,576 --> 00:29:40,545
So that will give
you max degree 6,

599
00:29:40,545 --> 00:29:42,180
and this gives you max degree 4.

600
00:29:42,180 --> 00:29:42,680
Yeah.

601
00:29:42,680 --> 00:29:44,516
If we do is after
the crossover gadget,

602
00:29:44,516 --> 00:29:46,718
then the crossover
gadget will become happy.

603
00:29:46,718 --> 00:29:49,788



604
00:29:49,788 --> 00:29:50,922
So what's the conclusion?

605
00:29:50,922 --> 00:30:01,266
Planar max degree 4,
3-coloring is hard.

606
00:30:01,266 --> 00:30:04,536



607
00:30:04,536 --> 00:30:14,646
But be careful, max
degree 3, 3-coloring

608
00:30:14,646 --> 00:30:24,022
is easy polynomial time
unless your graph is k4.

609
00:30:24,022 --> 00:30:25,390
So one counter example.

610
00:30:25,390 --> 00:30:26,858
This is always possible.

611
00:30:26,858 --> 00:30:33,097
This is called Burke's
theorem from 1941.

612
00:30:33,097 --> 00:30:35,800
So in general, if you
have max degree delta,

613
00:30:35,800 --> 00:30:39,270
there's a delta coloring unless
a couple of bad things happen.

614
00:30:39,270 --> 00:30:44,175
Odd cycle or a complete graph.

615
00:30:44,175 --> 00:30:44,843
So that's cool.

616
00:30:44,843 --> 00:30:46,377
AUDIENCE: What do
you mean if it's k4

617
00:30:46,377 --> 00:30:48,479
and then it doesn't work?

618
00:30:48,479 --> 00:30:51,149
PROFESSOR: k4
requires four colors.

619
00:30:51,149 --> 00:30:53,484
AUDIENCE: But then when finding
whether or not there's--

620
00:30:53,484 --> 00:30:55,753
PROFESSOR: But k4
has max degree 3.

621
00:30:55,753 --> 00:30:57,589
AUDIENCE: [INAUDIBLE]
polynomial figure out

622
00:30:57,589 --> 00:30:58,623
if there's a 3 colorable?

623
00:30:58,623 --> 00:31:00,859
PROFESSOR: It's
polynomial in all cases,

624
00:31:00,859 --> 00:31:04,295
but I'm saying every
max degree 3 graph is

625
00:31:04,295 --> 00:31:06,264
3 colorable except for k4.

626
00:31:06,264 --> 00:31:08,566
So the decision
problem is, am I k4.

627
00:31:08,566 --> 00:31:13,104
Or I guess, am I not k4 would
be the 3-coloring problem.

628
00:31:13,104 --> 00:31:14,939
AUDIENCE: The word
planar isn't up there.

629
00:31:14,939 --> 00:31:19,043
PROFESSOR: Right, even without
planar, it's polynomial.

630
00:31:19,043 --> 00:31:20,912
Don't need planarity
for that algorithm

631
00:31:20,912 --> 00:31:23,848
for testing for k4ness.

632
00:31:23,848 --> 00:31:26,451
And I didn't check,
but I'm pretty sure.

633
00:31:26,451 --> 00:31:28,186
Usually once the
decision problem is easy,

634
00:31:28,186 --> 00:31:30,221
also the actual coloring
algorithm is easy,

635
00:31:30,221 --> 00:31:31,022
but I didn't check.

636
00:31:31,022 --> 00:31:34,259
I assume there's a polynomial
coloring algorithm, not just

637
00:31:34,259 --> 00:31:36,861
a decision algorithm, but
we should double check

638
00:31:36,861 --> 00:31:40,298
before you cite that result.

639
00:31:40,298 --> 00:31:43,868
AUDIENCE: You can
[INAUDIBLE], make

640
00:31:43,868 --> 00:31:46,738
yourself a [INAUDIBLE] gadget
and then try probing things.

641
00:31:46,738 --> 00:31:47,605
PROFESSOR: Oh, right.

642
00:31:47,605 --> 00:31:49,140
You could reduce
the decision problem

643
00:31:49,140 --> 00:31:51,109
to the actual coloring problem.

644
00:31:51,109 --> 00:31:53,177
You can test whether two
guys have the same color

645
00:31:53,177 --> 00:31:55,680
by a bunch of probes.

646
00:31:56,648 --> 00:31:58,816
The next problem I
want to talk about

647
00:31:58,816 --> 00:32:01,586
is a little different,
another graph problem.

648
00:32:01,586 --> 00:32:09,327



649
00:32:09,327 --> 00:32:10,561
It's called graph orientation.

650
00:32:10,561 --> 00:32:13,131



651
00:32:13,131 --> 00:32:18,803
Kind of like edge coloring, but
the colors differ on each side.

652
00:32:18,803 --> 00:32:24,742
So a graph orientation.

653
00:32:24,742 --> 00:32:29,113



654
00:32:29,113 --> 00:32:30,448
This is a pretty recent problem.

655
00:32:30,448 --> 00:32:34,619
It was introduced in 2012,
but I think it's very cool

656
00:32:34,619 --> 00:32:38,923
and deserves much more study.

657
00:32:38,923 --> 00:32:50,001
So you're given an
undirected graph

658
00:32:50,001 --> 00:32:55,340
and you want to find an
orientation-- orientation

659
00:32:55,340 --> 00:32:57,408
means for every
edge, you give it

660
00:32:57,408 --> 00:33:14,192
a direction-- satisfying
certain vertex constraints,

661
00:33:14,192 --> 00:33:17,996
and there are three types of
vertices, three types of vertex

662
00:33:17,996 --> 00:33:18,496
constraints.

663
00:33:18,496 --> 00:33:22,834



664
00:33:22,834 --> 00:33:33,945
They are 1-in-3,
2-in-3, and 0 or 3.

665
00:33:33,945 --> 00:33:35,279
They all end in 3.

666
00:33:35,279 --> 00:33:38,583
I didn't mention, this
is a 3 regular graph.

667
00:33:38,583 --> 00:33:43,521
Every vertex has
degree 3, and so

668
00:33:43,521 --> 00:33:45,623
if you look at an orientation,
every vertex either

669
00:33:45,623 --> 00:33:55,867
has 3 in, 0 out, 2 in, 1 out,
1 in, 2 out, or 0 in, 3 out.

670
00:33:55,867 --> 00:34:00,138
And this problem is NP hard.

671
00:34:00,138 --> 00:34:03,408
Here is a simple
reduction from 3SAT.

672
00:34:03,408 --> 00:34:06,177
That's right, 1 in 3SAT.

673
00:34:06,177 --> 00:34:08,413
So we're going to have
a variable gadget, which

674
00:34:08,413 --> 00:34:13,117
is just this loop of
a cycle in the graph.

675
00:34:13,117 --> 00:34:16,988
And for each of
these vertices that's

676
00:34:16,988 --> 00:34:20,124
a solid black
circle is a 0 or 3.

677
00:34:20,124 --> 00:34:21,859
So that means in any
solution-- here's

678
00:34:21,859 --> 00:34:24,762
a solution-- you're going
to alternate between all in

679
00:34:24,762 --> 00:34:27,231
and all out, and
then all in, all out.

680
00:34:27,231 --> 00:34:30,134
So this is going to
represent x and x-bar.

681
00:34:30,134 --> 00:34:33,004
What the parity of that
cycle is is up to you,

682
00:34:33,004 --> 00:34:36,040
you could either make all the
x's all in or all the x-bars

683
00:34:36,040 --> 00:34:39,310
all in, and that corresponds
to x being true or false.

684
00:34:39,310 --> 00:34:42,447
I think in means
false in this case.

685
00:34:42,447 --> 00:34:49,187
And then for the clauses, we're
going to use a 1 in 3 gadget.

686
00:34:49,187 --> 00:34:52,190
It's because that's
a 1 in 3SAT clause.

687
00:34:52,190 --> 00:34:54,125
We want exactly one
of these three things

688
00:34:54,125 --> 00:34:56,027
to be in coming to the clause.

689
00:34:56,027 --> 00:35:00,198
That gives us exactly one
of them being set to true.

690
00:35:00,198 --> 00:35:06,270
Now, here we're
allowing negations.

691
00:35:06,270 --> 00:35:08,339
We know that's not
necessary for 1 in 3SAT,

692
00:35:08,339 --> 00:35:13,177
but we can in this proof, so
they're drawn here anyway.

693
00:35:13,177 --> 00:35:18,916
But to make it a little bit
weird, one issue in this style,

694
00:35:18,916 --> 00:35:22,286
or in this reduction,
really I just want

695
00:35:22,286 --> 00:35:23,588
a whole bunch of copies of x.

696
00:35:23,588 --> 00:35:26,257
But I get all these
copies of x-bar,

697
00:35:26,257 --> 00:35:28,292
and I need to put
them somewhere.

698
00:35:28,292 --> 00:35:29,694
Every vertex has
to have degree 3,

699
00:35:29,694 --> 00:35:32,296
so this has to go to something.

700
00:35:32,296 --> 00:35:35,833
And so their solution for
doing that is for every clause,

701
00:35:35,833 --> 00:35:40,004
we also build the anti-clause
and make it false.

702
00:35:40,004 --> 00:35:43,641
So we want exactly two
of the negated versions

703
00:35:43,641 --> 00:35:45,943
of these variables
to be set to true.

704
00:35:45,943 --> 00:35:48,546
That's the same thing as exactly
one of the positive forms

705
00:35:48,546 --> 00:35:52,183
of them being true.

706
00:35:52,183 --> 00:35:53,951
Yes.

707
00:35:53,951 --> 00:35:56,020
So we just negate
everything in the clause,

708
00:35:56,020 --> 00:36:00,191
and then wherever we use x, we
also use x-bar and vice versa.

709
00:36:00,191 --> 00:36:03,694
So that guarantees that we
use up all of these instances.

710
00:36:03,694 --> 00:36:06,097
If there are k
occurrences of x, then

711
00:36:06,097 --> 00:36:07,698
we'll make k
occurrences of x-bar

712
00:36:07,698 --> 00:36:11,569
and make them all used by the
corresponding anti-clauses.

713
00:36:11,569 --> 00:36:14,906
So this is why we need those
three types of gadgets.

714
00:36:14,906 --> 00:36:16,474
If we're doing a
problem in the plane,

715
00:36:16,474 --> 00:36:19,443
we'll also need a
crossover for this to work.

716
00:36:19,443 --> 00:36:23,347
But at this point, it's
just a graph problem.

717
00:36:23,347 --> 00:36:24,215
OK?

718
00:36:24,215 --> 00:36:26,284
So that's cool.

719
00:36:26,284 --> 00:36:30,555
And this problem was
introduced in order

720
00:36:30,555 --> 00:36:33,958
to solve a packing problem.

721
00:36:33,958 --> 00:36:37,562
A little bit of
history, some time ago,

722
00:36:37,562 --> 00:36:39,730
I think the '70s, there
was a paper about,

723
00:36:39,730 --> 00:36:43,467
if I give you polygon
some orthogonal polygon

724
00:36:43,467 --> 00:36:47,438
shape with holes in it,
and I want to pack as many,

725
00:36:47,438 --> 00:36:52,210
say, 3 by 3 squares in the
polygon, that's NP hard.

726
00:36:52,210 --> 00:36:55,513
If I want to pack as many 2
by 2 squares, that's NP hard.

727
00:36:55,513 --> 00:37:00,618
That was a later paper, and so
how much smaller of a square

728
00:37:00,618 --> 00:37:01,385
can you make?

729
00:37:01,385 --> 00:37:04,889
Well, a 1 by 1 square, that's
pretty easy, in a grid polygon.

730
00:37:04,889 --> 00:37:06,691
How many 1 by 1
squares can I pack?

731
00:37:06,691 --> 00:37:08,726
The area.

732
00:37:08,726 --> 00:37:12,296
In a grid polygon, how
many 2 by 1 rectangles

733
00:37:12,296 --> 00:37:14,265
can I pack this way or this way?

734
00:37:14,265 --> 00:37:17,702
That's maximum
cardinality matching.

735
00:37:17,702 --> 00:37:20,104
So the next thing
left is trominoes.

736
00:37:20,104 --> 00:37:22,873
Three squares, and they
could be in an L-shape

737
00:37:22,873 --> 00:37:25,076
or they could be in an I-shape.

738
00:37:25,076 --> 00:37:27,378
Here, we're thinking about
both problems separately.

739
00:37:27,378 --> 00:37:30,114
So suppose you have a whole
bunch of L-shaped packages

740
00:37:30,114 --> 00:37:33,451
that you want to fit into this
weirdly shaped warehouse, that

741
00:37:33,451 --> 00:37:34,885
is NP hard.

742
00:37:34,885 --> 00:37:37,255
It's even hard in the
exact packing case.

743
00:37:37,255 --> 00:37:39,023
There will be no
holes-- Sorry, there

744
00:37:39,023 --> 00:37:41,425
will be no gaps in this packing.

745
00:37:41,425 --> 00:37:44,428
Every unit square
will be filled,

746
00:37:44,428 --> 00:37:46,797
and I think that's
quite particular.

747
00:37:46,797 --> 00:37:49,734
Those other proofs of packing,
the 2 by 2 and the 3 by 3

748
00:37:49,734 --> 00:37:51,836
squared into a polygon,
I should have shown them,

749
00:37:51,836 --> 00:37:55,940
but they're from
3SAT, planar 3SAT.

750
00:37:55,940 --> 00:37:57,575
They leave gaps
all over the place.

751
00:37:57,575 --> 00:37:59,143
Here, you don't leave
gaps and I think

752
00:37:59,143 --> 00:38:03,714
it's somehow fundamental to
this graph orientation business.

753
00:38:03,714 --> 00:38:09,520
So here is the idea of for an
edge in that graph orientation

754
00:38:09,520 --> 00:38:11,389
problem.

755
00:38:11,389 --> 00:38:14,659
It's basically a rectangle
with a bump every other square.

756
00:38:14,659 --> 00:38:15,593
So this is a big hole.

757
00:38:15,593 --> 00:38:17,928
You're not allowed to
put anything down there.

758
00:38:17,928 --> 00:38:21,465
And the idea is
you can either have

759
00:38:21,465 --> 00:38:23,034
the L's all pointing
to the right

760
00:38:23,034 --> 00:38:24,735
or all pointing to the left.

761
00:38:24,735 --> 00:38:29,807
And so you think of these
as kind of the communication

762
00:38:29,807 --> 00:38:31,008
position.

763
00:38:31,008 --> 00:38:33,644
One of these will correspond to
the edge pointing to the right,

764
00:38:33,644 --> 00:38:36,947
one will correspond to the
edges pointing to the left.

765
00:38:36,947 --> 00:38:38,983
And you can build a turn gadget.

766
00:38:38,983 --> 00:38:40,451
It works pretty cleanly.

767
00:38:40,451 --> 00:38:43,254
It doesn't matter whether
this is covered by that guy

768
00:38:43,254 --> 00:38:44,455
or covered by that guy.

769
00:38:44,455 --> 00:38:46,090
It behaves the same
as a regular wire.

770
00:38:46,090 --> 00:38:49,560
So again, it's either
this or this is occupied,

771
00:38:49,560 --> 00:38:51,362
exactly one of them.

772
00:38:51,362 --> 00:38:54,332
That tells you the
orientation of the edge.

773
00:38:54,332 --> 00:38:56,300
So that's an edge.

774
00:38:56,300 --> 00:38:58,636
You can also build a crossover.

775
00:38:58,636 --> 00:39:01,138
This is a little more casework.

776
00:39:01,138 --> 00:39:04,442
But again, this is
occupied if and only

777
00:39:04,442 --> 00:39:07,445
if this is not occupied, and
this is occupied if and only

778
00:39:07,445 --> 00:39:10,581
if this is not occupied, and
all combinations are possible.

779
00:39:10,581 --> 00:39:13,818
We just need to check that there
is a valid packing no matter

780
00:39:13,818 --> 00:39:15,152
which of those choices you want.

781
00:39:15,152 --> 00:39:19,290
Either left and top being empty,
or left and bottom being empty,

782
00:39:19,290 --> 00:39:22,226
or top and right being empty,
or bottom and right being empty.

783
00:39:22,226 --> 00:39:25,429
Those are the four cases.

784
00:39:25,429 --> 00:39:26,397
Cool.

785
00:39:26,397 --> 00:39:27,498
Crossover.

786
00:39:27,498 --> 00:39:35,139
Now we need the 0 and
3, 1 and 3, and 2 and 3.

787
00:39:35,139 --> 00:39:39,977
So instead of a single 0 or
3, they built two in a row.

788
00:39:39,977 --> 00:39:41,379
I don't know if
this is required,

789
00:39:41,379 --> 00:39:43,414
but it's fine for the
proof, because in the proof

790
00:39:43,414 --> 00:39:45,883
it was always XI, XI-Bar,
so there are always

791
00:39:45,883 --> 00:39:52,990
2, 0, or 3's in a
row, and there it is.

792
00:39:52,990 --> 00:39:56,193
So in this setting,
essentially either the left two

793
00:39:56,193 --> 00:39:59,897
will have bumps and the right
two will not have bombs,

794
00:39:59,897 --> 00:40:01,899
or vice versa, the right
two will have bumps.

795
00:40:01,899 --> 00:40:04,635
This corresponds to
these guys all being out

796
00:40:04,635 --> 00:40:06,270
in all three directions,
and these guys

797
00:40:06,270 --> 00:40:09,173
all being in all three
directions, or vice versa,

798
00:40:09,173 --> 00:40:11,442
and these are all out
and these are all in.

799
00:40:11,442 --> 00:40:14,178
So that's the x or x-bar.

800
00:40:14,178 --> 00:40:17,248
And this gadget does it.

801
00:40:17,248 --> 00:40:19,583
Again, check the cases.

802
00:40:19,583 --> 00:40:22,219
We have exactly 1-in-3.

803
00:40:22,219 --> 00:40:27,057
If exactly 1 of these is in,
then this will be packable,

804
00:40:27,057 --> 00:40:28,025
and otherwise it won't.

805
00:40:28,025 --> 00:40:31,061
That's the part that's hard
to show but you check it.

806
00:40:31,061 --> 00:40:33,998
And if you want a
2-in-3 gadget, you just

807
00:40:33,998 --> 00:40:39,837
add a couple more blocks
right there and it works.

808
00:40:39,837 --> 00:40:40,504
So that's it.

809
00:40:40,504 --> 00:40:43,374
Once you have all those gadgets,
you can do graph orientation

810
00:40:43,374 --> 00:40:45,376
and then you're NP hard.

811
00:40:45,376 --> 00:40:47,378
That was for L-trominoes.

812
00:40:47,378 --> 00:40:49,046
Do the same thing
for I-trominoes.

813
00:40:49,046 --> 00:40:52,716
This is hard to see where the
bold lines are, but if you look

814
00:40:52,716 --> 00:40:55,219
and if you download the slide,
it's probably a little easier

815
00:40:55,219 --> 00:40:57,121
to see, but, again,
you can build.

816
00:40:57,121 --> 00:41:01,759
Here, an edge gadget is
fairly straightforward.

817
00:41:01,759 --> 00:41:05,529
Just wiggle a path and
you'll either have it--

818
00:41:05,529 --> 00:41:07,565
These wiggles are in
order to guarantee--

819
00:41:07,565 --> 00:41:10,301
There's actually three possible
parities you could have.

820
00:41:10,301 --> 00:41:13,704
Sticking out by 1, or sticking
out by 2 with an I-gadget.

821
00:41:13,704 --> 00:41:18,876
This will force it to be
just 1 or 0, because we

822
00:41:18,876 --> 00:41:21,879
don't want it to be 2.

823
00:41:21,879 --> 00:41:25,449
And then the crossover
is ugly, but it works.

824
00:41:25,449 --> 00:41:28,853
And the 0, 3, and the
1-in-3 are not too hard.

825
00:41:28,853 --> 00:41:30,588
And do I have the 2 in?

826
00:41:30,588 --> 00:41:34,325
I think this is a 2-in-3,
I didn't label it.

827
00:41:34,325 --> 00:41:37,528
So, presumably, for any
polynomial shape you want,

828
00:41:37,528 --> 00:41:39,096
you can build such
gadgets so that we

829
00:41:39,096 --> 00:41:42,633
don't have such a theorem,
but I think this is neat.

830
00:41:42,633 --> 00:41:46,470
It's a little different from
a lot of the other proofs,

831
00:41:46,470 --> 00:41:48,205
similar to one of the
problem set problems

832
00:41:48,205 --> 00:41:50,708
where we had some constraints
on the neighboring things.

833
00:41:50,708 --> 00:41:53,944
But instead of about constraints
on the neighboring colors

834
00:41:53,944 --> 00:41:55,980
of the vertices or
whatever, or the truth

835
00:41:55,980 --> 00:41:59,283
assignments in the vertices,
here, it's an edge direction.

836
00:41:59,283 --> 00:42:02,620
So the edge directions are
interesting because, first

837
00:42:02,620 --> 00:42:04,388
of all, there's only
two choices, but also

838
00:42:04,388 --> 00:42:06,490
that what you see on one
side is the opposite of what

839
00:42:06,490 --> 00:42:07,558
you see on the other side.

840
00:42:07,558 --> 00:42:12,196



841
00:42:12,196 --> 00:42:14,865
Questions?

842
00:42:14,865 --> 00:42:21,205
So that is graph orientation,
and I have one more

843
00:42:21,205 --> 00:42:23,307
set of problems I
want to talk about.

844
00:42:23,307 --> 00:42:29,647



845
00:42:29,647 --> 00:42:35,786
They have many names, but
the general family is usually

846
00:42:35,786 --> 00:42:43,561
called something like
linear layout of a graph,

847
00:42:43,561 --> 00:42:48,032
and it's a bijection--
let's call it

848
00:42:48,032 --> 00:42:56,907
f-- from the vertices to 1
up to the number of vertices.

849
00:42:56,907 --> 00:43:02,046
So in other words, I'm thinking
of a one dimensional diagram

850
00:43:02,046 --> 00:43:05,616
and the coordinates I have
are 1, 2, up to the number

851
00:43:05,616 --> 00:43:08,919
of vertices and I just
want to put exactly one

852
00:43:08,919 --> 00:43:10,387
vertex at each of these spots.

853
00:43:10,387 --> 00:43:13,657
So I basically want a
permutation of the vertices,

854
00:43:13,657 --> 00:43:15,392
and then I slap them
down in that order,

855
00:43:15,392 --> 00:43:17,294
and then I measure
something about the quality

856
00:43:17,294 --> 00:43:19,630
of that layout
based on the edges.

857
00:43:19,630 --> 00:43:21,532
We haven't involved edges yet.

858
00:43:21,532 --> 00:43:25,102
And there are many different
measures you might consider.

859
00:43:25,102 --> 00:43:28,138



860
00:43:28,138 --> 00:43:32,276
Here are many of them,
but without definitions.

861
00:43:32,276 --> 00:43:36,213
So let me tell you
some definitions.

862
00:43:36,213 --> 00:43:39,016
So the first one, of the
earliest to be considered,

863
00:43:39,016 --> 00:43:42,086
is called bandwidth.

864
00:43:42,086 --> 00:43:49,460
Bandwidth is, if you look at an
edge, one endpoint of the edge

865
00:43:49,460 --> 00:43:51,829
gets mapped to one coordinate
and the other endpoint gets

866
00:43:51,829 --> 00:43:53,263
mapped to another coordinate.

867
00:43:53,263 --> 00:43:55,633
You can measure the length of
that edge in the embedding.

868
00:43:55,633 --> 00:43:57,968
I shouldn't call it embedding
because it's non-crossing,

869
00:43:57,968 --> 00:43:58,736
but in the layout.

870
00:43:58,736 --> 00:44:03,073
So for some edge vw, you can
measure the length of the edge.

871
00:44:03,073 --> 00:44:07,177
If I want to minimize the
maximum length of any edge,

872
00:44:07,177 --> 00:44:09,113
that is bandwidth.

873
00:44:09,113 --> 00:44:10,247
Why is it called bandwidth?

874
00:44:10,247 --> 00:44:10,881
Anyone know?

875
00:44:10,881 --> 00:44:14,918



876
00:44:14,918 --> 00:44:20,958
No one does matrices anymore,
or numerical linear algebra,

877
00:44:20,958 --> 00:44:21,925
so I'll tell you why.

878
00:44:21,925 --> 00:44:28,999



879
00:44:28,999 --> 00:44:34,538
If you have a matrix, let's
say, of 0's and 1's-- that's a

880
00:44:34,538 --> 00:44:41,912
graph, of course-- and all
of the non-zero elements are

881
00:44:41,912 --> 00:44:48,919
in that band, then we
call this bandwidth w.

882
00:44:48,919 --> 00:44:51,321
If it's 0 out here
and 0 out here.

883
00:44:51,321 --> 00:44:52,389
Why are these interesting?

884
00:44:52,389 --> 00:44:54,525
Because then if you run
Gaussian elimination,

885
00:44:54,525 --> 00:44:56,727
you always stay within the band.

886
00:44:56,727 --> 00:44:58,796
So this is some of the
early approaches to solving

887
00:44:58,796 --> 00:44:59,863
sparse linear systems.

888
00:44:59,863 --> 00:45:02,933
If you can get all of
the 0's into the corners,

889
00:45:02,933 --> 00:45:05,469
then you can focus here,
especially if your tri-diagonal

890
00:45:05,469 --> 00:45:06,170
is a common case.

891
00:45:06,170 --> 00:45:10,741
Anyway, that's called bandwidth,
and what this problem is saying

892
00:45:10,741 --> 00:45:15,546
is I'm allowed to permute the
rows and columns of my matrix

893
00:45:15,546 --> 00:45:19,683
in order to minimize how
many diagonals I need to use.

894
00:45:19,683 --> 00:45:22,820
So that is permutation
to minimize bandwidth.

895
00:45:22,820 --> 00:45:26,123
It would be great,
except it's NP hard.

896
00:45:26,123 --> 00:45:30,828
It's NP hard even on
trees of maximum degree 3.

897
00:45:30,828 --> 00:45:33,964
It's NP hard even
on caterpillars.

898
00:45:33,964 --> 00:45:34,832
Almost caterpillars.

899
00:45:34,832 --> 00:45:38,602
A caterpillar is a graph,
something like this.

900
00:45:38,602 --> 00:45:41,739



901
00:45:41,739 --> 00:45:45,075
I think this is caterpillar
with hair length

902
00:45:45,075 --> 00:45:49,079
at most 3, so these may
be paths of a length 3,

903
00:45:49,079 --> 00:45:51,415
maybe they even
branch a little bit,

904
00:45:51,415 --> 00:45:56,720
but every vertex is within
distance 3 of a single path.

905
00:45:56,720 --> 00:46:00,157
So even for such graphs,
when mapped into matrices,

906
00:46:00,157 --> 00:46:01,291
this problem is NP hard.

907
00:46:01,291 --> 00:46:05,062
Lots of cases are NP hard,
even for good graphs.

908
00:46:05,062 --> 00:46:06,730
You might think of
that as more general,

909
00:46:06,730 --> 00:46:09,433
but it's not
immediately implied.

910
00:46:09,433 --> 00:46:09,933
OK.

911
00:46:09,933 --> 00:46:10,601
Cool.

912
00:46:10,601 --> 00:46:12,035
That was bandwidth.

913
00:46:12,035 --> 00:46:14,938
Next one, which I've seen used
in a few different hardness

914
00:46:14,938 --> 00:46:18,175
proofs, is minimum
linear arrangement.

915
00:46:18,175 --> 00:46:20,544
Almost the same problem,
but instead of taking

916
00:46:20,544 --> 00:46:22,980
the maximum edge length and
trying to minimize that,

917
00:46:22,980 --> 00:46:25,682
take the sum of the edge lengths
and try to minimize that.

918
00:46:25,682 --> 00:46:27,117
That's minimum
linear arrangement.

919
00:46:27,117 --> 00:46:30,921
We will see a reduction
from that in a moment.

920
00:46:30,921 --> 00:46:33,357
It's NP hard, even for
my bipartite graphs.

921
00:46:33,357 --> 00:46:35,492
Cut width.

922
00:46:35,492 --> 00:46:42,466
This is, you draw all the
edges as horizontal segments

923
00:46:42,466 --> 00:46:45,235
and then I come in
with a vertical line

924
00:46:45,235 --> 00:46:48,038
and see how many
edges can I cross.

925
00:46:48,038 --> 00:46:53,410
I want to find a permutation,
so I minimize the maximums,

926
00:46:53,410 --> 00:46:54,778
you might call it
stabbing width.

927
00:46:54,778 --> 00:46:56,847
The maximum number
of edges that cross

928
00:46:56,847 --> 00:46:58,782
from the left side
to the right side

929
00:46:58,782 --> 00:47:02,052
where I take the maximum
over all notions of side.

930
00:47:02,052 --> 00:47:04,488
I take the maximum over all
choices of this x-coordinate,

931
00:47:04,488 --> 00:47:07,324
and I want to
minimize that maximum.

932
00:47:07,324 --> 00:47:09,459
That is cut width.

933
00:47:09,459 --> 00:47:11,628
Why do I want to minimize
the maximum as opposed to,

934
00:47:11,628 --> 00:47:16,633
say, minimizing the sum
of those cut values?

935
00:47:16,633 --> 00:47:20,737
Because that's the same as
minimum linear arrangement.

936
00:47:20,737 --> 00:47:24,942
If I minimize the sum
of all of these cuts,

937
00:47:24,942 --> 00:47:26,743
that's the same thing
as minimizing the sum

938
00:47:26,743 --> 00:47:29,246
of the lengths of the edges.

939
00:47:29,246 --> 00:47:31,014
So that's the same problem.

940
00:47:31,014 --> 00:47:31,515
So, OK.

941
00:47:31,515 --> 00:47:33,217
We got rid of one.

942
00:47:33,217 --> 00:47:34,017
That was cut width.

943
00:47:34,017 --> 00:47:35,652
It's hard for planar
graphs, max degree

944
00:47:35,652 --> 00:47:39,890
3, good graphs, lots of things.

945
00:47:39,890 --> 00:47:41,225
I'm going to skip mod cut.

946
00:47:41,225 --> 00:47:45,596
That's just a slight different
variation on that definition.

947
00:47:45,596 --> 00:47:47,297
Next one is vertex separation.

948
00:47:47,297 --> 00:47:52,035



949
00:47:52,035 --> 00:47:52,536
OK.

950
00:47:52,536 --> 00:47:54,104
This is a different
way of counting.

951
00:47:54,104 --> 00:47:56,974



952
00:47:56,974 --> 00:47:59,776
So here, I was counting
how many edges cross,

953
00:47:59,776 --> 00:48:03,647
but maybe many of those edges
come from the same vertex.

954
00:48:03,647 --> 00:48:05,649
I don't want to double
count those, let's say.

955
00:48:05,649 --> 00:48:08,352
I just want to count how many
vertices on the left side

956
00:48:08,352 --> 00:48:10,487
have at least one edge that
goes to the right side,

957
00:48:10,487 --> 00:48:13,690
and only count it once instead
of three times in this picture.

958
00:48:13,690 --> 00:48:14,758
OK?

959
00:48:14,758 --> 00:48:17,461
Otherwise the same
problem as cut width.

960
00:48:17,461 --> 00:48:20,097
That is also hard.

961
00:48:20,097 --> 00:48:22,833
That problem is different if
you look at the sum versions.

962
00:48:22,833 --> 00:48:26,637
You can account for
every partition point

963
00:48:26,637 --> 00:48:30,807
how many vertices in the left
have an edge to the right side,

964
00:48:30,807 --> 00:48:33,543
sum that over all
of these x values,

965
00:48:33,543 --> 00:48:36,647
and then that is sum cut.

966
00:48:36,647 --> 00:48:39,449
All of these have been
considered in various contexts.

967
00:48:39,449 --> 00:48:41,151
Last one is edge by section.

968
00:48:41,151 --> 00:48:45,389
This is where you only look at
cutting in the middle at v/2.

969
00:48:45,389 --> 00:48:47,858
So you want to balance partition
all the things on the left,

970
00:48:47,858 --> 00:48:52,496
you want to have very few
edges to things on the right.

971
00:48:52,496 --> 00:48:54,064
Or the vertex version
where you want

972
00:48:54,064 --> 00:48:55,666
to minimize number
vertices on the left

973
00:48:55,666 --> 00:48:58,735
and edges to the right
half, but exactly half. v/2.

974
00:48:58,735 --> 00:49:00,337
v/2.

975
00:49:00,337 --> 00:49:01,204
A ton of problems.

976
00:49:01,204 --> 00:49:03,573
I mentioned them
so that if you ever

977
00:49:03,573 --> 00:49:06,843
run into a problem about
ordering vertices on a line,

978
00:49:06,843 --> 00:49:08,478
you should look at
all of those and see

979
00:49:08,478 --> 00:49:09,680
which one is the most useful.

980
00:49:09,680 --> 00:49:11,381
Sort of like we have
3SAT and 1 and 3SAT,

981
00:49:11,381 --> 00:49:14,084
and not-all-equal-SAT Choose
the one that's easiest for you.

982
00:49:14,084 --> 00:49:15,852
If you have some kind
of ordering problem,

983
00:49:15,852 --> 00:49:17,421
choose the one that's
easiest for you.

984
00:49:17,421 --> 00:49:19,556
Good to know that
these are out there.

985
00:49:19,556 --> 00:49:21,825
They come from
various applications.

986
00:49:21,825 --> 00:49:24,094
Cut width is studied
a lot in graph theory,

987
00:49:24,094 --> 00:49:26,530
graph minor stuff.

988
00:49:26,530 --> 00:49:29,766
It's closely related
to path width.

989
00:49:29,766 --> 00:49:31,668
Some of these
problem-- The bisection

990
00:49:31,668 --> 00:49:34,638
comes from numerical
linear algebra.

991
00:49:34,638 --> 00:49:37,607
Minimum linear arrangement
comes, I think, originally

992
00:49:37,607 --> 00:49:41,345
from VLSI layout, chip design.

993
00:49:41,345 --> 00:49:42,679
It's like a very simple version.

994
00:49:42,679 --> 00:49:44,681
If you just have a bunch
of ports on the bottom

995
00:49:44,681 --> 00:49:46,216
and you know that
certain things need

996
00:49:46,216 --> 00:49:48,185
to be connected by
wires, that's your graph,

997
00:49:48,185 --> 00:49:50,554
you want to minimize the
total amount of wire stuff

998
00:49:50,554 --> 00:49:54,524
you have to-- minimize
the total wire lengths.

999
00:49:54,524 --> 00:49:56,059
So that's minimum
linear arrangement.

1000
00:49:56,059 --> 00:50:01,465
Very simple version of some
kind of VLSI layout problem.

1001
00:50:01,465 --> 00:50:05,002
And there's this survey if you
want to see all these problems.

1002
00:50:05,002 --> 00:50:06,937
There's one problem
not on the survey

1003
00:50:06,937 --> 00:50:09,706
because it's not about a
graph, it's about a hypergraph,

1004
00:50:09,706 --> 00:50:11,575
but it's a useful one.

1005
00:50:11,575 --> 00:50:14,644
Among ordering problems,
it's the one I know the best.

1006
00:50:14,644 --> 00:50:16,446
I've tried to use
it a couple times,

1007
00:50:16,446 --> 00:50:19,082
but rarely have I succeeded in
getting an actual NP hardness

1008
00:50:19,082 --> 00:50:21,718
proof from it, but
I will show you one,

1009
00:50:21,718 --> 00:50:24,988
and it is called betweenness.

1010
00:50:24,988 --> 00:50:30,227
So in this case, I'm
given a bunch of triples,

1011
00:50:30,227 --> 00:50:38,635
a set of pairs of things-- it's
not a graph-- of the form y

1012
00:50:38,635 --> 00:50:44,107
is between x and z.

1013
00:50:44,107 --> 00:50:48,912
And what that means
is either it's

1014
00:50:48,912 --> 00:50:52,549
between x and z in
that sense, or it's

1015
00:50:52,549 --> 00:50:56,987
between x and z in
the other sense,

1016
00:50:56,987 --> 00:50:59,990
where either x is to the left
of z or z is to the left of x,

1017
00:50:59,990 --> 00:51:01,925
but y is always between.

1018
00:51:01,925 --> 00:51:05,362
And here, of course, I really
mean f of x and f of y.

1019
00:51:05,362 --> 00:51:07,764
I mean them in the
linear embedding.

1020
00:51:07,764 --> 00:51:08,265
OK.

1021
00:51:08,265 --> 00:51:10,534
So you're given a bunch
of triples like this,

1022
00:51:10,534 --> 00:51:16,406
and then you want to find a
linear layout of your letters.

1023
00:51:16,406 --> 00:51:19,843
So again, that's a
bijection from 1 to n,

1024
00:51:19,843 --> 00:51:23,914
and such that these all hold.

1025
00:51:23,914 --> 00:51:26,516
So there's no objective
function to minimize here.

1026
00:51:26,516 --> 00:51:30,120
It's just you want each of
these things to be true.

1027
00:51:30,120 --> 00:51:32,989
So this is nice, because it's
a pretty clean constraint

1028
00:51:32,989 --> 00:51:34,524
and yet, it's hard.

1029
00:51:34,524 --> 00:51:35,959
If I, for example,
was just giving

1030
00:51:35,959 --> 00:51:38,495
you-- If I gave you a bunch of
inequality constraints, like x

1031
00:51:38,495 --> 00:51:39,463
is less than y.

1032
00:51:39,463 --> 00:51:40,030
That's easy.

1033
00:51:40,030 --> 00:51:41,798
That's sorting a partial order.

1034
00:51:41,798 --> 00:51:43,733
But here, you have a
little bit of ambiguity.

1035
00:51:43,733 --> 00:51:45,202
You don't know how
x and z relate.

1036
00:51:45,202 --> 00:51:46,870
You just know that y
is in between them.

1037
00:51:46,870 --> 00:51:50,140
That's enough to get hardness.

1038
00:51:50,140 --> 00:51:53,443
So I'm not going to prove
any of those problems hard,

1039
00:51:53,443 --> 00:51:58,849
but I will show you two
examples of hardness proofs.

1040
00:51:58,849 --> 00:52:04,488
First one is going to be from
the minimum linear arrangement.

1041
00:52:04,488 --> 00:52:06,289
In case you haven't
already memorized

1042
00:52:06,289 --> 00:52:10,393
all the problems I just
described, let me remind you.

1043
00:52:10,393 --> 00:52:14,531
Minimum linear
arrangement was minimize

1044
00:52:14,531 --> 00:52:18,802
the sum of the edge lengths.

1045
00:52:18,802 --> 00:52:20,971
That was the second
problem I described,

1046
00:52:20,971 --> 00:52:22,906
that was like the VLSI layout.

1047
00:52:22,906 --> 00:52:25,809
Minimize the sum of
all the red lines.

1048
00:52:25,809 --> 00:52:27,511
Find the permutation
that does that.

1049
00:52:27,511 --> 00:52:29,813
So we're going to
reduce it first

1050
00:52:29,813 --> 00:52:33,150
to a problem called
bipartite crossing number.

1051
00:52:33,150 --> 00:52:34,384
It's a bit of a weird problem.

1052
00:52:34,384 --> 00:52:37,487
It's mostly a stop gap on the
way to another problem, which

1053
00:52:37,487 --> 00:52:38,955
is crossing number.

1054
00:52:38,955 --> 00:52:41,224
Suppose you're given
bipartite a graph, which

1055
00:52:41,224 --> 00:52:43,727
is hard to see in this picture.

1056
00:52:43,727 --> 00:52:48,532
Given a bipartite graph, and
you want to draw in the plane.

1057
00:52:48,532 --> 00:52:55,038



1058
00:52:55,038 --> 00:52:59,943
So I have some
bipartite graph, I

1059
00:52:59,943 --> 00:53:03,680
want to draw it in the
plane in a special way.

1060
00:53:03,680 --> 00:53:08,852
I want all of the vertices
in one side of bipartition

1061
00:53:08,852 --> 00:53:09,986
to be on a horizontal line.

1062
00:53:09,986 --> 00:53:13,390
I want all the vertices in the
other side of the bipartition

1063
00:53:13,390 --> 00:53:16,459
to be on a parallel
horizontal line.

1064
00:53:16,459 --> 00:53:17,827
And all the edges
are in between.

1065
00:53:17,827 --> 00:53:18,862
They're straight lines.

1066
00:53:18,862 --> 00:53:22,032
And I want to minimize
the number of crossings.

1067
00:53:22,032 --> 00:53:24,534
So it's this very specific
kind of graph layout problem,

1068
00:53:24,534 --> 00:53:26,603
but minimizing number of
crossing is clearly good.

1069
00:53:26,603 --> 00:53:29,005
We want to draw as
planar as possible.

1070
00:53:29,005 --> 00:53:33,376
So here is a reduction from
minimum linear arrangement

1071
00:53:33,376 --> 00:53:35,145
to bipartite crossing number.

1072
00:53:35,145 --> 00:53:44,588



1073
00:53:44,588 --> 00:53:48,024
So in this problem, we're
given a general graph, not

1074
00:53:48,024 --> 00:53:49,426
necessarily bipartite.

1075
00:53:49,426 --> 00:53:52,095
We want to convert it
into a bipartite graph.

1076
00:53:52,095 --> 00:53:53,163
How do we do that?

1077
00:53:53,163 --> 00:53:56,233
Make two copies of every vertex.

1078
00:53:56,233 --> 00:53:59,369
OK, so for every vertex in
the minimum linear arrangement

1079
00:53:59,369 --> 00:54:02,973
problem, we're going to
make two copies called

1080
00:54:02,973 --> 00:54:06,610
bottom one and top one, top
two and bottom two, bottom

1081
00:54:06,610 --> 00:54:08,011
two and top two, and so on.

1082
00:54:08,011 --> 00:54:11,881
So there's n top vertices
and bottom vertices,

1083
00:54:11,881 --> 00:54:14,284
and I'm going to do two things.

1084
00:54:14,284 --> 00:54:17,487
One is connect a
whole bunch of edges.

1085
00:54:17,487 --> 00:54:21,524
And a whole bunch
means e squared,

1086
00:54:21,524 --> 00:54:27,264
and between bottom I and
top I. I just do that.

1087
00:54:27,264 --> 00:54:29,966
That will basically
force this kind of layout

1088
00:54:29,966 --> 00:54:32,669
where, basically,
the order on the top

1089
00:54:32,669 --> 00:54:35,105
has to be identical to
the order on the bottom.

1090
00:54:35,105 --> 00:54:38,208
Because if ever any of these
two bundles of edges crossed,

1091
00:54:38,208 --> 00:54:40,877
you would get e to
the fourth crossings.

1092
00:54:40,877 --> 00:54:42,612
And so if you ever
want to get less than e

1093
00:54:42,612 --> 00:54:44,114
to the fourth
crossings-- and that's

1094
00:54:44,114 --> 00:54:45,749
what we will hopefully
do-- then these

1095
00:54:45,749 --> 00:54:48,952
must appear same order
on top and bottom.

1096
00:54:48,952 --> 00:54:50,987
But we don't know
what the order is.

1097
00:54:50,987 --> 00:54:52,622
You can still permute
the bottom, just

1098
00:54:52,622 --> 00:54:56,493
correspondingly permute
the top, and all

1099
00:54:56,493 --> 00:54:58,328
be well as far as
these edge bundles go.

1100
00:54:58,328 --> 00:55:00,997
So that's good, because it
has exactly the flexibility,

1101
00:55:00,997 --> 00:55:02,966
we have exactly one
permutation on n things.

1102
00:55:02,966 --> 00:55:04,501
That's what we want
to represent with

1103
00:55:04,501 --> 00:55:06,503
minimum linear arrangement.

1104
00:55:06,503 --> 00:55:07,937
Then the only other
thing we do is

1105
00:55:07,937 --> 00:55:09,673
add in the edges of the graph.

1106
00:55:09,673 --> 00:55:12,575
But in the minimum linear
arrangement problem,

1107
00:55:12,575 --> 00:55:15,779
the edges are like
from vertex I to vertex

1108
00:55:15,779 --> 00:55:20,250
J. We're going to make that
connection from bottom I to top

1109
00:55:20,250 --> 00:55:24,587
J. There's this choice, but it
doesn't matter which is which.

1110
00:55:24,587 --> 00:55:30,860
So the idea is, then, that edge
will cross a bunch of bundles.

1111
00:55:30,860 --> 00:55:33,196
The number of bundles
it crosses is the length

1112
00:55:33,196 --> 00:55:38,335
of the edge minus 1, I think.

1113
00:55:38,335 --> 00:55:41,104
I'll ignore these
additive constants.

1114
00:55:41,104 --> 00:55:43,373
You have to be careful to
make sure everything adds up

1115
00:55:43,373 --> 00:55:45,108
the right way.

1116
00:55:45,108 --> 00:55:47,644
If you have a link
0 edge-- We never

1117
00:55:47,644 --> 00:55:49,212
have the link 0 edge,
because vertices

1118
00:55:49,212 --> 00:55:50,213
map to different places.

1119
00:55:50,213 --> 00:55:52,582
If you have a length 1 edge,
you won't cross anything,

1120
00:55:52,582 --> 00:55:53,616
so 0 crossings.

1121
00:55:53,616 --> 00:55:57,687
If you have a length 2 edge, you
will cross exactly one bundle,

1122
00:55:57,687 --> 00:55:59,389
and you pay e squared for that.

1123
00:55:59,389 --> 00:56:01,024
In general, it will
be something like e

1124
00:56:01,024 --> 00:56:03,760
squared times the sum of
the lengths of the edges.

1125
00:56:03,760 --> 00:56:04,260
Not exactly.

1126
00:56:04,260 --> 00:56:05,895
You have to subtract
off some things,

1127
00:56:05,895 --> 00:56:09,299
but you just compute
what that is.

1128
00:56:09,299 --> 00:56:14,637
It will always be basically
some fixed constant times

1129
00:56:14,637 --> 00:56:16,139
the minimum linear
arrangement cost,

1130
00:56:16,139 --> 00:56:20,610
which was the sum of the lengths
of the edges plus some fixed

1131
00:56:20,610 --> 00:56:21,678
constant.

1132
00:56:21,678 --> 00:56:24,347
And so you can solve the
bipartite crossing number

1133
00:56:24,347 --> 00:56:27,250
with a given specified number
of crossings if and only

1134
00:56:27,250 --> 00:56:30,286
if you can solve minimum linear
arrangement with a specified

1135
00:56:30,286 --> 00:56:31,721
sum of edge lengths.

1136
00:56:31,721 --> 00:56:32,422
Question.

1137
00:56:32,422 --> 00:56:34,424
AUDIENCE: What about the
crossing between edges?

1138
00:56:34,424 --> 00:56:38,194



1139
00:56:38,194 --> 00:56:39,129
PROFESSOR: Yes.

1140
00:56:39,129 --> 00:56:43,299
There's also crossings
between edges,

1141
00:56:43,299 --> 00:56:45,802
and you have to count them.

1142
00:56:45,802 --> 00:56:48,104
AUDIENCE: [INAUDIBLE] because
you can't get more than e

1143
00:56:48,104 --> 00:56:49,939
squared with this
in the normal case?

1144
00:56:49,939 --> 00:56:50,540
PROFESSOR: Yes.

1145
00:56:50,540 --> 00:56:53,076
So that will be in the noise.

1146
00:56:53,076 --> 00:56:54,644
The bulk of the
number of crossings

1147
00:56:54,644 --> 00:56:59,883
will be from crossing the
bundles with the single edges.

1148
00:56:59,883 --> 00:57:04,087
You don't want to have
bundle-bundle crossings.

1149
00:57:04,087 --> 00:57:05,622
Those, you can never afford.

1150
00:57:05,622 --> 00:57:08,391
So you're basically counting
bundles versus single edges.

1151
00:57:08,391 --> 00:57:10,093
The total number of
single edge crossings

1152
00:57:10,093 --> 00:57:12,762
will be strictly
less than e squared,

1153
00:57:12,762 --> 00:57:14,964
and so it will be strictly
less than a single guy

1154
00:57:14,964 --> 00:57:16,733
crossing a bundle.

1155
00:57:16,733 --> 00:57:18,101
So you have to inflate.

1156
00:57:18,101 --> 00:57:19,702
It's not an exact
counting, because you

1157
00:57:19,702 --> 00:57:21,805
don't know how many of
those single edge crossings

1158
00:57:21,805 --> 00:57:22,839
you're going to get.

1159
00:57:22,839 --> 00:57:28,445
So you have to add
almost e squared.

1160
00:57:28,445 --> 00:57:30,580
I have the exact count here.

1161
00:57:30,580 --> 00:57:32,582
I don't know how
interesting it is.

1162
00:57:32,582 --> 00:57:38,054
But what they wrote, it's
e squared times k minus e,

1163
00:57:38,054 --> 00:57:42,492
plus 1 minus 1 is the
exact number in the paper.

1164
00:57:42,492 --> 00:57:46,429
k here is the sum of the lengths
of the edges in that problem.

1165
00:57:46,429 --> 00:57:52,302
This is, I think, the minus 1
per edge, that gets multiplied

1166
00:57:52,302 --> 00:57:54,204
by e squared, and then
we're basically adding

1167
00:57:54,204 --> 00:57:56,372
e squared minus 1 at the end.

1168
00:57:56,372 --> 00:57:59,676
So almost e squared to allow
for any number of crossings

1169
00:57:59,676 --> 00:58:01,578
between the single guys.

1170
00:58:01,578 --> 00:58:05,215
It does make a lot of sense.

1171
00:58:05,215 --> 00:58:05,715
OK.

1172
00:58:05,715 --> 00:58:07,684
So that was bipartite
crossing number,

1173
00:58:07,684 --> 00:58:09,853
but the more natural
problem, I would say,

1174
00:58:09,853 --> 00:58:11,554
is I give you a
graph, I want to draw

1175
00:58:11,554 --> 00:58:13,089
on the plane with
fewest crossings.

1176
00:58:13,089 --> 00:58:17,727
That is, crossing number,
and it's a reduction

1177
00:58:17,727 --> 00:58:19,229
from the previous problem.

1178
00:58:19,229 --> 00:58:23,700
So basically, you can
force these vertices

1179
00:58:23,700 --> 00:58:26,436
to be on a horizontal
line, and these vertices

1180
00:58:26,436 --> 00:58:28,671
to be on another
horizontal line,

1181
00:58:28,671 --> 00:58:30,940
and to only have
edges between here

1182
00:58:30,940 --> 00:58:36,045
and here by adding huge bundles
out here to basically prevent

1183
00:58:36,045 --> 00:58:38,615
anything from going out there,

1184
00:58:38,615 --> 00:58:40,250
Now we're given a
bipartite graph.

1185
00:58:40,250 --> 00:58:42,218
We want to draw it
in this kind of way,

1186
00:58:42,218 --> 00:58:44,521
minimizing number of
crossings in between.

1187
00:58:44,521 --> 00:58:48,157
And so this will turn
that into a general graph.

1188
00:58:48,157 --> 00:58:53,796
It's actually still bipartite,
but now the planar embedding

1189
00:58:53,796 --> 00:58:55,198
is forced, more or less.

1190
00:58:55,198 --> 00:58:56,466
I mean, it's not an embedding.

1191
00:58:56,466 --> 00:58:57,867
I keep using that word.

1192
00:58:57,867 --> 00:58:59,936
The planar drawing is
more or less forced.

1193
00:58:59,936 --> 00:59:02,906
You can show these guys have
to be in this kind of topology,

1194
00:59:02,906 --> 00:59:04,574
and then there's some
crossings in here,

1195
00:59:04,574 --> 00:59:06,509
but none of these edges
could ever cross this,

1196
00:59:06,509 --> 00:59:09,913
because this is way more
than the number of crossings

1197
00:59:09,913 --> 00:59:11,681
in the input graph.

1198
00:59:11,681 --> 00:59:12,181
Yeah?

1199
00:59:12,181 --> 00:59:16,085
AUDIENCE: What about
not multi-graphs?

1200
00:59:16,085 --> 00:59:17,754
PROFESSOR: Not multi-graphs?

1201
00:59:17,754 --> 00:59:18,354
Good question.

1202
00:59:18,354 --> 00:59:23,893
I assume you can split
these things up, or maybe

1203
00:59:23,893 --> 00:59:26,996
subdivide the edges,
or some trick,

1204
00:59:26,996 --> 00:59:29,732
but I have to be very careful.

1205
00:59:29,732 --> 00:59:31,134
I don't know for sure.

1206
00:59:31,134 --> 00:59:33,670
Definitely not
mentioned in this paper.

1207
00:59:33,670 --> 00:59:34,170
OK.

1208
00:59:34,170 --> 00:59:41,411
So that was crossing number,
bipartite, and unconstraints.

1209
00:59:41,411 --> 00:59:48,451
And I have one more sketch of a
proof, which is mostly for fun,

1210
00:59:48,451 --> 00:59:50,119
and I get to use
my favorite phrase,

1211
00:59:50,119 --> 00:59:54,757
how to kill log n birds with
one stone, or order one stones.

1212
00:59:54,757 --> 00:59:57,226
So suppose you have
a Rubik's cube,

1213
00:59:57,226 --> 00:59:59,829
but 3, by 3, by 3, that's easy.

1214
00:59:59,829 --> 01:00:03,366
So you have an n, by n, by
n Rubik's cube, like this 7,

1215
01:00:03,366 --> 01:00:08,371
by 7, by 7, v cube, and
moves are-- I assume you all

1216
01:00:08,371 --> 01:00:10,006
know how a Rubik's cube works.

1217
01:00:10,006 --> 01:00:13,376
You can rotate in each
of these directions--

1218
01:00:13,376 --> 01:00:16,579
and I hope not to
mess it up too much--

1219
01:00:16,579 --> 01:00:19,115
and your goal is to get to the
state where it's all solved.

1220
01:00:19,115 --> 01:00:22,251
Now, usually, someone's
mean, and they mix it all up,

1221
01:00:22,251 --> 01:00:24,487
and they just give it
you like, OK solve it.

1222
01:00:24,487 --> 01:00:26,055
I don't just want
to solve it, I want

1223
01:00:26,055 --> 01:00:27,590
to solve it with
the fewest moves,

1224
01:00:27,590 --> 01:00:30,760
because it's polynomial
time to solve it at all.

1225
01:00:30,760 --> 01:00:33,129
I want to solve it
in the fewest moves.

1226
01:00:33,129 --> 01:00:34,664
So if I'm given this
position, I want

1227
01:00:34,664 --> 01:00:36,499
to know it's only one
move away from solved.

1228
01:00:36,499 --> 01:00:38,968



1229
01:00:38,968 --> 01:00:41,738
We do not know the
complexity of that problem.

1230
01:00:41,738 --> 01:00:48,745
Let me first tell you a nice
way to think about this problem

1231
01:00:48,745 --> 01:00:51,147
is actually in the 2D case.

1232
01:00:51,147 --> 01:00:53,616
So these are not
built super large,

1233
01:00:53,616 --> 01:01:03,860
but, again, I can rotate
either a row or a column.

1234
01:01:03,860 --> 01:01:07,063
So at a high level, you can
think of a picture like this.

1235
01:01:07,063 --> 01:01:09,899
You have a red side
and a blue side,

1236
01:01:09,899 --> 01:01:13,169
and there's a certain--
If you think about where

1237
01:01:13,169 --> 01:01:16,606
this square goes, it
can go to this position,

1238
01:01:16,606 --> 01:01:18,307
to this position,
and this position.

1239
01:01:18,307 --> 01:01:20,276
In general, a
little cube can only

1240
01:01:20,276 --> 01:01:22,378
go to four different
spots in 2D.

1241
01:01:22,378 --> 01:01:24,347
On the 3D cube,
there's 24 spots it

1242
01:01:24,347 --> 01:01:26,783
can go to, because there are
24 automorphisms on the cube.

1243
01:01:26,783 --> 01:01:28,918
It's just a lot harder to
see, but it's essentially

1244
01:01:28,918 --> 01:01:30,420
the same thing going on.

1245
01:01:30,420 --> 01:01:32,055
So here's a sort of
thing you could do.

1246
01:01:32,055 --> 01:01:36,526
If I flip this column,
these guys go over to here,

1247
01:01:36,526 --> 01:01:38,361
and they flip upside down.

1248
01:01:38,361 --> 01:01:41,464
So whatever was red here
becomes blue down here,

1249
01:01:41,464 --> 01:01:43,299
and it gets reflected
across this line.

1250
01:01:43,299 --> 01:01:45,902
So when I do this move,
I get this pattern

1251
01:01:45,902 --> 01:01:47,570
for that row, that column.

1252
01:01:47,570 --> 01:01:50,740
If I also do it at this
column, I get that pattern.

1253
01:01:50,740 --> 01:01:51,240
OK.

1254
01:01:51,240 --> 01:01:53,276
So now maybe I do
these two columns.

1255
01:01:53,276 --> 01:01:55,678
They completely flip,
become all blue.

1256
01:01:55,678 --> 01:01:58,881
Now maybe I do these two
columns and I get this picture

1257
01:01:58,881 --> 01:02:05,688
because these red spots become
blue up here, and so on.

1258
01:02:05,688 --> 01:02:10,126
And then if I flip these two
rows, hey, I solved the puzzle.

1259
01:02:10,126 --> 01:02:14,063
And in general, if you look at
a [? cubee ?] and the four other

1260
01:02:14,063 --> 01:02:16,966
[? cubees ?] that it can go
to, they have some pattern.

1261
01:02:16,966 --> 01:02:19,035
There's a constant number
patterns they can have.

1262
01:02:19,035 --> 01:02:23,005
For 2D it's-- I forget-- like
10 or 20 different patterns.

1263
01:02:23,005 --> 01:02:26,542
In 3D, it's, like, a lot more.

1264
01:02:26,542 --> 01:02:27,643
Billions or something.

1265
01:02:27,643 --> 01:02:28,478
Anyway.

1266
01:02:28,478 --> 01:02:33,616
But it's constant, even
for an n, by n, by n cube.

1267
01:02:33,616 --> 01:02:37,086
So you can characterize
for each such pattern

1268
01:02:37,086 --> 01:02:38,321
what it needs to be solved.

1269
01:02:38,321 --> 01:02:39,789
So these [? cubees ?],
for example,

1270
01:02:39,789 --> 01:02:42,692
need a column, row, column, row.

1271
01:02:42,692 --> 01:02:43,626
That's what we showed.

1272
01:02:43,626 --> 01:02:45,828
We flipped its column,
then we flipped its row,

1273
01:02:45,828 --> 01:02:47,396
then we flipped its column,
then we flipped its row.

1274
01:02:47,396 --> 01:02:48,064
That solved it.

1275
01:02:48,064 --> 01:02:49,465
That's exactly what they need.

1276
01:02:49,465 --> 01:02:51,467
And in minimal solution,
you will do that.

1277
01:02:51,467 --> 01:02:53,636
But what you see
here is, suppose

1278
01:02:53,636 --> 01:02:55,138
I had a big grid of them.

1279
01:02:55,138 --> 01:02:58,107
I could do all the columns, then
all the rows containing them,

1280
01:02:58,107 --> 01:02:59,942
then all of the columns
and all the rows.

1281
01:02:59,942 --> 01:03:02,411
If they were in the
same initial pattern,

1282
01:03:02,411 --> 01:03:06,048
I get a big savings in how
quickly I can solve it.

1283
01:03:06,048 --> 01:03:09,185
If I have an x by y grid
of identically oriented

1284
01:03:09,185 --> 01:03:11,087
[? cubees ?], I can
solve it in about x

1285
01:03:11,087 --> 01:03:13,923
plus y moves instead
of x times y moves.

1286
01:03:13,923 --> 01:03:16,959
And this is something we used to
prove that you can solve an n,

1287
01:03:16,959 --> 01:03:19,962
by n, by n Rubik's cube and n
squared divided by log n moves,

1288
01:03:19,962 --> 01:03:20,997
in the worst case.

1289
01:03:20,997 --> 01:03:22,765
So you can kill log n
birds with one stone.

1290
01:03:22,765 --> 01:03:27,136
There's always such a grid
of area roughly log n.

1291
01:03:27,136 --> 01:03:32,475
But here, I want to use
that idea for hardness.

1292
01:03:32,475 --> 01:03:35,278
In some sense, that was to
give you some intuition.

1293
01:03:35,278 --> 01:03:37,547
Sadly, we don't know whether
this problem is NP hard,

1294
01:03:37,547 --> 01:03:39,882
minimizing the number
of moves, but what

1295
01:03:39,882 --> 01:03:41,617
we do know is that if
some of the stickers

1296
01:03:41,617 --> 01:03:43,886
fell off your cube,
then it's NP hard.

1297
01:03:43,886 --> 01:03:46,856
So the white things
here don't care.

1298
01:03:46,856 --> 01:03:49,525
You don't care what
state they end up in.

1299
01:03:49,525 --> 01:03:51,127
They're sort of
wild cards, so it

1300
01:03:51,127 --> 01:03:52,929
could be the sticker
came off or maybe

1301
01:03:52,929 --> 01:03:54,630
it just changes its
color to whatever's

1302
01:03:54,630 --> 01:03:56,532
correct at the moment.

1303
01:03:56,532 --> 01:03:58,067
But some of the
stickers are still on

1304
01:03:58,067 --> 01:04:00,269
and they have to be
solved, and this is

1305
01:04:00,269 --> 01:04:03,372
a reduction from betweenness.

1306
01:04:03,372 --> 01:04:07,376
This gadget will be solvable
in a certain number of moves

1307
01:04:07,376 --> 01:04:14,050
if and only if the first time
you make the x2 column move

1308
01:04:14,050 --> 01:04:17,186
is between the first time
you make the x1 column

1309
01:04:17,186 --> 01:04:19,789
move and the x3 column move.

1310
01:04:19,789 --> 01:04:21,224
I think these are
in the situation

1311
01:04:21,224 --> 01:04:23,593
that they want to do
column, row, column, row,

1312
01:04:23,593 --> 01:04:24,427
something like that.

1313
01:04:24,427 --> 01:04:26,128
So each one's going
to get used twice.

1314
01:04:26,128 --> 01:04:28,731
It's a matter of how you
intersperse those orders.

1315
01:04:28,731 --> 01:04:31,567
So it's an ordering problem, and
this ends up being betweenness.

1316
01:04:31,567 --> 01:04:32,869
I will not go through the proof.

1317
01:04:32,869 --> 01:04:35,671
It's quite tedious.

1318
01:04:35,671 --> 01:04:37,640
So this column is going
to get used many times

1319
01:04:37,640 --> 01:04:39,108
in the reduction.

1320
01:04:39,108 --> 01:04:41,510
Basically, you just work
in the upper left corner

1321
01:04:41,510 --> 01:04:47,250
of the picture because the
other quarters move similarly.

1322
01:04:47,250 --> 01:04:49,018
You introduce some
extra rows and columns

1323
01:04:49,018 --> 01:04:51,354
that are specific to
this betweenness gadget,

1324
01:04:51,354 --> 01:04:53,856
and if you want to have
more betweenness gadgets,

1325
01:04:53,856 --> 01:04:58,227
you add more such columns
and rows in this pattern.

1326
01:04:58,227 --> 01:05:00,563
As long as they're sort of
off diagonal from each other,

1327
01:05:00,563 --> 01:05:03,499
they won't interact, hence you
end up with a big betweenness

1328
01:05:03,499 --> 01:05:06,035
reduction.

1329
01:05:06,035 --> 01:05:08,604
So that's it for today.
